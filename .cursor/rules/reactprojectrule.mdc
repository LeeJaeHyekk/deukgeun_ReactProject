description: Enhanced Cursor Project Rules for Full-Stack React/TypeScript Project
globs:

- "\*_/_"
  alwaysApply: false
  rules:
- id: fullstack-structure-analysis
  description: |
  Analyze project structure considering full-stack architecture:

  - Backend: tsconfig.json (strict: false, experimentalDecorators: true)
  - Frontend: tsconfig.app.json (strict: true, React/JSX)
  - Shared types: "../types/\*_/_"
  - Path aliases: @backend/_, @frontend/_, @shared/\*
  - TypeORM entities with decorators
    applyIf:
  - fileMatches: "\*_/_"
    action: "run-fullstack-structure-analysis"

- id: typeorm-version-management
  description: |
  Ensure TypeORM version compatibility:

  - Current: ^0.3.20 (needs update to ^0.3.21)
  - Check experimentalDecorators and emitDecoratorMetadata are enabled
  - Verify entity decorators work correctly
    applyIf:
  - fileMatches: "package.json"
  - fileMatches: "\*_/_.entity.ts"
    action: "check-typeorm-compatibility"

- id: strict-mode-migration
  description: |
  Handle TypeScript strict mode differences:

  - Backend: strict: false (legacy code compatibility)
  - Frontend: strict: true (modern React development)
  - Plan gradual migration for backend strict mode
    applyIf:
  - fileMatches: "\*_/_.ts"
  - fileMatches: "\*_/_.tsx"
    action: "analyze-strict-mode-impact"

- id: path-alias-consistency
  description: |
  Maintain consistent path aliases across project:

  - Backend: @services/_, @entities/_, @controllers/\*
  - Frontend: @shared/_, @features/_, @pages/\*
  - Shared: @types/_, @backend/_, @frontend/\*
    applyIf:
  - fileMatches: "\*_/_.ts"
  - fileMatches: "\*_/_.tsx"
    action: "validate-path-aliases"

- id: entity-decorator-validation
  description: |
  Validate TypeORM entity decorators:

  - Ensure @Entity(), @Column(), @PrimaryGeneratedColumn() usage
  - Check relationship decorators (@OneToMany, @ManyToOne)
  - Verify experimentalDecorators: true in tsconfig
    applyIf:
  - fileMatches: "\*_/_.entity.ts"
  - fileMatches: "\*_/_.ts"
    action: "validate-entity-decorators"

- id: api-consistency
  description: |
  Maintain API consistency between frontend and backend:

  - Shared types in ../types/
  - Consistent error handling patterns
  - Standardized response formats
    applyIf:
  - fileMatches: "**/api/**/\*.ts"
  - fileMatches: "**/controllers/**/\*.ts"
    action: "check-api-consistency"

- id: react-component-patterns
  description: |
  Follow React best practices for frontend:

  - Functional components with TypeScript interfaces
  - Proper prop typing and validation
  - Consistent component structure
    applyIf:
  - fileMatches: "\*_/_.tsx"
  - fileMatches: "\*_/_.ts"
    action: "validate-react-patterns"

- id: database-entity-relationships
  description: |
  Ensure proper database entity relationships:
  - Foreign key constraints properly defined
  - Cascade operations configured correctly
  - Index optimization for performance
    applyIf:
  - fileMatches: "\*_/_.entity.ts"
  - fileMatches: "**/migrations/**/\*.ts"
    action: "validate-entity-relationships"
