"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.testIntegratedCrawling = testIntegratedCrawling;
require("reflect-metadata");
const CrawlingService_js_1 = require('modules/crawling/core/CrawlingService.js');
const dotenv = __importStar(require("dotenv"));
const path = __importStar(require("path"));
const pathUtils_1 = require('utils/pathUtils');
const __dirname = (0, pathUtils_1.getDirname)();
dotenv.config({ path: path.join(__dirname, '..', '.env') });
dotenv.config({ path: path.join(__dirname, '..', 'env.development') });
if (!process.env.SEOUL_OPENAPI_KEY) {
    console.error('‚ùå SEOUL_OPENAPI_KEY ÌôòÍ≤Ω Î≥ÄÏàòÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
    console.error('   .env ÌååÏùºÏóê SEOUL_OPENAPI_KEYÎ•º ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî.');
    process.exit(1);
}
async function testIntegratedCrawling() {
    console.log('üß™ ÌÜµÌï© ÌÅ¨Î°§ÎßÅ ÏãúÏä§ÌÖú ÌÖåÏä§Ìä∏ ÏãúÏûë');
    console.log('='.repeat(70));
    let dataSource = null;
    let gymRepository = null;
    try {
        const mockRepository = {
            find: async () => [],
            findOne: async () => null,
            save: async (data) => data,
            create: (data) => data
        };
        gymRepository = mockRepository;
        console.log('‚úÖ Mock Repository Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
    }
    catch (error) {
        console.log('‚ö†Ô∏è Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÏóÜÏù¥ ÏßÑÌñâÌï©ÎãàÎã§ (ÌååÏùº Í∏∞Î∞ò ÌÖåÏä§Ìä∏)');
        gymRepository = {};
    }
    try {
        const crawlingService = new CrawlingService_js_1.CrawlingService(gymRepository);
        crawlingService.updateConfig({
            enablePublicApi: true,
            enableCrawling: true,
            enableDataMerging: true,
            enableQualityCheck: true,
            batchSize: 3,
            maxConcurrentRequests: 1,
            delayBetweenBatches: 2000,
            maxRetries: 2,
            timeout: 15000,
            saveToFile: true,
            saveToDatabase: false
        });
        console.log('\nüìã ÌÅ¨Î°§ÎßÅ ÏÑ§Ï†ï:');
        console.log('- Í≥µÍ≥µ API ÏàòÏßë: ÌôúÏÑ±Ìôî');
        console.log('- Ïõπ ÌÅ¨Î°§ÎßÅ: ÌôúÏÑ±Ìôî');
        console.log('- Î∞∞Ïπò ÌÅ¨Í∏∞: 3Í∞ú');
        console.log('- ÏßÄÏó∞ ÏãúÍ∞Ñ: 2Ï¥à');
        console.log('');
        console.log('üöÄ ÌÜµÌï© ÌÅ¨Î°§ÎßÅ Ïã§Ìñâ ÏãúÏûë...\n');
        const result = await crawlingService.executeIntegratedCrawling();
        console.log('\n' + '='.repeat(70));
        console.log('üìä ÌÅ¨Î°§ÎßÅ Í≤∞Í≥º ÏöîÏïΩ');
        console.log('='.repeat(70));
        console.log(`‚úÖ ÏÑ±Í≥µ Ïó¨Î∂Ä: ${result.success ? 'ÏÑ±Í≥µ' : 'Ïã§Ìå®'}`);
        console.log(`üì° Í≥µÍ≥µ API ÏàòÏßë: ${result.publicApiGyms}Í∞ú Ìó¨Ïä§Ïû•`);
        console.log(`üîç name Í∏∞Î∞ò ÌÅ¨Î°§ÎßÅ: ${result.crawlingGyms}Í∞ú Ìó¨Ïä§Ïû•`);
        console.log(`üì¶ Ï¥ù Ï≤òÎ¶¨Îêú Ìó¨Ïä§Ïû•: ${result.totalGyms}Í∞ú`);
        console.log(`‚è±Ô∏è  ÏÜåÏöî ÏãúÍ∞Ñ: ${(result.duration / 1000).toFixed(1)}Ï¥à`);
        if (result.dataQuality) {
            console.log('\nüìà Îç∞Ïù¥ÌÑ∞ ÌíàÏßà:');
            console.log(`- ÏôÑÏ†ÑÌïú Îç∞Ïù¥ÌÑ∞: ${result.dataQuality.complete || 0}Í∞ú`);
            console.log(`- Î∂ÄÎ∂Ñ Îç∞Ïù¥ÌÑ∞: ${result.dataQuality.partial || 0}Í∞ú`);
            console.log(`- ÏµúÏÜå Îç∞Ïù¥ÌÑ∞: ${result.dataQuality.minimal || 0}Í∞ú`);
            console.log(`- ÌèâÍ∑† ÌíàÏßà Ï†êÏàò: ${result.dataQuality.averageQualityScore?.toFixed(2) || 'N/A'}`);
        }
        if (result.errors && result.errors.length > 0) {
            console.log('\n‚ö†Ô∏è Ïò§Î•ò:');
            result.errors.forEach((error, index) => {
                console.log(`${index + 1}. ${error}`);
            });
        }
        const sessionStats = crawlingService.getSessionStatistics();
        console.log('\nüìä ÏÑ∏ÏÖò ÌÜµÍ≥Ñ:');
        console.log(`- Ï¥ù ÏÑ∏ÏÖò Ïàò: ${sessionStats.totalSessions}`);
        console.log(`- ÏôÑÎ£åÎêú ÏÑ∏ÏÖò: ${sessionStats.completedSessions}`);
        console.log(`- Ïã§Ìå®Ìïú ÏÑ∏ÏÖò: ${sessionStats.failedSessions}`);
        console.log(`- Ï¥ù Ï≤òÎ¶¨ Ìó¨Ïä§Ïû•: ${sessionStats.totalGymsProcessed}`);
        console.log('\n‚úÖ ÌÜµÌï© ÌÅ¨Î°§ÎßÅ ÌÖåÏä§Ìä∏ ÏôÑÎ£å!');
        console.log('\nüí° Îã§Ïùå Îã®Í≥Ñ:');
        console.log('1. src/data/gyms_raw.json ÌååÏùºÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî');
        console.log('2. logs/crawling-history.jsonÏóêÏÑú ÌûàÏä§ÌÜ†Î¶¨Î•º ÌôïÏù∏ÌïòÏÑ∏Ïöî');
    }
    catch (error) {
        console.error('\n‚ùå ÌÖåÏä§Ìä∏ Ï§ë Ïò§Î•ò Î∞úÏÉù:', error);
        if (error instanceof Error) {
            console.error('Ïò§Î•ò Î©îÏãúÏßÄ:', error.message);
            console.error('Ïä§ÌÉù Ìä∏Î†àÏù¥Ïä§:', error.stack);
        }
    }
    finally {
        if (dataSource && dataSource.isInitialized) {
            await dataSource.destroy();
            console.log('\n‚úÖ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Ï¢ÖÎ£å');
        }
    }
    console.log('\n' + '='.repeat(70));
    console.log('üèÅ ÌÖåÏä§Ìä∏ Ï¢ÖÎ£å');
}
testIntegratedCrawling()
    .then(() => process.exit(0))
    .catch((error) => {
    console.error('Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ Ïã§Ìå®:', error);
    process.exit(1);
});
