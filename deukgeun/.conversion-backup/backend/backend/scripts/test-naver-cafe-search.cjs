"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.testNaverCafeSearch = testNaverCafeSearch;
const NaverCafeSearchEngine_1 = require('modules/crawling/sources/search/NaverCafeSearchEngine');
const pathUtils_1 = require('modules/crawling/utils/pathUtils');
const fs = __importStar(require("fs/promises"));
async function testNaverCafeSearch() {
    console.log('üß™ ÎÑ§Ïù¥Î≤Ñ Ïπ¥Ìéò Í≤ÄÏÉâ Î°úÏßÅ ÌÖåÏä§Ìä∏ ÏãúÏûë');
    console.log('='.repeat(50));
    try {
        const gymsRawPath = (0, pathUtils_1.getGymsRawPath)();
        const gymsRawContent = await fs.readFile(gymsRawPath, 'utf-8');
        const gymsData = JSON.parse(gymsRawContent);
        const testGyms = gymsData.slice(0, 3);
        console.log(`üìã ÌÖåÏä§Ìä∏ ÎåÄÏÉÅ: ${testGyms.length}Í∞ú Ìó¨Ïä§Ïû•`);
        const naverCafeEngine = new NaverCafeSearchEngine_1.NaverCafeSearchEngine(30000, 2000);
        const results = [];
        for (let i = 0; i < testGyms.length; i++) {
            const gym = testGyms[i];
            console.log(`\nüîç ÌÖåÏä§Ìä∏ ${i + 1}/${testGyms.length}: ${gym.name}`);
            console.log(`üìç Ï£ºÏÜå: ${gym.address}`);
            try {
                const startTime = Date.now();
                const searchResult = await naverCafeEngine.search(gym.name, gym.address);
                const endTime = Date.now();
                if (searchResult) {
                    console.log(`‚úÖ Í≤ÄÏÉâ ÏÑ±Í≥µ (${endTime - startTime}ms)`);
                    console.log(`üìû Ï†ÑÌôîÎ≤àÌò∏: ${searchResult.phone || 'ÏóÜÏùå'}`);
                    console.log(`üïê Ïö¥ÏòÅÏãúÍ∞Ñ: ${searchResult.openHour || 'ÏóÜÏùå'} - ${searchResult.closeHour || 'ÏóÜÏùå'}`);
                    console.log(`üí∞ Í∞ÄÍ≤©: ${searchResult.price || 'ÏóÜÏùå'}`);
                    console.log(`‚≠ê ÌèâÏ†ê: ${searchResult.rating || 'ÏóÜÏùå'}`);
                    console.log(`üìù Î¶¨Î∑∞ Ïàò: ${searchResult.reviewCount || 'ÏóÜÏùå'}`);
                    console.log(`üè¢ ÏãúÏÑ§: ${searchResult.facilities?.length || 0}Í∞ú`);
                    console.log(`üéØ Ïã†Î¢∞ÎèÑ: ${searchResult.confidence.toFixed(2)}`);
                    console.log(`üìä ÏÜåÏä§: ${searchResult.source}`);
                    results.push({
                        gymName: gym.name,
                        success: true,
                        data: searchResult,
                        duration: endTime - startTime
                    });
                }
                else {
                    console.log(`‚ùå Í≤ÄÏÉâ Ïã§Ìå® - Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏùå`);
                    results.push({
                        gymName: gym.name,
                        success: false,
                        data: null,
                        duration: endTime - startTime
                    });
                }
            }
            catch (error) {
                console.error(`‚ùå Í≤ÄÏÉâ Ïò§Î•ò:`, error);
                results.push({
                    gymName: gym.name,
                    success: false,
                    error: error instanceof Error ? error.message : String(error),
                    duration: 0
                });
            }
            if (i < testGyms.length - 1) {
                console.log('‚è≥ Îã§Ïùå ÌÖåÏä§Ìä∏Î•º ÏúÑÌï¥ 3Ï¥à ÎåÄÍ∏∞...');
                await new Promise(resolve => setTimeout(resolve, 3000));
            }
        }
        console.log('\n' + '='.repeat(50));
        console.log('üìä ÌÖåÏä§Ìä∏ Í≤∞Í≥º ÏöîÏïΩ');
        console.log('='.repeat(50));
        const successfulSearches = results.filter(r => r.success);
        const failedSearches = results.filter(r => !r.success);
        console.log(`‚úÖ ÏÑ±Í≥µ: ${successfulSearches.length}Í∞ú`);
        console.log(`‚ùå Ïã§Ìå®: ${failedSearches.length}Í∞ú`);
        console.log(`üìà ÏÑ±Í≥µÎ•†: ${((successfulSearches.length / results.length) * 100).toFixed(1)}%`);
        if (successfulSearches.length > 0) {
            const avgDuration = successfulSearches.reduce((sum, r) => sum + r.duration, 0) / successfulSearches.length;
            console.log(`‚è±Ô∏è ÌèâÍ∑† ÏùëÎãµ ÏãúÍ∞Ñ: ${avgDuration.toFixed(0)}ms`);
            const avgConfidence = successfulSearches.reduce((sum, r) => sum + (r.data?.confidence || 0), 0) / successfulSearches.length;
            console.log(`üéØ ÌèâÍ∑† Ïã†Î¢∞ÎèÑ: ${avgConfidence.toFixed(2)}`);
            const withPhone = successfulSearches.filter(r => r.data?.phone).length;
            const withPrice = successfulSearches.filter(r => r.data?.price).length;
            const withRating = successfulSearches.filter(r => r.data?.rating).length;
            const withHours = successfulSearches.filter(r => r.data?.openHour).length;
            console.log(`üìû Ï†ÑÌôîÎ≤àÌò∏ Ï∂îÏ∂ú: ${withPhone}Í∞ú`);
            console.log(`üí∞ Í∞ÄÍ≤© Ï†ïÎ≥¥ Ï∂îÏ∂ú: ${withPrice}Í∞ú`);
            console.log(`‚≠ê ÌèâÏ†ê Ï∂îÏ∂ú: ${withRating}Í∞ú`);
            console.log(`üïê Ïö¥ÏòÅÏãúÍ∞Ñ Ï∂îÏ∂ú: ${withHours}Í∞ú`);
        }
        const testResult = {
            timestamp: new Date().toISOString(),
            testType: 'naver_cafe_search',
            summary: {
                total: results.length,
                successful: successfulSearches.length,
                failed: failedSearches.length,
                successRate: (successfulSearches.length / results.length) * 100
            },
            results: results
        };
        await fs.writeFile('src/data/test_naver_cafe_search_result.json', JSON.stringify(testResult, null, 2), 'utf-8');
        console.log(`\nüíæ ÏÉÅÏÑ∏ Í≤∞Í≥ºÍ∞Ä 'src/data/test_naver_cafe_search_result.json'Ïóê Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.`);
    }
    catch (error) {
        console.error('‚ùå ÌÖåÏä§Ìä∏ Ïã§Ìñâ Ï§ë Ïò§Î•ò Î∞úÏÉù:', error);
    }
}
if (require.main === module) {
    testNaverCafeSearch()
        .then(() => {
        console.log('\nüéâ ÎÑ§Ïù¥Î≤Ñ Ïπ¥Ìéò Í≤ÄÏÉâ ÌÖåÏä§Ìä∏ ÏôÑÎ£å');
        process.exit(0);
    })
        .catch((error) => {
        console.error('‚ùå ÌÖåÏä§Ìä∏ Ïã§Ìå®:', error);
        process.exit(1);
    });
}
