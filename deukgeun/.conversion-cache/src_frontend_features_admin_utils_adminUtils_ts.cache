{"key":"992388ec597a491a8a61b77a7010af38","result":"// ============================================================================\r\n// Admin Utilities\r\n// ============================================================================\r\n\r\nimport type {\r\n  AdminRole,\r\n  AdminMenuItem,\r\n  SystemStats,\r\n  PerformanceMetrics,\r\n} from \"../types\"\r\n\r\n// 관리자 권한 확인 함수들\r\nexport function isAdmin(role: AdminRole): boolean {\r\n  return role === \"admin\"\r\n}\r\n\r\nexport function isModeratorOrHigher(role: AdminRole): boolean {\r\n  return role === \"admin\" || role === \"moderator\"\r\n}\r\n\r\nexport function hasRoleOrHigher(\r\n  userRole: AdminRole,\r\n  requiredRole: AdminRole\r\n): boolean {\r\n  const roleHierarchy: Record<AdminRole, number> = {\r\n    user: 1,\r\n    moderator: 2,\r\n    admin: 3,\r\n  }\r\n\r\n  return roleHierarchy[userRole] >= roleHierarchy[requiredRole]\r\n}\r\n\r\n// 관리자 메뉴 필터링\r\nexport function filterAdminMenuItems(\r\n  menuItems: AdminMenuItem[],\r\n  userRole: AdminRole\r\n): AdminMenuItem[] {\r\n  return menuItems.filter(item => hasRoleOrHigher(userRole, item.requiredRole))\r\n}\r\n\r\n// 시스템 상태 평가\r\nexport function evaluateSystemHealth(\r\n  stats: SystemStats\r\n): \"healthy\" | \"warning\" | \"error\" {\r\n  const { systemLoad, memoryUsage, diskUsage } = stats\r\n\r\n  if (systemLoad > 80 || memoryUsage > 90 || diskUsage > 95) {\r\n    return \"error\"\r\n  }\r\n\r\n  if (systemLoad > 60 || memoryUsage > 75 || diskUsage > 85) {\r\n    return \"warning\"\r\n  }\r\n\r\n  return \"healthy\"\r\n}\r\n\r\n// 성능 메트릭 평가\r\nexport function evaluatePerformance(\r\n  metrics: PerformanceMetrics\r\n): \"good\" | \"fair\" | \"poor\" {\r\n  const { averageResponseTime, errorRate, cacheHitRate } = metrics\r\n\r\n  if (averageResponseTime < 200 && errorRate < 1 && cacheHitRate > 80) {\r\n    return \"good\"\r\n  }\r\n\r\n  if (averageResponseTime < 500 && errorRate < 5 && cacheHitRate > 60) {\r\n    return \"fair\"\r\n  }\r\n\r\n  return \"poor\"\r\n}\r\n\r\n// 시간 포맷팅\r\nexport function formatUptime(seconds: number): string {\r\n  const days = Math.floor(seconds / 86400)\r\n  const hours = Math.floor((seconds % 86400) / 3600)\r\n  const minutes = Math.floor((seconds % 3600) / 60)\r\n\r\n  if (days > 0) {\r\n    return `${days}일 ${hours}시간 ${minutes}분`\r\n  }\r\n\r\n  if (hours > 0) {\r\n    return `${hours}시간 ${minutes}분`\r\n  }\r\n\r\n  return `${minutes}분`\r\n}\r\n\r\nexport function formatBytes(bytes: number): string {\r\n  const sizes = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\"]\r\n  if (bytes === 0) return \"0 B\"\r\n\r\n  const i = Math.floor(Math.log(bytes) / Math.log(1024))\r\n  return `${(bytes / Math.pow(1024, i)).toFixed(2)} ${sizes[i]}`\r\n}\r\n\r\nexport function formatPercentage(value: number): string {\r\n  return `${value.toFixed(1)}%`\r\n}\r\n\r\n// 색상 유틸리티\r\nexport function getStatusColor(\r\n  status: \"healthy\" | \"warning\" | \"error\"\r\n): string {\r\n  switch (status) {\r\n    case \"healthy\":\r\n      return \"#10b981\" // green-500\r\n    case \"warning\":\r\n      return \"#f59e0b\" // amber-500\r\n    case \"error\":\r\n      return \"#ef4444\" // red-500\r\n    default:\r\n      return \"#6b7280\" // gray-500\r\n  }\r\n}\r\n\r\nexport function getStatusText(status: \"healthy\" | \"warning\" | \"error\"): string {\r\n  switch (status) {\r\n    case \"healthy\":\r\n      return \"정상\"\r\n    case \"warning\":\r\n      return \"주의\"\r\n    case \"error\":\r\n      return \"오류\"\r\n    default:\r\n      return \"알 수 없음\"\r\n  }\r\n}\r\n\r\nexport function getPerformanceColor(\r\n  performance: \"good\" | \"fair\" | \"poor\"\r\n): string {\r\n  switch (performance) {\r\n    case \"good\":\r\n      return \"#10b981\" // green-500\r\n    case \"fair\":\r\n      return \"#f59e0b\" // amber-500\r\n    case \"poor\":\r\n      return \"#ef4444\" // red-500\r\n    default:\r\n      return \"#6b7280\" // gray-500\r\n  }\r\n}\r\n\r\n// 로깅 유틸리티\r\nexport function logAdminAction(\r\n  action: string,\r\n  details: Record<string, any>,\r\n  userId?: string\r\n): void {\r\n  const logEntry = {\r\n    timestamp: new Date().toISOString(),\r\n    action,\r\n    details,\r\n    userId,\r\n    userAgent: navigator.userAgent,\r\n  }\r\n\r\n  console.log(\"🔧 Admin Action:\", logEntry)\r\n\r\n  // 실제 프로덕션에서는 서버로 로그를 전송\r\n  if (process.env.PROD) {\r\n    // TODO: 서버 로그 API 호출\r\n  }\r\n}\r\n\r\n// 보안 유틸리티\r\nexport function validateAdminAccess(\r\n  userRole: AdminRole,\r\n  requiredRole: AdminRole\r\n): boolean {\r\n  if (!hasRoleOrHigher(userRole, requiredRole)) {\r\n    logAdminAction(\"unauthorized_access_attempt\", {\r\n      userRole,\r\n      requiredRole,\r\n      timestamp: new Date().toISOString(),\r\n    })\r\n    return false\r\n  }\r\n\r\n  return true\r\n}\r\n\r\n// 설정 유틸리티\r\nexport function getDefaultAdminSettings() {\r\n  return {\r\n    performanceMonitoring: {\r\n      enabled: true,\r\n      refreshInterval: 30000, // 30초\r\n      alertThreshold: 80,\r\n    },\r\n    systemNotifications: {\r\n      email: false,\r\n      slack: false,\r\n      webhook: \"\",\r\n    },\r\n    security: {\r\n      sessionTimeout: 3600000, // 1시간\r\n      maxLoginAttempts: 5,\r\n      requireMFA: false,\r\n    },\r\n  }\r\n}\r\n\r\n// 데이터 검증\r\nexport function validateSystemStats(stats: any): stats is SystemStats {\r\n  return (\r\n    typeof stats === \"object\" &&\r\n    typeof stats.totalUsers === \"number\" &&\r\n    typeof stats.activeUsers === \"number\" &&\r\n    typeof stats.totalMachines === \"number\" &&\r\n    typeof stats.systemLoad === \"number\" &&\r\n    typeof stats.memoryUsage === \"number\" &&\r\n    typeof stats.diskUsage === \"number\" &&\r\n    typeof stats.uptime === \"number\"\r\n  )\r\n}\r\n\r\nexport function validatePerformanceMetrics(\r\n  metrics: any\r\n): metrics is PerformanceMetrics {\r\n  return (\r\n    typeof metrics === \"object\" &&\r\n    typeof metrics.averageResponseTime === \"number\" &&\r\n    typeof metrics.requestCount === \"number\" &&\r\n    typeof metrics.errorRate === \"number\" &&\r\n    typeof metrics.cacheHitRate === \"number\" &&\r\n    typeof metrics.memoryUsage === \"number\" &&\r\n    typeof metrics.cpuUsage === \"number\"\r\n  )\r\n}\r\n","timestamp":1759820789574}