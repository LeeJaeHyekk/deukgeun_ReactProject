{"key":"e990022ed1a3cd7134c436c2cfc3514a","result":"// features/auth/api/authApi.ts\r\nconst { api  } = require('@shared/api')\r\nconst { API_ENDPOINTS  } = require('@shared/config')\r\nconst axios = require('axios').default\r\nconst { config  } = require('@shared/config')\r\nconst { SIGNUP_VALIDATION_MESSAGES,\r\n  HTTP_ERROR_MESSAGES,\r\n  ERROR_TOAST_TYPES,\r\n } = require('@frontend/shared/constants/validation')\r\nimport type {\r\n  LoginRequest,\r\n  LoginResponse,\r\n  RegisterRequest,\r\n  RegisterResponse,\r\n  RefreshResponse,\r\n  LogoutResponse,\r\n  AccountRecoveryRequest,\r\n} from '@frontend/shared/types/auth'\r\n\r\n// 백엔드 API 응답과 프론트엔드 타입 간의 호환성을 위한 타입 정의\r\nexport interface ApiLoginResponse {\r\n  message: string\r\n  accessToken: string\r\n  user: {\r\n    id: number\r\n    email: string\r\n    nickname: string\r\n  }\r\n}\r\n\r\n// 백엔드 실제 응답 타입\r\nexport interface BackendLoginResponse {\r\n  success: boolean\r\n  message: string\r\n  accessToken: string\r\n  user: {\r\n    id: number\r\n    email: string\r\n    nickname: string\r\n  }\r\n}\r\n\r\n// 백엔드 회원가입 응답 타입\r\nexport interface BackendRegisterResponse {\r\n  success: boolean\r\n  message: string\r\n  accessToken: string\r\n  user: {\r\n    id: number\r\n    email: string\r\n    nickname: string\r\n    phone?: string\r\n    gender?: string\r\n    birthday?: string\r\n    profileImage?: string\r\n    createdAt: string\r\n    updatedAt: string\r\n  }\r\n}\r\n\r\n// API 응답 래퍼 타입\r\nexport interface ApiResponseWrapper<T> {\r\n  success: boolean\r\n  message: string\r\n  data?: T\r\n  error?: string\r\n}\r\n\r\nexport interface ApiRegisterResponse {\r\n  message: string\r\n  accessToken: string\r\n  user: {\r\n    id: number\r\n    email: string\r\n    nickname: string\r\n  }\r\n}\r\n\r\n// 아이디/비밀번호 찾기 요청 타입 (프론트엔드 전용)\r\nexport interface FindIdRequest {\r\n  email: string\r\n  recaptchaToken: string\r\n}\r\n\r\nexport interface FindPasswordRequest {\r\n  email: string\r\n  recaptchaToken: string\r\n}\r\n\r\n// Enhanced Account Recovery Request Types\r\nexport interface FindIdStep1Request {\r\n  name: string\r\n  phone: string\r\n  recaptchaToken: string\r\n}\r\n\r\nexport interface FindIdStep2Request {\r\n  verificationId: string\r\n  verificationCode: string\r\n}\r\n\r\nexport interface ResetPasswordStep1Request {\r\n  username: string\r\n  name: string\r\n  phone: string\r\n  gender?: 'male' | 'female' | 'other'\r\n  birthday?: string\r\n  recaptchaToken: string\r\n}\r\n\r\nexport interface ResetPasswordStep2Request {\r\n  username: string\r\n  code: string\r\n  newPassword: string\r\n  confirmPassword: string\r\n  recaptchaToken: string\r\n}\r\n\r\nexport interface ResetPasswordStep3Request {\r\n  resetToken: string\r\n  newPassword: string\r\n  confirmPassword: string\r\n}\r\n\r\n// Auth API functions\r\nexport const authApi = {\r\n  // Login\r\n  login: async (data: LoginRequest): Promise<ApiLoginResponse> => {\r\n    console.log('✅ 로그인 요청:', data)\r\n    const response = await axios.post<BackendLoginResponse>(\r\n      `${config.api.baseURL}${API_ENDPOINTS.AUTH.LOGIN}`,\r\n      data\r\n    )\r\n    console.log('✅ 로그인 응답:', response)\r\n    // 백엔드 응답 구조에 맞게 수정 - data 필드 없이 직접 반환\r\n    return {\r\n      message: response.data.message,\r\n      accessToken: response.data.accessToken,\r\n      user: response.data.user,\r\n    }\r\n  },\r\n\r\n  // Register\r\n  register: async (data: RegisterRequest): Promise<ApiRegisterResponse> => {\r\n    console.log('📡 회원가입 API 호출 시작')\r\n    console.log('📡 요청 URL:', API_ENDPOINTS.AUTH.REGISTER)\r\n    console.log('📡 요청 데이터:', {\r\n      email: data.email,\r\n      nickname: data.nickname,\r\n      phone: data.phone,\r\n      gender: data.gender,\r\n      birthday: data.birthday,\r\n      recaptchaToken: data.recaptchaToken\r\n        ? data.recaptchaToken.substring(0, 20) + '...'\r\n        : '없음',\r\n    })\r\n\r\n    try {\r\n      const response = await axios.post<BackendRegisterResponse>(\r\n        `${config.api.baseURL}${API_ENDPOINTS.AUTH.REGISTER}`,\r\n        data\r\n      )\r\n      console.log('✅ 회원가입 API 응답 성공:', response)\r\n      console.log('✅ 응답 데이터:', response.data)\r\n\r\n      // 백엔드 응답 구조에 맞게 처리\r\n      const responseData = response.data as BackendRegisterResponse\r\n      if (responseData.success) {\r\n        return {\r\n          message: responseData.message,\r\n          accessToken: responseData.accessToken,\r\n          user: responseData.user,\r\n        } as ApiRegisterResponse\r\n      } else {\r\n        throw new Error(responseData.message || '회원가입에 실패했습니다.')\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ 회원가입 API 실패:', error)\r\n      console.error('❌ API 에러 상세:', {\r\n        status: (error as { response?: { status: number } })?.response?.status,\r\n        statusText: (error as { response?: { statusText: string } })?.response\r\n          ?.statusText,\r\n        data: (error as { response?: { data: unknown } })?.response?.data,\r\n        url: (error as { config?: { url: string } })?.config?.url,\r\n        method: (error as { config?: { method: string } })?.config?.method,\r\n      })\r\n\r\n      // 백엔드 에러 메시지 추출\r\n      const axiosError = error as any\r\n      if (axiosError?.response?.data?.message) {\r\n        throw new Error(axiosError.response.data.message)\r\n      } else if (axiosError?.response?.data?.error) {\r\n        throw new Error(axiosError.response.data.error)\r\n      } else if (axiosError?.response?.status === 409) {\r\n        // 409 Conflict 에러 처리\r\n        if (axiosError.response.data.error === '이메일 중복') {\r\n          throw new Error(SIGNUP_VALIDATION_MESSAGES.EMAIL_ALREADY_EXISTS)\r\n        } else if (axiosError.response.data.error === '닉네임 중복') {\r\n          throw new Error(SIGNUP_VALIDATION_MESSAGES.NICKNAME_ALREADY_EXISTS)\r\n        } else {\r\n          throw new Error(HTTP_ERROR_MESSAGES[409])\r\n        }\r\n      } else if (axiosError?.response?.status === 400) {\r\n        throw new Error(SIGNUP_VALIDATION_MESSAGES.VALIDATION_ERROR)\r\n      } else if (axiosError?.response?.status === 403) {\r\n        throw new Error(SIGNUP_VALIDATION_MESSAGES.SECURITY_ERROR)\r\n      } else if (axiosError?.response?.status >= 500) {\r\n        throw new Error(SIGNUP_VALIDATION_MESSAGES.SERVER_ERROR)\r\n      } else {\r\n        throw new Error(SIGNUP_VALIDATION_MESSAGES.GENERAL_ERROR)\r\n      }\r\n    }\r\n  },\r\n\r\n  // Find ID\r\n  findId: async (\r\n    data: FindIdRequest\r\n  ): Promise<ApiResponseWrapper<{ email: string; nickname: string }>> => {\r\n    console.log('✅ 아이디 찾기 요청:', data)\r\n    const response = await axios.post<\r\n      ApiResponseWrapper<{ email: string; nickname: string }>\r\n    >(`${config.api.baseURL}${API_ENDPOINTS.AUTH.FIND_ID}`, data)\r\n    console.log('✅ 아이디 찾기 응답:', response)\r\n    return response.data\r\n  },\r\n\r\n  // Find Password\r\n  findPassword: async (\r\n    data: FindPasswordRequest\r\n  ): Promise<ApiResponseWrapper<{ email: string; nickname: string }>> => {\r\n    console.log('✅ 비밀번호 찾기 요청:', data)\r\n    const response = await axios.post<\r\n      ApiResponseWrapper<{ email: string; nickname: string }>\r\n    >(`${config.api.baseURL}${API_ENDPOINTS.AUTH.FIND_PASSWORD}`, data)\r\n    console.log('✅ 비밀번호 찾기 응답:', response)\r\n    return response.data\r\n  },\r\n\r\n  // Enhanced Account Recovery APIs\r\n\r\n  // JSON 구조 기반 단순 아이디 찾기 (새로운 구현)\r\n  findIdSimple: async (\r\n    data: FindIdRequest\r\n  ): Promise<ApiResponseWrapper<{ username: string }>> => {\r\n    console.log('✅ 단순 아이디 찾기 요청:', data)\r\n    const response = await axios.post<ApiResponseWrapper<{ username: string }>>(\r\n      `${config.api.baseURL}${API_ENDPOINTS.AUTH.FIND_ID_SIMPLE}`,\r\n      data\r\n    )\r\n    console.log('✅ 단순 아이디 찾기 응답:', response)\r\n    return response.data\r\n  },\r\n\r\n  // JSON 구조 기반 단순 비밀번호 재설정 Step 1: 사용자 인증\r\n  resetPasswordSimpleStep1: async (\r\n    data: ResetPasswordStep1Request\r\n  ): Promise<\r\n    ApiResponseWrapper<{\r\n      email: string\r\n      nickname: string\r\n      maskedEmail: string\r\n      maskedPhone: string\r\n      verificationCode: string\r\n    }>\r\n  > => {\r\n    console.log('✅ 단순 비밀번호 재설정 Step 1 요청:', data)\r\n    const response = await axios.post<\r\n      ApiResponseWrapper<{\r\n        email: string\r\n        nickname: string\r\n        maskedEmail: string\r\n        maskedPhone: string\r\n        verificationCode: string\r\n      }>\r\n    >(\r\n      `${config.api.baseURL}${API_ENDPOINTS.AUTH.RESET_PASSWORD_SIMPLE_STEP1}`,\r\n      data\r\n    )\r\n    console.log('✅ 단순 비밀번호 재설정 Step 1 응답:', response)\r\n    return response.data\r\n  },\r\n\r\n  // JSON 구조 기반 단순 비밀번호 재설정 Step 2: 비밀번호 재설정\r\n  resetPasswordSimpleStep2: async (\r\n    data: ResetPasswordStep2Request\r\n  ): Promise<ApiResponseWrapper<{ message: string }>> => {\r\n    console.log('✅ 단순 비밀번호 재설정 Step 2 요청:', data)\r\n    const response = await axios.post<ApiResponseWrapper<{ message: string }>>(\r\n      `${config.api.baseURL}${API_ENDPOINTS.AUTH.RESET_PASSWORD_SIMPLE_STEP2}`,\r\n      data\r\n    )\r\n    console.log('✅ 단순 비밀번호 재설정 Step 2 응답:', response)\r\n    return response.data\r\n  },\r\n\r\n  // Find ID Step 1: Verify user by name and phone (향상된 버전)\r\n  findIdStep1: async (\r\n    data: FindIdStep1Request\r\n  ): Promise<\r\n    ApiResponseWrapper<{\r\n      email: string\r\n      nickname: string\r\n      maskedEmail: string\r\n      maskedPhone: string\r\n    }>\r\n  > => {\r\n    console.log('✅ 아이디 찾기 Step 1 요청:', data)\r\n    const response = await axios.post<\r\n      ApiResponseWrapper<{\r\n        email: string\r\n        nickname: string\r\n        maskedEmail: string\r\n        maskedPhone: string\r\n      }>\r\n    >(`${config.api.baseURL}${API_ENDPOINTS.AUTH.FIND_ID_SIMPLE}`, data)\r\n    console.log('✅ 아이디 찾기 Step 1 응답:', response)\r\n    return response.data\r\n  },\r\n\r\n  // Find ID Step 2: Verify code and return user info\r\n  findIdStep2: async (\r\n    data: FindIdStep2Request\r\n  ): Promise<ApiResponseWrapper<{ email: string; nickname: string }>> => {\r\n    console.log('✅ 아이디 찾기 Step 2 요청:', data)\r\n    const response = await axios.post<\r\n      ApiResponseWrapper<{ email: string; nickname: string }>\r\n    >(`${config.api.baseURL}${API_ENDPOINTS.AUTH.FIND_ID_SIMPLE}`, data)\r\n    console.log('✅ 아이디 찾기 Step 2 응답:', response)\r\n    return response.data\r\n  },\r\n\r\n  // Reset Password Step 1: Verify user by name and phone\r\n  resetPasswordStep1: async (\r\n    data: ResetPasswordStep1Request\r\n  ): Promise<\r\n    ApiResponseWrapper<{\r\n      email: string\r\n      nickname: string\r\n      maskedEmail: string\r\n      maskedPhone: string\r\n    }>\r\n  > => {\r\n    console.log('✅ 비밀번호 재설정 Step 1 요청:', data)\r\n    const response = await axios.post<\r\n      ApiResponseWrapper<{\r\n        email: string\r\n        nickname: string\r\n        maskedEmail: string\r\n        maskedPhone: string\r\n      }>\r\n    >(\r\n      `${config.api.baseURL}${API_ENDPOINTS.AUTH.RESET_PASSWORD_SIMPLE_STEP1}`,\r\n      data\r\n    )\r\n    console.log('✅ 비밀번호 재설정 Step 1 응답:', response)\r\n    return response.data\r\n  },\r\n\r\n  // Reset Password Step 2: Verify code and generate reset token\r\n  resetPasswordStep2: async (\r\n    data: ResetPasswordStep2Request\r\n  ): Promise<ApiResponseWrapper<{ resetToken: string }>> => {\r\n    console.log('✅ 비밀번호 재설정 Step 2 요청:', data)\r\n    const response = await axios.post<\r\n      ApiResponseWrapper<{ resetToken: string }>\r\n    >(\r\n      `${config.api.baseURL}${API_ENDPOINTS.AUTH.RESET_PASSWORD_VERIFY_CODE}`,\r\n      data\r\n    )\r\n    console.log('✅ 비밀번호 재설정 Step 2 응답:', response)\r\n    return response.data\r\n  },\r\n\r\n  // Reset Password Step 3: Complete password reset\r\n  resetPasswordStep3: async (\r\n    data: ResetPasswordStep3Request\r\n  ): Promise<ApiResponseWrapper<void>> => {\r\n    console.log('✅ 비밀번호 재설정 Step 3 요청:', data)\r\n    const response = await axios.post<ApiResponseWrapper<void>>(\r\n      `${config.api.baseURL}${API_ENDPOINTS.AUTH.RESET_PASSWORD_COMPLETE}`,\r\n      data\r\n    )\r\n    console.log('✅ 비밀번호 재설정 Step 3 응답:', response)\r\n    return response.data\r\n  },\r\n\r\n  // Refresh token\r\n  refreshToken: async (): Promise<RefreshResponse> => {\r\n    console.log('🔄 refreshToken API 호출 시작')\r\n    console.log('🔄 호출 URL:', API_ENDPOINTS.AUTH.REFRESH)\r\n    console.log(\r\n      '🔄 API_BASE_URL:',\r\n      process.env.VITE_BACKEND_URL || 'http://localhost:5000'\r\n    )\r\n\r\n    try {\r\n      const response = await api.post<RefreshResponse>(\r\n        API_ENDPOINTS.AUTH.REFRESH\r\n      )\r\n      console.log('✅ refreshToken API 성공:', response)\r\n      return response.data as RefreshResponse\r\n    } catch (error: unknown) {\r\n      console.error('❌ refreshToken API 실패:', error)\r\n      console.error('❌ 에러 상세:', {\r\n        status: (error as { response?: { status: number } })?.response?.status,\r\n        statusText: (error as { response?: { statusText: string } })?.response\r\n          ?.statusText,\r\n        data: (error as { response?: { data: unknown } })?.response?.data,\r\n        url: (error as { config?: { url: string } })?.config?.url,\r\n        method: (error as { config?: { method: string } })?.config?.method,\r\n      })\r\n      throw error\r\n    }\r\n  },\r\n\r\n  // Logout\r\n  logout: async (): Promise<LogoutResponse> => {\r\n    const response = await axios.post<LogoutResponse>(\r\n      `${config.api.baseURL}${API_ENDPOINTS.AUTH.LOGOUT}`\r\n    )\r\n    return response.data as LogoutResponse\r\n  },\r\n\r\n  // Check if user is authenticated\r\n  checkAuth: async (): Promise<{ message: string; authenticated: boolean }> => {\r\n    const response = await axios.get<{\r\n      message: string\r\n      authenticated: boolean\r\n    }>(`${config.api.baseURL}${API_ENDPOINTS.AUTH.CHECK}`)\r\n    return response.data as { message: string; authenticated: boolean }\r\n  },\r\n}\r\n","timestamp":1759907919141}