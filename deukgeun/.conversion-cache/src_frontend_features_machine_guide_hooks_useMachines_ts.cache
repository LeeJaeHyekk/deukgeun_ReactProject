{"key":"2fec004876a7d2b217ded1a6f4367eba","result":"// ============================================================================\r\n// Machine Guide Hook\r\n// ============================================================================\r\n\r\nconst { useState, useCallback, useRef, useMemo  } = require('react')\r\nconst { MachineApiService  } = require('../services/machineApi')\r\nimport type { Machine, MachineDTO } from \"@dto/index\"\r\nimport type { MachineFilterQuery } from \"../types\"\r\n\r\nconst FETCH_COOLDOWN = 500 // 0.5초로 단축\r\nconst CACHE_DURATION = 5 * 60 * 1000 // 5분 캐시\r\nconst MAX_RETRY_ATTEMPTS = 3\r\nconst RETRY_DELAY = 1000\r\n\r\nexport const useMachines = () => {\r\n  const [machines, setMachines] = useState<MachineDTO[]>([])\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [currentFilter, setCurrentFilter] = useState<string>(\"\")\r\n  const [lastFetchTime, setLastFetchTime] = useState<number>(0)\r\n  const [retryCount, setRetryCount] = useState(0)\r\n\r\n  // 캐시 시스템\r\n  const machinesCache = useRef<\r\n    Map<string, { data: MachineDTO[]; timestamp: number }>\r\n  >(new Map())\r\n\r\n  // API 서비스 인스턴스\r\n  const apiService = useMemo(() => MachineApiService.getInstance(), [])\r\n\r\n  // 캐시 유틸리티 함수들\r\n  const getCachedData = useCallback((key: string) => {\r\n    const cached = machinesCache.current.get(key)\r\n    if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\r\n      return cached.data\r\n    }\r\n    return null\r\n  }, [])\r\n\r\n  const setCachedData = useCallback((key: string, data: MachineDTO[]) => {\r\n    machinesCache.current.set(key, {\r\n      data,\r\n      timestamp: Date.now(),\r\n    })\r\n  }, [])\r\n\r\n  // 로딩 및 에러 상태 관리 헬퍼\r\n  const withLoading = useCallback(\r\n    async <T>(operation: () => Promise<T>): Promise<T> => {\r\n      const startTime = performance.now()\r\n      setLoading(true)\r\n      setError(null)\r\n\r\n      try {\r\n        const result = await operation()\r\n        const endTime = performance.now()\r\n\r\n        // 성능 메트릭 로깅 (개발 환경에서만)\r\n        if (process.env.DEV) {\r\n          console.log(`🚀 API 호출 완료: ${(endTime - startTime).toFixed(2)}ms`)\r\n        }\r\n\r\n        setRetryCount(0)\r\n        return result\r\n      } catch (err) {\r\n        const errorMessage =\r\n          err instanceof Error ? err.message : \"알 수 없는 오류가 발생했습니다\"\r\n        setError(errorMessage)\r\n        throw err\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    },\r\n    []\r\n  )\r\n\r\n  // 재시도 로직\r\n  const withRetry = useCallback(\r\n    async <T>(operation: () => Promise<T>): Promise<T> => {\r\n      let lastError: Error\r\n\r\n      for (let attempt = 1; attempt <= MAX_RETRY_ATTEMPTS; attempt++) {\r\n        try {\r\n          return await operation()\r\n        } catch (err) {\r\n          lastError = err instanceof Error ? err : new Error(String(err))\r\n\r\n          if (attempt < MAX_RETRY_ATTEMPTS) {\r\n            console.warn(\r\n              `⚠️ API 호출 실패 (${attempt}/${MAX_RETRY_ATTEMPTS}), ${RETRY_DELAY}ms 후 재시도...`\r\n            )\r\n            setRetryCount(attempt)\r\n            await new Promise(resolve =>\r\n              setTimeout(resolve, RETRY_DELAY * attempt)\r\n            )\r\n          }\r\n        }\r\n      }\r\n\r\n      throw lastError!\r\n    },\r\n    []\r\n  )\r\n\r\n  // 쿨다운 체크\r\n  const checkCooldown = useCallback(() => {\r\n    const now = Date.now()\r\n    if (now - lastFetchTime < FETCH_COOLDOWN) {\r\n      const remaining = FETCH_COOLDOWN - (now - lastFetchTime)\r\n      console.log(`⏳ API 호출 제한: ${remaining}ms 후 재시도 가능`)\r\n      return false\r\n    }\r\n    return true\r\n  }, [lastFetchTime])\r\n\r\n  // 모든 머신 조회\r\n  const fetchMachines = useCallback(async () => {\r\n    if (!checkCooldown()) return\r\n\r\n    const cacheKey = \"all-machines\"\r\n    const cachedData = getCachedData(cacheKey)\r\n\r\n    if (cachedData) {\r\n      setMachines(cachedData)\r\n      setCurrentFilter(\"\")\r\n      return\r\n    }\r\n\r\n    await withLoading(async () => {\r\n      const result = await withRetry(() => apiService.getMachines())\r\n      setMachines(result.machines as MachineDTO[])\r\n      setCachedData(cacheKey, result.machines as MachineDTO[])\r\n      setCurrentFilter(\"\")\r\n      setLastFetchTime(Date.now())\r\n    })\r\n  }, [\r\n    apiService,\r\n    checkCooldown,\r\n    getCachedData,\r\n    setCachedData,\r\n    withLoading,\r\n    withRetry,\r\n  ])\r\n\r\n  // 카테고리별 머신 조회\r\n  const getMachinesByCategory = useCallback(\r\n    async (category: string) => {\r\n      if (!checkCooldown()) return\r\n\r\n      const cacheKey = `category-${category}`\r\n      const cachedData = getCachedData(cacheKey)\r\n\r\n      if (cachedData) {\r\n        setMachines(cachedData)\r\n        setCurrentFilter(`카테고리: ${category}`)\r\n        return\r\n      }\r\n\r\n      await withLoading(async () => {\r\n        const result = await withRetry(() =>\r\n          apiService.getMachinesByCategory(category)\r\n        )\r\n        setMachines(result.machines as MachineDTO[])\r\n        setCachedData(cacheKey, result.machines as MachineDTO[])\r\n        setCurrentFilter(`카테고리: ${category}`)\r\n        setLastFetchTime(Date.now())\r\n      })\r\n    },\r\n    [\r\n      apiService,\r\n      checkCooldown,\r\n      getCachedData,\r\n      setCachedData,\r\n      withLoading,\r\n      withRetry,\r\n    ]\r\n  )\r\n\r\n  // 난이도별 머신 조회\r\n  const getMachinesByDifficulty = useCallback(\r\n    async (difficulty: string) => {\r\n      if (!checkCooldown()) return\r\n\r\n      const cacheKey = `difficulty-${difficulty}`\r\n      const cachedData = getCachedData(cacheKey)\r\n\r\n      if (cachedData) {\r\n        setMachines(cachedData)\r\n        setCurrentFilter(`난이도: ${difficulty}`)\r\n        return\r\n      }\r\n\r\n      await withLoading(async () => {\r\n        const result = await withRetry(() =>\r\n          apiService.getMachinesByDifficulty(difficulty)\r\n        )\r\n        setMachines(result.machines as MachineDTO[])\r\n        setCachedData(cacheKey, result.machines as MachineDTO[])\r\n        setCurrentFilter(`난이도: ${difficulty}`)\r\n        setLastFetchTime(Date.now())\r\n      })\r\n    },\r\n    [\r\n      apiService,\r\n      checkCooldown,\r\n      getCachedData,\r\n      setCachedData,\r\n      withLoading,\r\n      withRetry,\r\n    ]\r\n  )\r\n\r\n  // 타겟별 머신 조회\r\n  const getMachinesByTarget = useCallback(\r\n    async (target: string) => {\r\n      if (!checkCooldown()) return\r\n\r\n      const cacheKey = `target-${target}`\r\n      const cachedData = getCachedData(cacheKey)\r\n\r\n      if (cachedData) {\r\n        setMachines(cachedData)\r\n        setCurrentFilter(`타겟: ${target}`)\r\n        return\r\n      }\r\n\r\n      await withLoading(async () => {\r\n        const result = await withRetry(() =>\r\n          apiService.getMachinesByTarget(target)\r\n        )\r\n        setMachines(result.machines as MachineDTO[])\r\n        setCachedData(cacheKey, result.machines as MachineDTO[])\r\n        setCurrentFilter(`타겟: ${target}`)\r\n        setLastFetchTime(Date.now())\r\n      })\r\n    },\r\n    [\r\n      apiService,\r\n      checkCooldown,\r\n      getCachedData,\r\n      setCachedData,\r\n      withLoading,\r\n      withRetry,\r\n    ]\r\n  )\r\n\r\n  // 머신 필터링\r\n  const filterMachines = useCallback(\r\n    async (filters: MachineFilterQuery) => {\r\n      if (!checkCooldown()) return\r\n\r\n      const cacheKey = `filter-${JSON.stringify(filters)}`\r\n      const cachedData = getCachedData(cacheKey)\r\n\r\n      if (cachedData) {\r\n        setMachines(cachedData)\r\n        setCurrentFilter(\"필터 적용됨\")\r\n        return\r\n      }\r\n\r\n      await withLoading(async () => {\r\n        const result = await withRetry(() => apiService.filterMachines(filters))\r\n        setMachines(result.machines as MachineDTO[])\r\n        setCachedData(cacheKey, result.machines as MachineDTO[])\r\n        setCurrentFilter(\"필터 적용됨\")\r\n        setLastFetchTime(Date.now())\r\n      })\r\n    },\r\n    [\r\n      apiService,\r\n      checkCooldown,\r\n      getCachedData,\r\n      setCachedData,\r\n      withLoading,\r\n      withRetry,\r\n    ]\r\n  )\r\n\r\n  // 머신 생성\r\n  const createMachine = useCallback(\r\n    async (machineData: any) => {\r\n      await withLoading(async () => {\r\n        const result = await withRetry(() =>\r\n          apiService.createMachine(machineData)\r\n        )\r\n        // 캐시 무효화\r\n        machinesCache.current.clear()\r\n        // 새로 생성된 머신을 목록에 추가\r\n        setMachines(prev => [...prev, result.machine as MachineDTO])\r\n        setLastFetchTime(Date.now())\r\n        return result\r\n      })\r\n    },\r\n    [apiService, withLoading, withRetry]\r\n  )\r\n\r\n  // 머신 수정\r\n  const updateMachine = useCallback(\r\n    async (id: number, machineData: any) => {\r\n      await withLoading(async () => {\r\n        const result = await withRetry(() =>\r\n          apiService.updateMachine(id, machineData)\r\n        )\r\n        // 캐시 무효화\r\n        machinesCache.current.clear()\r\n        // 수정된 머신을 목록에서 업데이트\r\n        setMachines(prev =>\r\n          prev.map(machine => (machine.id === id ? result.machine as MachineDTO : machine))\r\n        )\r\n        setLastFetchTime(Date.now())\r\n        return result\r\n      })\r\n    },\r\n    [apiService, withLoading, withRetry]\r\n  )\r\n\r\n  // 머신 삭제\r\n  const deleteMachine = useCallback(\r\n    async (id: number) => {\r\n      await withLoading(async () => {\r\n        await withRetry(() => apiService.deleteMachine(id))\r\n        // 캐시 무효화\r\n        machinesCache.current.clear()\r\n        // 삭제된 머신을 목록에서 제거\r\n        setMachines(prev => prev.filter(machine => machine.id !== id))\r\n        setLastFetchTime(Date.now())\r\n      })\r\n    },\r\n    [apiService, withLoading, withRetry]\r\n  )\r\n\r\n  // 에러 초기화\r\n  const clearError = useCallback(() => {\r\n    setError(null)\r\n  }, [])\r\n\r\n  // 캐시 초기화\r\n  const clearCache = useCallback(() => {\r\n    machinesCache.current.clear()\r\n    console.log(\"🗑️ 캐시가 초기화되었습니다\")\r\n  }, [])\r\n\r\n  // 메모이제이션된 값들\r\n  const memoizedMachines = useMemo(() => machines, [machines])\r\n  const memoizedLoading = useMemo(() => loading, [loading])\r\n  const memoizedError = useMemo(() => error, [error])\r\n  const memoizedCurrentFilter = useMemo(() => currentFilter, [currentFilter])\r\n\r\n  return {\r\n    // 상태\r\n    machines: memoizedMachines,\r\n    loading: memoizedLoading,\r\n    error: memoizedError,\r\n    currentFilter: memoizedCurrentFilter,\r\n    retryCount,\r\n\r\n    // 액션\r\n    fetchMachines,\r\n    getMachinesByCategory,\r\n    getMachinesByDifficulty,\r\n    getMachinesByTarget,\r\n    filterMachines,\r\n    createMachine,\r\n    updateMachine,\r\n    deleteMachine,\r\n    clearError,\r\n    clearCache,\r\n  }\r\n}\r\n","timestamp":1759820789593}