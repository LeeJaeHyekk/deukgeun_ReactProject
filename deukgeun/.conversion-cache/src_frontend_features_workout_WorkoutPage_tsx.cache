{"key":"ee6945c811b96008ee7e4425c685887c","result":"// Browser API polyfills for Node.js environment\nif (typeof window === 'undefined') {\n  global.window = global.window || {}\n  global.document = global.document || {}\n  global.localStorage = global.localStorage || {\n    getItem: () => null,\n    setItem: () => {},\n    removeItem: () => {},\n    clear: () => {}\n  }\n  global.sessionStorage = global.sessionStorage || {\n    getItem: () => null,\n    setItem: () => {},\n    removeItem: () => {},\n    clear: () => {}\n  }\n  global.File = global.File || class File {}\n  global.StorageEvent = global.StorageEvent || class StorageEvent {}\n  global.requestAnimationFrame = global.requestAnimationFrame || (cb => setTimeout(cb, 16))\n}\n\nimport React, { useState, useEffect } from \"react\"\r\nconst { useAuthContext  } = require('../../../frontend/shared/contexts/AuthContext')\r\nconst { useMachines  } = require('../../../frontend/shared/hooks/useMachines')\r\nconst { Navigation  } = require('../../widgets/Navigation/Navigation')\r\nconst { TabNavigation  } = require('./components/navigation/TabNavigation')\r\nconst { TabContent  } = require('./components/navigation/TabContent')\r\nconst { TAB_CONFIG  } = require('./constants')\r\nconst { WorkoutPlanModal  } = require('./components/modals/WorkoutPlanModal/WorkoutPlanModal')\r\nconst { WorkoutSessionModal  } = require('./components/modals/WorkoutSessionModal/WorkoutSessionModal')\r\nconst { WorkoutGoalModal  } = require('./components/modals/WorkoutGoalModal/WorkoutGoalModal')\r\nconst { useWorkoutStoreData,\r\n  useWorkoutPlansActions,\r\n  useWorkoutSessionsActions,\r\n  useWorkoutGoalsActions,\r\n  useWorkoutUI,\r\n  useWorkoutInitialization,\r\n  useSharedState,\r\n  useWorkoutNotifications,\r\n  useWorkoutErrors,\r\n  useWorkoutTimer,\r\n } = require('./hooks/useWorkoutStore')\r\nconst { USE_MOCK_DATA  } = require('./data/mockData')\r\nimport type { TabType } from \"./types\"\r\nimport type {\r\n  WorkoutPlan,\r\n  WorkoutSession,\r\n  WorkoutGoal,\r\n  DashboardData,\r\n} from \"./types\"\r\nconst styles = require('./WorkoutPage.module.css').default\r\n\r\n// 로깅 유틸리티\r\nconst logger = {\r\n  info: (message: string, data?: any) => {\r\n    if (process.env.NODE_ENV === \"development\") {\r\n      console.log(`[WorkoutPage] ${message}`, data || \"\")\r\n    }\r\n  },\r\n  debug: (message: string, data?: any) => {\r\n    if (process.env.NODE_ENV === \"development\") {\r\n      console.debug(`[WorkoutPage] ${message}`, data || \"\")\r\n    }\r\n  },\r\n  warn: (message: string, data?: any) => {\r\n    console.warn(`[WorkoutPage] ${message}`, data || \"\")\r\n  },\r\n  error: (message: string, data?: any) => {\r\n    console.error(`[WorkoutPage] ${message}`, data || \"\")\r\n  },\r\n  modalOperation: (operation: string, modalType: string, data?: any) => {\r\n    if (process.env.NODE_ENV === \"development\") {\r\n      console.log(`[WorkoutPage] ${operation} ${modalType} Modal`, data || \"\")\r\n    }\r\n  },\r\n  performance: (operation: string, duration: number) => {\r\n    if (process.env.NODE_ENV === \"development\") {\r\n      console.log(`[WorkoutPage] ${operation} took ${duration.toFixed(2)}ms`)\r\n    }\r\n  },\r\n}\r\n\r\nfunction WorkoutPageContent() {\r\n  const { isAuthenticated, user } = useAuthContext()\r\n  const [isDataLoading, setIsDataLoading] = useState(true)\r\n  const [selectedGoalId, setSelectedGoalId] = useState<number | undefined>(\r\n    undefined\r\n  )\r\n\r\n  logger.info(\"워크아웃 페이지 컴포넌트 렌더링\", {\r\n    isAuthenticated,\r\n    userId: user?.id,\r\n    timestamp: new Date().toISOString(),\r\n  })\r\n\r\n  // Zustand Store 훅들\r\n  const {\r\n    plans,\r\n    sessions,\r\n    goals,\r\n    dashboardData,\r\n    loading,\r\n    activeTab,\r\n    modals,\r\n    tabStates,\r\n    sharedState,\r\n  } = useWorkoutStoreData()\r\n\r\n  const { fetchPlans, createPlan, updatePlan, deletePlan } =\r\n    useWorkoutPlansActions()\r\n\r\n  const { fetchSessions, createSession, updateSession, deleteSession } =\r\n    useWorkoutSessionsActions()\r\n\r\n  const { fetchGoals, createGoal, updateGoal, deleteGoal } =\r\n    useWorkoutGoalsActions()\r\n\r\n  const {\r\n    setActiveTab,\r\n    openPlanModal,\r\n    closePlanModal,\r\n    openSessionModal,\r\n    closeSessionModal,\r\n    openGoalModal,\r\n    closeGoalModal,\r\n  } = useWorkoutUI()\r\n\r\n  const { initializeWorkoutData } = useWorkoutInitialization()\r\n\r\n  // 공유 상태 훅\r\n  const { removeNotification } = useWorkoutNotifications()\r\n  const { setGlobalError } = useWorkoutErrors()\r\n  const { timer, updateTimer } = useWorkoutTimer()\r\n\r\n  // 기계 데이터 훅\r\n  const { machines } = useMachines()\r\n\r\n  // 로딩 상태 계산\r\n  const isLoading =\r\n    loading.plans.isLoading ||\r\n    loading.sessions.isLoading ||\r\n    loading.goals.isLoading ||\r\n    isDataLoading\r\n\r\n  // 탭 변경 핸들러\r\n  const handleTabChange = (tab: TabType) => {\r\n    logger.info(\"탭 변경\", { from: activeTab, to: tab })\r\n    setActiveTab(tab)\r\n\r\n    // 목표 탭이 아닌 다른 탭으로 이동할 때 selectedGoalId 초기화\r\n    if (tab !== \"goals\") {\r\n      setSelectedGoalId(undefined)\r\n    }\r\n  }\r\n\r\n  // 계획 관련 핸들러\r\n  const handleCreatePlan = () => {\r\n    logger.modalOperation(\"Opening\", \"Plan Create\", {})\r\n    openPlanModal(\"create\")\r\n  }\r\n\r\n  const handleEditPlan = (planId: number) => {\r\n    const plan = plans.find(p => p.id === planId)\r\n    if (plan) {\r\n      logger.modalOperation(\"Opening\", \"Plan Edit\", {\r\n        planId,\r\n        planName: plan.name,\r\n      })\r\n      openPlanModal(\"edit\", plan)\r\n    }\r\n  }\r\n\r\n  const handleDeletePlan = async (planId: number) => {\r\n    try {\r\n      await deletePlan(planId)\r\n      logger.info(\"Plan deleted successfully\", { planId })\r\n    } catch (error) {\r\n      logger.error(\"Failed to delete plan\", error)\r\n      setGlobalError(\"계획을 삭제하는데 실패했습니다.\")\r\n    }\r\n  }\r\n\r\n  const handleStartSession = (planId: number) => {\r\n    const plan = plans.find(p => p.id === planId)\r\n    if (plan) {\r\n      logger.modalOperation(\"Opening\", \"Session Create from Plan\", {\r\n        planId,\r\n        planName: plan.name,\r\n      })\r\n      openSessionModal(\"create\", undefined)\r\n    }\r\n  }\r\n\r\n  // 세션 관련 핸들러\r\n  // 주석 처리: 새 세션 생성 기능 비활성화\r\n  // const handleCreateSession = useCallback(() => {\r\n  //   logger.modalOperation(\"Opening\", \"Session Create\", {})\r\n  //   openSessionModal(\"create\")\r\n  // }, [openSessionModal])\r\n\r\n  const handleEditSession = (sessionId: number) => {\r\n    const session = sessions.find(s => s.id === sessionId)\r\n    if (session) {\r\n      logger.modalOperation(\"Opening\", \"Session Edit\", {\r\n        sessionId,\r\n        sessionName: session.name,\r\n      })\r\n      openSessionModal(\"edit\", session)\r\n    }\r\n  }\r\n\r\n  const handleViewSession = (sessionId: number) => {\r\n    const session = sessions.find(s => s.id === sessionId)\r\n    if (session) {\r\n      logger.modalOperation(\"Opening\", \"Session View\", {\r\n        sessionId,\r\n        sessionName: session.name,\r\n      })\r\n      openSessionModal(\"view\", session)\r\n    }\r\n  }\r\n\r\n  const handleDeleteSession = async (sessionId: number) => {\r\n    try {\r\n      await deleteSession(sessionId)\r\n      logger.info(\"Session deleted successfully\", { sessionId })\r\n    } catch (error) {\r\n      logger.error(\"Failed to delete session\", error)\r\n      setGlobalError(\"세션을 삭제하는데 실패했습니다.\")\r\n    }\r\n  }\r\n\r\n  // 목표 관련 핸들러\r\n  const handleCreateGoal = () => {\r\n    logger.modalOperation(\"Opening\", \"Goal Create\", {})\r\n    openGoalModal(\"create\")\r\n  }\r\n\r\n  const handleEditGoal = (goalId: number) => {\r\n    const goal = goals.find(g => g.id === goalId)\r\n    if (goal) {\r\n      logger.modalOperation(\"Opening\", \"Goal Edit\", {\r\n        goalId,\r\n        goalTitle: goal.title,\r\n      })\r\n      openGoalModal(\"edit\", goal)\r\n    }\r\n  }\r\n\r\n  const handleDeleteGoal = async (goalId: number) => {\r\n    try {\r\n      await deleteGoal(goalId)\r\n      logger.info(\"Goal deleted successfully\", { goalId })\r\n    } catch (error) {\r\n      logger.error(\"Failed to delete goal\", error)\r\n      setGlobalError(\"목표를 삭제하는데 실패했습니다.\")\r\n    }\r\n  }\r\n\r\n  // 클릭 핸들러\r\n  const handlePlanClick = (planId: number) => {\r\n    logger.debug(\"Plan clicked\", { planId })\r\n    handleEditPlan(planId)\r\n  }\r\n\r\n  const handleSessionClick = (sessionId: number) => {\r\n    logger.debug(\"Session clicked\", { sessionId })\r\n    handleViewSession(sessionId)\r\n  }\r\n\r\n  const handleGoalClick = (goalId: number) => {\r\n    logger.debug(\"Goal clicked\", { goalId })\r\n    // 목표 탭으로 이동하고 해당 목표 선택\r\n    setSelectedGoalId(goalId)\r\n    handleTabChange(\"goals\")\r\n  }\r\n\r\n  // 데이터 초기화\r\n  useEffect(() => {\r\n    if (!isAuthenticated) {\r\n      console.log(\"[WorkoutPage] 로그인되지 않은 상태 - 데이터 초기화 스킵\")\r\n      return\r\n    }\r\n\r\n    console.log(\"[WorkoutPage] 로그인 상태 확인:\", {\r\n      isAuthenticated,\r\n      userId: user?.id,\r\n      userEmail: user?.email,\r\n      timestamp: new Date().toISOString(),\r\n    })\r\n\r\n    // 토큰 상태 확인\r\n    const token = localStorage.getItem(\"accessToken\")\r\n    console.log(\"[WorkoutPage] 토큰 상태 확인:\", {\r\n      hasToken: !!token,\r\n      tokenPreview: token ? `${token.substring(0, 20)}...` : \"없음\",\r\n      timestamp: new Date().toISOString(),\r\n    })\r\n\r\n    const initializeData = async () => {\r\n      const startTime = performance.now()\r\n      setIsDataLoading(true)\r\n\r\n      console.log(\"[WorkoutPage] 데이터 초기화 시작\", {\r\n        isAuthenticated,\r\n        userId: user?.id,\r\n        machinesCount: machines.length,\r\n      })\r\n\r\n      try {\r\n        await initializeWorkoutData()\r\n        logger.performance(\"데이터 초기화\", performance.now() - startTime)\r\n        logger.info(\"데이터 초기화 완료\", {\r\n          plansCount: plans.length,\r\n          sessionsCount: sessions.length,\r\n          goalsCount: goals.length,\r\n        })\r\n      } catch (error) {\r\n        logger.error(\"데이터 초기화 실패\", error)\r\n        setGlobalError(\"데이터를 불러오는 중 오류가 발생했습니다.\")\r\n      } finally {\r\n        setIsDataLoading(false)\r\n      }\r\n    }\r\n\r\n    if (isAuthenticated) {\r\n      initializeData()\r\n    }\r\n  }, [isAuthenticated, user?.id]) // initializeWorkoutData 의존성 제거\r\n\r\n  // 타이머 업데이트\r\n  useEffect(() => {\r\n    if (!timer.isRunning) return\r\n\r\n    const interval = setInterval(() => {\r\n      updateTimer(timer.seconds + 1000)\r\n    }, 1000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [timer.isRunning, timer.seconds, updateTimer])\r\n\r\n  // 에러 처리\r\n  if (sharedState.globalError) {\r\n    return (\r\n      <div className={styles.workoutPage}>\r\n        <Navigation />\r\n        <div className={styles.errorContainer}>\r\n          <h2>오류가 발생했습니다</h2>\r\n          <p>{sharedState.globalError}</p>\r\n          <button onClick={() => window.location.reload()}>\r\n            페이지 새로고침\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // 로딩 상태\r\n  if (isLoading) {\r\n    return (\r\n      <div className={styles.workoutPage}>\r\n        <Navigation />\r\n        <div className={styles.workoutPageLoading}>\r\n          <div className={styles.loadingSpinner}>\r\n            <div className={styles.spinner}></div>\r\n            <p>운동 데이터를 불러오는 중...</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={styles.workoutPage}>\r\n      <Navigation />\r\n\r\n      <div className={styles.workoutPageContent}>\r\n        <header className={styles.workoutPageHeader}>\r\n          <div className={styles.workoutPageHeaderContent}>\r\n            <div className={styles.headerText}>\r\n              <h1>운동 관리</h1>\r\n              <p>\r\n                운동 계획, 진행 상황, 목표, 실시간 세션 트래킹, 분석을 한\r\n                페이지에서 확인\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </header>\r\n\r\n        <TabNavigation\r\n          activeTab={activeTab}\r\n          onTabChange={handleTabChange}\r\n          tabs={TAB_CONFIG}\r\n        />\r\n\r\n        <TabContent\r\n          activeTab={activeTab}\r\n          isLoading={isLoading}\r\n          dashboardData={dashboardData as any}\r\n          plans={plans as any}\r\n          sessions={sessions as any}\r\n          goals={goals as any}\r\n          workoutStats={null} // TODO: 운동 통계 데이터 추가\r\n          machines={machines}\r\n          plansLoading={loading.plans.isLoading}\r\n          sessionsLoading={loading.sessions.isLoading}\r\n          goalsLoading={loading.goals.isLoading}\r\n          onPlanClick={handlePlanClick}\r\n          onSessionClick={handleSessionClick}\r\n          onGoalClick={handleGoalClick}\r\n          onCreatePlan={handleCreatePlan}\r\n          onEditPlan={handleEditPlan}\r\n          onStartSession={handleStartSession}\r\n          // onCreateSession={handleCreateSession}  // 주석 처리: 새 세션 생성 기능 비활성화\r\n          onEditSession={handleEditSession}\r\n          onViewSession={handleViewSession}\r\n          onCreateGoal={handleCreateGoal}\r\n          onEditGoal={handleEditGoal}\r\n          onDeletePlan={handleDeletePlan}\r\n          onDeleteSession={handleDeleteSession}\r\n          onDeleteGoal={handleDeleteGoal}\r\n          selectedGoalId={selectedGoalId}\r\n        />\r\n      </div>\r\n\r\n      {/* 알림 시스템 */}\r\n      {sharedState.notifications.length > 0 && (\r\n        <div className={styles.notificationsContainer}>\r\n          {sharedState.notifications.map(notification => (\r\n            <div key={notification.id} className={styles.notification}>\r\n              <div className={styles.notificationContent}>\r\n                <span className={styles.notificationMessage}>\r\n                  {notification.message}\r\n                </span>\r\n                <button\r\n                  className={styles.notificationClose}\r\n                  onClick={() => removeNotification(notification.id)}\r\n                >\r\n                  ×\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {/* 모달들 */}\r\n      <WorkoutPlanModal />\r\n      <WorkoutSessionModal />\r\n      <WorkoutGoalModal />\r\n    </div>\r\n  )\r\n}\r\n\r\n// 메인 컴포넌트\r\nfunction WorkoutPage() {\r\n  const { isAuthenticated } = useAuthContext()\r\n\r\n  if (!isAuthenticated) {\r\n    return (\r\n      <div className={styles.workoutPage}>\r\n        <Navigation />\r\n        <div className={styles.authRequired}>\r\n          <h2>로그인이 필요합니다</h2>\r\n          <p>운동 관리를 사용하려면 로그인해주세요.</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return <WorkoutPageContent />\r\n}\r\n\r\nmodule.exports.default = WorkoutPage\r\nmodule.exports.WorkoutPage = WorkoutPage\r\n","timestamp":1759910565040}