{"key":"255d56274e2809dd5b4841c3bf2aba06","result":"// Browser API polyfills for Node.js environment\nif (typeof window === 'undefined') {\n  global.window = global.window || {}\n  global.document = global.document || {}\n  global.localStorage = global.localStorage || {\n    getItem: () => null,\n    setItem: () => {},\n    removeItem: () => {},\n    clear: () => {}\n  }\n  global.sessionStorage = global.sessionStorage || {\n    getItem: () => null,\n    setItem: () => {},\n    removeItem: () => {},\n    clear: () => {}\n  }\n  global.File = global.File || class File {}\n  global.StorageEvent = global.StorageEvent || class StorageEvent {}\n  global.requestAnimationFrame = global.requestAnimationFrame || (cb => setTimeout(cb, 16))\n}\n\nimport React, { useEffect } from \"react\"\r\nconst { X, Save  } = require('lucide-react')\r\nimport type { WorkoutGoal } from \"../../../../../../shared/types\"\r\nconst { useWorkoutStore  } = require('../../../store/workoutStore')\r\nconst { GoalForm  } = require('./components/GoalForm')\r\nconst { useGoalForm  } = require('./hooks/useGoalForm')\r\nimport \"./WorkoutGoalModal.css\"\r\n\r\n// 로깅 유틸리티\r\nconst logger = {\r\n  info: (message: string, data?: any) => {\r\n    if (process.env.DEV) {\r\n      console.log(`[WorkoutGoalModal] ${message}`, data || \"\")\r\n    }\r\n  },\r\n  debug: (message: string, data?: any) => {\r\n    if (process.env.DEV) {\r\n      console.debug(`[WorkoutGoalModal] ${message}`, data || \"\")\r\n    }\r\n  },\r\n  warn: (message: string, data?: any) => {\r\n    console.warn(`[WorkoutGoalModal] ${message}`, data || \"\")\r\n  },\r\n  error: (message: string, data?: any) => {\r\n    console.error(`[WorkoutGoalModal] ${message}`, data || \"\")\r\n  },\r\n}\r\n\r\nexport function WorkoutGoalModal() {\r\n  const {\r\n    modals: { goal: modalState },\r\n    closeGoalModal,\r\n    createGoal,\r\n    updateGoal,\r\n  } = useWorkoutStore()\r\n\r\n  const {\r\n    formData,\r\n    errors,\r\n    handleInputChange,\r\n    handleTypeChange,\r\n    validateForm,\r\n  } = useGoalForm(modalState.data)\r\n\r\n  const isOpen = modalState.isOpen\r\n  const isEditMode = modalState.mode === \"edit\"\r\n  const isViewMode = modalState.mode === \"view\"\r\n  const goal = modalState.data\r\n\r\n  logger.info(\"WorkoutGoalModal 렌더링\", {\r\n    isOpen,\r\n    mode: modalState.mode,\r\n    hasGoal: !!goal,\r\n    goalId: goal?.id,\r\n    formDataKeys: Object.keys(formData),\r\n    hasErrors: Object.keys(errors).length > 0,\r\n  })\r\n\r\n  // ESC 키로 모달 닫기\r\n  useEffect(() => {\r\n    const handleEscape = (e: KeyboardEvent) => {\r\n      if (e.key === \"Escape\") {\r\n        closeGoalModal()\r\n      }\r\n    }\r\n\r\n    if (isOpen) {\r\n      document.addEventListener(\"keydown\", handleEscape)\r\n      return () => document.removeEventListener(\"keydown\", handleEscape)\r\n    }\r\n  }, [isOpen, closeGoalModal])\r\n\r\n  // 오버레이 클릭으로 모달 닫기\r\n  const handleOverlayClick = (e: React.MouseEvent) => {\r\n    if (e.target === e.currentTarget) {\r\n      closeGoalModal()\r\n    }\r\n  }\r\n\r\n  // 저장 핸들러\r\n  const handleSave = async () => {\r\n    logger.info(\"목표 저장 시도\", {\r\n      mode: modalState.mode,\r\n      goalId: goal?.id,\r\n      formData,\r\n    })\r\n\r\n    if (!validateForm()) {\r\n      logger.warn(\"폼 검증 실패\", { errors })\r\n      return\r\n    }\r\n\r\n    try {\r\n      if (isEditMode && goal) {\r\n        logger.info(\"목표 수정 시작\", { goalId: goal.id })\r\n        if (goal.id) {\r\n          await updateGoal(goal.id, { ...formData, id: goal.id, type: formData.type as \"weight\" | \"reps\" | \"duration\" | \"frequency\" | \"streak\" })\r\n          logger.info(\"목표 수정 완료\", { goalId: goal.id })\r\n        }\r\n      } else {\r\n        logger.info(\"새 목표 생성 시작\")\r\n        if (formData.title) {\r\n          await createGoal(formData as any)\r\n          logger.info(\"새 목표 생성 완료\")\r\n        }\r\n      }\r\n      closeGoalModal()\r\n    } catch (error) {\r\n      logger.error(\"목표 저장 실패\", error)\r\n    }\r\n  }\r\n\r\n  if (!isOpen) return null\r\n\r\n  return (\r\n    <div className=\"workout-goal-modal-overlay\" onClick={handleOverlayClick}>\r\n      <div className=\"workout-goal-modal\" onClick={e => e.stopPropagation()}>\r\n        <div className=\"workout-goal-modal-header\">\r\n          <h2 className=\"workout-goal-modal-title\">\r\n            {isViewMode\r\n              ? \"운동 목표 보기\"\r\n              : isEditMode\r\n                ? \"운동 목표 수정\"\r\n                : \"새 운동 목표 설정\"}\r\n          </h2>\r\n          <button className=\"workout-goal-modal-close\" onClick={closeGoalModal}>\r\n            <X size={20} />\r\n          </button>\r\n        </div>\r\n\r\n        <GoalForm\r\n          formData={formData}\r\n          errors={errors}\r\n          onInputChange={handleInputChange}\r\n          onTypeChange={handleTypeChange}\r\n        />\r\n\r\n        <div className=\"workout-goal-modal-footer\">\r\n          <button className=\"cancel-button\" onClick={closeGoalModal}>\r\n            취소\r\n          </button>\r\n          {!isViewMode && (\r\n            <button className=\"save-button\" onClick={handleSave}>\r\n              <Save size={16} />\r\n              {isEditMode ? \"수정\" : \"생성\"}\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","timestamp":1759907919152}