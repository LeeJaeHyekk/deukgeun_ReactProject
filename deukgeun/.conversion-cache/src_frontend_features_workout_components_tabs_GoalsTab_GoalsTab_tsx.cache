{"key":"e4c3ab64fecea5d8d9fee08d9f0b57fa","result":"const React = require('react').default\r\nconst { useTabState  } = require('../../../hooks/useWorkoutStore')\r\nconst { useSharedState  } = require('../../../hooks/useWorkoutStore')\r\nconst { GoalsContent  } = require('./components/GoalsContent')\r\nconst { GoalsStats  } = require('./components/GoalsStats')\r\nconst { useGoalsActions  } = require('./hooks/useGoalsActions')\r\nimport type { WorkoutGoal } from \"../../../types\"\r\nimport type { GoalsTabState } from \"../../../types\"\r\nimport \"./GoalsTab.css\"\r\n\r\n// 로깅 유틸리티\r\nconst logger = {\r\n  info: (message: string, data?: any) => {\r\n    if (process.env.DEV) {\r\n      console.log(`[GoalsTab] ${message}`, data || \"\")\r\n    }\r\n  },\r\n  debug: (message: string, data?: any) => {\r\n    if (process.env.DEV) {\r\n      console.debug(`[GoalsTab] ${message}`, data || \"\")\r\n    }\r\n  },\r\n  warn: (message: string, data?: any) => {\r\n    console.warn(`[GoalsTab] ${message}`, data || \"\")\r\n  },\r\n  error: (message: string, data?: any) => {\r\n    console.error(`[GoalsTab] ${message}`, data || \"\")\r\n  },\r\n}\r\n\r\ninterface GoalsTabProps {\r\n  goals: WorkoutGoal[]\r\n  isLoading: boolean\r\n  onCreateGoal: () => void\r\n  onEditGoal: (goalId: number) => void\r\n  onDeleteGoal: (goalId: number) => void\r\n  selectedGoalId?: number\r\n}\r\n\r\nexport function GoalsTab({\r\n  goals,\r\n  isLoading,\r\n  onCreateGoal,\r\n  onEditGoal,\r\n  onDeleteGoal,\r\n  selectedGoalId,\r\n}: GoalsTabProps) {\r\n  const { tabState, updateTabState } = useTabState(\"goals\")\r\n\r\n  // 타입 캐스팅을 사용하여 GoalsTabState로 처리\r\n  const goalsTabState = tabState as GoalsTabState\r\n\r\n  // selectedGoalId가 변경되면 해당 목표를 선택하고 편집 모달 열기\r\n  React.useEffect(() => {\r\n    if (selectedGoalId && selectedGoalId !== goalsTabState.selectedGoalId) {\r\n      updateTabState({ selectedGoalId } as GoalsTabState)\r\n      // 약간의 지연 후 편집 모달 열기\r\n      setTimeout(() => {\r\n        onEditGoal(selectedGoalId)\r\n      }, 100)\r\n    }\r\n  }, [selectedGoalId, goalsTabState.selectedGoalId, updateTabState, onEditGoal])\r\n\r\n  // 초기 상태 설정 (목표가 있을 때)\r\n  React.useEffect(() => {\r\n    if (\r\n      goals.length > 0 &&\r\n      !goalsTabState.showCompleted &&\r\n      !goalsTabState.sortBy\r\n    ) {\r\n      updateTabState({\r\n        showCompleted: false,\r\n        sortBy: \"progress\",\r\n        selectedGoalId: undefined,\r\n      } as GoalsTabState)\r\n    }\r\n  }, [\r\n    goals.length,\r\n    goalsTabState.showCompleted,\r\n    goalsTabState.sortBy,\r\n    updateTabState,\r\n  ])\r\n\r\n  // 공유 상태 훅\r\n  const { sharedState } = useSharedState()\r\n\r\n  const { handleDeleteGoal } = useGoalsActions(onDeleteGoal)\r\n\r\n  logger.info(\"GoalsTab 렌더링\", {\r\n    goalsCount: goals.length,\r\n    isLoading,\r\n    showCompleted: goalsTabState.showCompleted,\r\n    sortBy: goalsTabState.sortBy,\r\n    selectedGoalId: goalsTabState.selectedGoalId,\r\n    activeGoalsCount: goals.filter(g => !g.isCompleted).length,\r\n    completedGoalsCount: goals.filter(g => g.isCompleted).length,\r\n  })\r\n\r\n  // 필터링된 목표 목록\r\n  const filteredGoals = React.useMemo(() => {\r\n    let filtered = goals\r\n\r\n    // 완료된 목표 필터링\r\n    if (!goalsTabState.showCompleted) {\r\n      filtered = filtered.filter(goal => !goal.isCompleted)\r\n    }\r\n\r\n    // 정렬 (진행률 높은 순으로 기본 정렬)\r\n    filtered.sort((a, b) => {\r\n      const progressA = (a.currentValue / a.targetValue) * 100\r\n      const progressB = (b.currentValue / b.targetValue) * 100\r\n\r\n      switch (goalsTabState.sortBy) {\r\n        case \"deadline\":\r\n          if (!a.deadline && !b.deadline) return 0\r\n          if (!a.deadline) return 1\r\n          if (!b.deadline) return -1\r\n          return new Date(a.deadline).getTime() - new Date(b.deadline).getTime()\r\n        case \"title\":\r\n          return a.title.localeCompare(b.title)\r\n        case \"progress\":\r\n          return progressB - progressA\r\n        case \"createdAt\":\r\n          return (\r\n            new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\r\n          )\r\n        default:\r\n          // 기본값: 진행률 높은 순\r\n          return progressB - progressA\r\n      }\r\n    })\r\n\r\n    return filtered\r\n  }, [goals, goalsTabState.showCompleted, goalsTabState.sortBy])\r\n\r\n  // 진행중인 목표와 완료된 목표 분리\r\n  const activeGoals = filteredGoals.filter(goal => !goal.isCompleted)\r\n  const completedGoals = filteredGoals.filter(goal => goal.isCompleted)\r\n\r\n  const handleSortChange = (\r\n    sortBy: \"progress\" | \"deadline\" | \"title\" | \"createdAt\"\r\n  ) => {\r\n    updateTabState({ sortBy } as GoalsTabState)\r\n  }\r\n\r\n  const handleShowCompletedChange = (showCompleted: boolean) => {\r\n    updateTabState({ showCompleted } as GoalsTabState)\r\n  }\r\n\r\n  const handleGoalSelect = (goalId: number | null) =>\r\n    updateTabState({ selectedGoalId: goalId } as GoalsTabState)\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"goals-tab\">\r\n        <div className=\"loading-container\">\r\n          <div className=\"loading-spinner\"></div>\r\n          <p>목표를 불러오는 중...</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"goals-tab\">\r\n      {/* 간단한 헤더 */}\r\n      <div className=\"goals-header\">\r\n        <div className=\"header-content\">\r\n          <h2>🎯 운동 목표</h2>\r\n          <p>목표를 설정하고 진행 상황을 관리하세요</p>\r\n        </div>\r\n        <button className=\"create-goal-btn\" onClick={onCreateGoal}>\r\n          <span className=\"icon\">+</span>새 목표\r\n        </button>\r\n      </div>\r\n\r\n      {/* 간단한 컨트롤 */}\r\n      <div className=\"goals-controls\">\r\n        <div className=\"control-section\">\r\n          <div className=\"sort-buttons\">\r\n            <button\r\n              className={`sort-btn ${goalsTabState.sortBy === \"progress\" ? \"active\" : \"\"}`}\r\n              onClick={() => handleSortChange(\"progress\")}\r\n            >\r\n              진행률순\r\n            </button>\r\n            <button\r\n              className={`sort-btn ${goalsTabState.sortBy === \"deadline\" ? \"active\" : \"\"}`}\r\n              onClick={() => handleSortChange(\"deadline\")}\r\n            >\r\n              마감일순\r\n            </button>\r\n            <button\r\n              className={`sort-btn ${goalsTabState.sortBy === \"createdAt\" ? \"active\" : \"\"}`}\r\n              onClick={() => handleSortChange(\"createdAt\")}\r\n            >\r\n              최신순\r\n            </button>\r\n          </div>\r\n          <button\r\n            className={`toggle-btn ${goalsTabState.showCompleted ? \"active\" : \"\"}`}\r\n            onClick={() =>\r\n              handleShowCompletedChange(!goalsTabState.showCompleted)\r\n            }\r\n          >\r\n            <span className=\"toggle-icon\">\r\n              {goalsTabState.showCompleted ? \"✓\" : \"○\"}\r\n            </span>\r\n            완료된 목표\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* 진행중인 목표 섹션 (강화) */}\r\n      {activeGoals.length > 0 && (\r\n        <div className=\"active-goals-section\">\r\n          <div className=\"section-header\">\r\n            <h3>🔥 진행중인 목표 ({activeGoals.length}개)</h3>\r\n            <p>현재 달성하고 있는 목표들을 확인하세요</p>\r\n          </div>\r\n          <div className=\"active-goals-grid\">\r\n            {activeGoals.map(goal => {\r\n              const progress = (goal.currentValue / goal.targetValue) * 100\r\n              const daysLeft = goal.deadline\r\n                ? Math.ceil(\r\n                    (new Date(goal.deadline).getTime() - new Date().getTime()) /\r\n                      (1000 * 60 * 60 * 24)\r\n                  )\r\n                : null\r\n\r\n              return (\r\n                <div\r\n                  key={goal.id}\r\n                  className={`goal-card ${goal.id === goalsTabState.selectedGoalId ? \"selected\" : \"\"}`}\r\n                  onClick={() => handleGoalSelect(goal.id)}\r\n                >\r\n                  <div className=\"goal-header\">\r\n                    <h4>{goal.title}</h4>\r\n                    <div className=\"goal-actions\">\r\n                      <button\r\n                        className=\"action-btn edit\"\r\n                        onClick={e => {\r\n                          e.stopPropagation()\r\n                          onEditGoal(goal.id)\r\n                        }}\r\n                      >\r\n                        ✏️\r\n                      </button>\r\n                      <button\r\n                        className=\"action-btn delete\"\r\n                        onClick={e => {\r\n                          e.stopPropagation()\r\n                          handleDeleteGoal(goal.id)\r\n                        }}\r\n                      >\r\n                        🗑️\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"goal-progress-section\">\r\n                    <div className=\"progress-info\">\r\n                      <span className=\"progress-percentage\">\r\n                        {Math.round(progress)}%\r\n                      </span>\r\n                      <span className=\"progress-values\">\r\n                        {goal.currentValue} / {goal.targetValue} {goal.unit}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"progress-bar\">\r\n                      <div\r\n                        className=\"progress-fill\"\r\n                        style={{ width: `${Math.min(progress, 100)}%` }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"goal-details\">\r\n                    <div className=\"goal-type\">\r\n                      <span className=\"type-badge\">{goal.type}</span>\r\n                    </div>\r\n                    {goal.description && (\r\n                      <p className=\"goal-description\">{goal.description}</p>\r\n                    )}\r\n                    {daysLeft !== null && (\r\n                      <div className=\"deadline-info\">\r\n                        <span\r\n                          className={`deadline-text ${daysLeft <= 7 ? \"urgent\" : daysLeft <= 30 ? \"warning\" : \"normal\"}`}\r\n                        >\r\n                          {daysLeft > 0 ? `${daysLeft}일 남음` : \"마감일 지남\"}\r\n                        </span>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* 완료된 목표 섹션 */}\r\n      {completedGoals.length > 0 && goalsTabState.showCompleted && (\r\n        <div className=\"completed-goals-section\">\r\n          <div className=\"section-header\">\r\n            <h3>✅ 완료된 목표 ({completedGoals.length}개)</h3>\r\n            <p>달성한 목표들을 확인하세요</p>\r\n          </div>\r\n          <div className=\"completed-goals-grid\">\r\n            {completedGoals.map(goal => (\r\n              <div\r\n                key={goal.id}\r\n                className={`goal-card completed ${goal.id === goalsTabState.selectedGoalId ? \"selected\" : \"\"}`}\r\n                onClick={() => handleGoalSelect(goal.id)}\r\n              >\r\n                <div className=\"goal-header\">\r\n                  <h4>{goal.title}</h4>\r\n                  <span className=\"completed-badge\">완료</span>\r\n                </div>\r\n                <div className=\"goal-progress-section\">\r\n                  <div className=\"progress-info\">\r\n                    <span className=\"progress-percentage\">100%</span>\r\n                    <span className=\"progress-values\">\r\n                      {goal.targetValue} / {goal.targetValue} {goal.unit}\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"progress-bar\">\r\n                    <div\r\n                      className=\"progress-fill completed\"\r\n                      style={{ width: \"100%\" }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"goal-details\">\r\n                  <div className=\"goal-type\">\r\n                    <span className=\"type-badge\">{goal.type}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* 목표가 없을 때 */}\r\n      {goals.length === 0 && (\r\n        <div className=\"no-goals-container\">\r\n          <div className=\"no-goals-icon\">🎯</div>\r\n          <h3>아직 운동 목표가 없습니다</h3>\r\n          <p>첫 번째 운동 목표를 설정해보세요!</p>\r\n          <button className=\"create-first-goal-btn\" onClick={onCreateGoal}>\r\n            첫 목표 설정\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {/* 통계 */}\r\n      {goals.length > 0 && (\r\n        <GoalsStats\r\n          goals={goals}\r\n          totalGoals={goals.length}\r\n          filteredCount={filteredGoals.length}\r\n          completedCount={goals.filter(goal => goal.isCompleted).length}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","timestamp":1759820789608}