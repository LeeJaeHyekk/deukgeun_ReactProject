{"key":"3c4530197cbe00629ac3a84edd2f33e7","result":"// Browser API polyfills for Node.js environment\nif (typeof window === 'undefined') {\n  global.window = global.window || {}\n  global.document = global.document || {}\n  global.localStorage = global.localStorage || {\n    getItem: () => null,\n    setItem: () => {},\n    removeItem: () => {},\n    clear: () => {}\n  }\n  global.sessionStorage = global.sessionStorage || {\n    getItem: () => null,\n    setItem: () => {},\n    removeItem: () => {},\n    clear: () => {}\n  }\n  global.File = global.File || class File {}\n  global.StorageEvent = global.StorageEvent || class StorageEvent {}\n  global.requestAnimationFrame = global.requestAnimationFrame || (cb => setTimeout(cb, 16))\n}\n\nimport React, { useEffect } from \"react\"\r\nconst { useTabState,\r\n  useDashboardData,\r\n  useSharedState,\r\n  useWorkoutStoreData,\r\n } = require('../../../hooks/useWorkoutStore')\r\nimport type { DashboardData } from \"../../../types/workout\"\r\nconst { StatsSection  } = require('./components/StatsSection')\r\nconst { RecentSessionsSection  } = require('./components/RecentSessionsSection')\r\nconst { GoalsProgressSection  } = require('./components/GoalsProgressSection')\r\nconst { ChartsSection  } = require('./components/ChartsSection')\r\nconst styles = require('./OverviewTab.module.css').default\r\n\r\n// 로깅 유틸리티\r\nconst logger = {\r\n  info: (message: string, data?: any) => {\r\n    if (process.env.DEV) {\r\n      console.log(`[OverviewTab] ${message}`, data || \"\")\r\n    }\r\n  },\r\n  debug: (message: string, data?: any) => {\r\n    if (process.env.DEV) {\r\n      console.debug(`[OverviewTab] ${message}`, data || \"\")\r\n    }\r\n  },\r\n  warn: (message: string, data?: any) => {\r\n    console.warn(`[OverviewTab] ${message}`, data || \"\")\r\n  },\r\n  error: (message: string, data?: any) => {\r\n    console.error(`[OverviewTab] ${message}`, data || \"\")\r\n  },\r\n  grid: (message: string, data?: any) => {\r\n    const gridEl = document.querySelector(`.${styles.overviewGrid}`)\r\n    console.log(\"overviewGrid element:\", gridEl)\r\n    if (gridEl) {\r\n      console.log(\"Computed style:\", window.getComputedStyle(gridEl).display)\r\n    }\r\n  },\r\n}\r\n\r\ninterface OverviewTabProps {\r\n  dashboardData: DashboardData | null\r\n  isLoading: boolean\r\n  onPlanClick: (planId: number) => void\r\n  onSessionClick: (sessionId: number) => void\r\n  onGoalClick: (goalId: number) => void\r\n}\r\n\r\nexport function OverviewTab({\r\n  dashboardData,\r\n  isLoading,\r\n  onPlanClick,\r\n  onSessionClick,\r\n  onGoalClick,\r\n}: OverviewTabProps) {\r\n  const { tabState, updateTabState } = useTabState(\"overview\")\r\n\r\n  // 대시보드 데이터 훅\r\n  const { dashboardData: storeDashboardData, isLoading: storeIsLoading } =\r\n    useDashboardData()\r\n\r\n  // 목표 데이터 훅\r\n  const { goals } = useWorkoutStoreData()\r\n\r\n  // 공유 상태 훅\r\n  const { sharedState } = useSharedState()\r\n\r\n  logger.info(\"OverviewTab 렌더링\", {\r\n    hasPropsData: !!dashboardData,\r\n    hasStoreData: !!storeDashboardData,\r\n    isLoading,\r\n    storeIsLoading,\r\n    recentUpdatesCount:\r\n      sharedState.lastUpdatedPlan || sharedState.lastUpdatedSession ? 1 : 0,\r\n  })\r\n\r\n  // 실제 사용할 데이터 결정 (props 우선, 없으면 스토어에서)\r\n  const finalDashboardData: any = dashboardData || storeDashboardData || null\r\n  const finalIsLoading = isLoading || storeIsLoading\r\n\r\n  // 최근 업데이트된 항목들 표시 (최대 2개만)\r\n  const recentUpdates = [\r\n    sharedState.lastUpdatedPlan && {\r\n      type: \"plan\" as const,\r\n      item: sharedState.lastUpdatedPlan,\r\n      onClick: () => onPlanClick(sharedState.lastUpdatedPlan!.id),\r\n    },\r\n    sharedState.lastUpdatedSession && {\r\n      type: \"session\" as const,\r\n      item: sharedState.lastUpdatedSession,\r\n      onClick: () => onSessionClick(sharedState.lastUpdatedSession!.id),\r\n    },\r\n  ]\r\n    .filter(Boolean)\r\n    .slice(0, 2)\r\n\r\n  if (finalIsLoading) {\r\n    return (\r\n      <div className={styles.overviewTab}>\r\n        <div className={styles.overviewLoadingContainer}>\r\n          <div className={styles.overviewLoadingSpinner}></div>\r\n          <p>데이터를 불러오는 중...</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (!finalDashboardData) {\r\n    return (\r\n      <div className={styles.overviewTab}>\r\n        <div className={styles.overviewNoDataContainer}>\r\n          <h3>운동 데이터가 없습니다</h3>\r\n          <p>첫 번째 운동 계획을 만들어보세요!</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={styles.overviewTab}>\r\n      {/* 간단한 헤더 */}\r\n      <div className={styles.overviewHeader}>\r\n        <h2>운동 대시보드</h2>\r\n        <p>현재 운동 현황을 한눈에 확인하세요</p>\r\n      </div>\r\n\r\n      {/* 최근 업데이트 알림 (간소화) */}\r\n      {recentUpdates.length > 0 && (\r\n        <div className={styles.recentUpdates}>\r\n          <h4>최근 활동</h4>\r\n          <div className={styles.updatesList}>\r\n            {recentUpdates.map(update => {\r\n              if (!update) return null\r\n\r\n              const displayName = (() => {\r\n                if (\r\n                  \"name\" in update.item &&\r\n                  typeof update.item.name === \"string\"\r\n                ) {\r\n                  return update.item.name\r\n                }\r\n                if (\r\n                  \"title\" in update.item &&\r\n                  typeof update.item.title === \"string\"\r\n                ) {\r\n                  return update.item.title\r\n                }\r\n                return \"Unknown\"\r\n              })()\r\n\r\n              return (\r\n                <div\r\n                  key={`${update.type}-${update.item.id}`}\r\n                  className={styles.updateItem}\r\n                  onClick={update.onClick}\r\n                >\r\n                  <span className={styles.updateType}>{update.type}</span>\r\n                  <span className={styles.updateName}>{displayName}</span>\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* 메인 콘텐츠 그리드 */}\r\n      <div className={styles.overviewGrid}>\r\n        <div className={styles.overviewStatsSection}>\r\n          <StatsSection dashboardData={finalDashboardData} />\r\n        </div>\r\n        <div className={styles.overviewSessionsSection}>\r\n          <RecentSessionsSection\r\n            dashboardData={finalDashboardData}\r\n            onSessionClick={onSessionClick}\r\n          />\r\n        </div>\r\n        <div className={styles.overviewGoalsSection}>\r\n          <GoalsProgressSection\r\n            dashboardData={finalDashboardData}\r\n            goals={goals}\r\n            onGoalClick={onGoalClick}\r\n          />\r\n        </div>\r\n        <div className={styles.overviewChartsSection}>\r\n          <ChartsSection dashboardData={finalDashboardData} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","timestamp":1759907919159}