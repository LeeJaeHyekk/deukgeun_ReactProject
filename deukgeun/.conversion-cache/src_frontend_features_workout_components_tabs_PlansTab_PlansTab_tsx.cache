{"key":"c812c7e26d72f8bae6958aafb2f9cb8d","result":"const React = require('react').default\r\nconst { useTabState  } = require('../../../hooks/useWorkoutStore')\r\nconst { useSharedState  } = require('../../../hooks/useWorkoutStore')\r\nimport type { WorkoutPlan } from \"../../../../../../shared/types/common\"\r\nimport type { PlansTabState } from \"../../../types\"\r\nconst { PlansContent  } = require('./components/PlansContent')\r\nconst { PlansStats  } = require('./components/PlansStats')\r\nconst { usePlansActions  } = require('./hooks/usePlansActions')\r\nconst styles = require('./PlansTab.module.css').default\r\n\r\n// 로깅 유틸리티\r\nconst logger = {\r\n  info: (message: string, data?: any) => {\r\n    if (process.env.DEV) {\r\n      console.log(`[PlansTab] ${message}`, data || \"\")\r\n    }\r\n  },\r\n  debug: (message: string, data?: any) => {\r\n    if (process.env.DEV) {\r\n      console.debug(`[PlansTab] ${message}`, data || \"\")\r\n    }\r\n  },\r\n  warn: (message: string, data?: any) => {\r\n    console.warn(`[PlansTab] ${message}`, data || \"\")\r\n  },\r\n  error: (message: string, data?: any) => {\r\n    console.error(`[PlansTab] ${message}`, data || \"\")\r\n  },\r\n}\r\n\r\ninterface PlansTabProps {\r\n  plans: WorkoutPlan[]\r\n  isLoading: boolean\r\n  onCreatePlan: () => void\r\n  onEditPlan: (planId: number) => void\r\n  onStartSession: (planId: number) => void\r\n  onDeletePlan: (planId: number) => void\r\n}\r\n\r\nexport function PlansTab({\r\n  plans,\r\n  isLoading,\r\n  onCreatePlan,\r\n  onEditPlan,\r\n  onStartSession,\r\n  onDeletePlan,\r\n}: PlansTabProps) {\r\n  // 탭별 상태 관리\r\n  const { tabState, updateTabState } = useTabState(\"plans\")\r\n  const plansTabState = tabState as PlansTabState\r\n\r\n  // 공유 상태 훅\r\n  const { sharedState } = useSharedState()\r\n\r\n  const { handleDeletePlan } = usePlansActions(() => {\r\n    // 삭제 완료 후 추가 작업이 필요하면 여기에 추가\r\n  })\r\n\r\n  logger.info(\"PlansTab 렌더링\", {\r\n    plansCount: plans.length,\r\n    isLoading,\r\n    filterStatus: plansTabState.filterStatus,\r\n    sortBy: plansTabState.sortBy,\r\n    viewMode: plansTabState.viewMode,\r\n    selectedPlanId: plansTabState.selectedPlanId,\r\n  })\r\n\r\n  // 필터링된 계획 목록\r\n  const filteredPlans = React.useMemo(() => {\r\n    let filtered = plans\r\n\r\n    // 상태별 필터링\r\n    if (plansTabState.filterStatus !== \"all\") {\r\n      filtered = filtered.filter(plan => {\r\n        // 여기에 필터링 로직 추가\r\n        return true\r\n      })\r\n    }\r\n\r\n    // 정렬 (최신순으로 기본 정렬)\r\n    filtered.sort((a, b) => {\r\n      switch (plansTabState.sortBy) {\r\n        case \"createdAt\":\r\n          return (\r\n            new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\r\n          )\r\n        case \"name\":\r\n          return a.name.localeCompare(b.name)\r\n        case \"difficulty\":\r\n          const difficultyOrder: Record<string, number> = {\r\n            쉬움: 1,\r\n            보통: 2,\r\n            어려움: 3,\r\n          }\r\n          return (\r\n            (difficultyOrder[a.difficulty] || 0) -\r\n            (difficultyOrder[b.difficulty] || 0)\r\n          )\r\n        default:\r\n          // 기본값: 최신순\r\n          return (\r\n            new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\r\n          )\r\n      }\r\n    })\r\n\r\n    return filtered\r\n  }, [plans, plansTabState.filterStatus, plansTabState.sortBy])\r\n\r\n  const handleSortChange = (sortBy: \"createdAt\" | \"name\" | \"difficulty\") => {\r\n    updateTabState({ sortBy })\r\n  }\r\n\r\n  const handleViewModeChange = (viewMode: \"grid\" | \"list\") => {\r\n    updateTabState({ viewMode })\r\n  }\r\n\r\n  const handlePlanSelect = (planId: number | null) => {\r\n    updateTabState({ selectedPlanId: planId })\r\n  }\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className={styles.plansTab}>\r\n        <div className={styles.loadingContainer}>\r\n          <div className={styles.loadingSpinner}></div>\r\n          <p>계획을 불러오는 중...</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={styles.plansTab}>\r\n      {/* 헤더 섹션 */}\r\n      <div className={styles.plansHeader}>\r\n        <div className={styles.plansHeaderContent}>\r\n          <h2>📋 운동 계획</h2>\r\n          <p>운동 계획을 만들고 관리하세요</p>\r\n        </div>\r\n        <button className={styles.createPlanBtn} onClick={onCreatePlan}>\r\n          <span className={styles.icon}>+</span>새 계획\r\n        </button>\r\n      </div>\r\n\r\n      {/* 컨트롤 섹션 */}\r\n      <div className={styles.plansControls}>\r\n        <div className={styles.controlSection}>\r\n          <div className={styles.sortButtons}>\r\n            <button\r\n              className={`${styles.sortBtn} ${plansTabState.sortBy === \"createdAt\" ? styles.active : \"\"}`}\r\n              onClick={() => handleSortChange(\"createdAt\")}\r\n            >\r\n              최신순\r\n            </button>\r\n            <button\r\n              className={`${styles.sortBtn} ${plansTabState.sortBy === \"name\" ? styles.active : \"\"}`}\r\n              onClick={() => handleSortChange(\"name\")}\r\n            >\r\n              이름순\r\n            </button>\r\n            <button\r\n              className={`${styles.sortBtn} ${plansTabState.sortBy === \"difficulty\" ? styles.active : \"\"}`}\r\n              onClick={() => handleSortChange(\"difficulty\")}\r\n            >\r\n              난이도순\r\n            </button>\r\n          </div>\r\n          <div className={styles.viewModeToggle}>\r\n            <button\r\n              className={`${styles.viewModeBtn} ${plansTabState.viewMode === \"grid\" ? styles.active : \"\"}`}\r\n              onClick={() => handleViewModeChange(\"grid\")}\r\n            >\r\n              그리드\r\n            </button>\r\n            <button\r\n              className={`${styles.viewModeBtn} ${plansTabState.viewMode === \"list\" ? styles.active : \"\"}`}\r\n              onClick={() => handleViewModeChange(\"list\")}\r\n            >\r\n              리스트\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* 최근 업데이트된 계획 표시 */}\r\n      {sharedState.lastUpdatedPlan && (\r\n        <div className={styles.recentUpdate}>\r\n          <h4>최근 활동</h4>\r\n          <div\r\n            className={styles.updateItem}\r\n            onClick={() => onEditPlan(sharedState.lastUpdatedPlan!.id)}\r\n          >\r\n            <span className={styles.planName}>\r\n              {sharedState.lastUpdatedPlan.name}\r\n            </span>\r\n            <span className={styles.planDifficulty}>\r\n              {sharedState.lastUpdatedPlan.difficulty}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* 계획 목록 */}\r\n      {filteredPlans.length > 0 ? (\r\n        <div className={styles.plansSection}>\r\n          <div className={styles.sectionHeader}>\r\n            <h3>📋 운동 계획 ({filteredPlans.length}개)</h3>\r\n            <p>설정한 운동 계획들을 확인하세요</p>\r\n          </div>\r\n          <PlansContent\r\n            plans={filteredPlans}\r\n            viewMode={plansTabState.viewMode}\r\n            onCreatePlan={onCreatePlan}\r\n            onEditPlan={onEditPlan}\r\n            onDeletePlan={handleDeletePlan}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <div className={styles.noPlansContainer}>\r\n          <div className={styles.noPlansIcon}>📋</div>\r\n          <h3>아직 운동 계획이 없습니다</h3>\r\n          <p>첫 번째 운동 계획을 만들어보세요!</p>\r\n          <button className={styles.createFirstPlanBtn} onClick={onCreatePlan}>\r\n            첫 계획 만들기\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {/* 통계 */}\r\n      {plans.length > 0 && <PlansStats plans={plans as any} />}\r\n    </div>\r\n  )\r\n}\r\n","timestamp":1759820789625}