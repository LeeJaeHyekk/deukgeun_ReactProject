{"key":"de4a9ed9c1f4cff57eed929abbe23bb9","result":"// Browser API polyfills for Node.js environment\nif (typeof window === 'undefined') {\n  global.window = global.window || {}\n  global.document = global.document || {}\n  global.localStorage = global.localStorage || {\n    getItem: () => null,\n    setItem: () => {},\n    removeItem: () => {},\n    clear: () => {}\n  }\n  global.sessionStorage = global.sessionStorage || {\n    getItem: () => null,\n    setItem: () => {},\n    removeItem: () => {},\n    clear: () => {}\n  }\n  global.File = global.File || class File {}\n  global.StorageEvent = global.StorageEvent || class StorageEvent {}\n  global.requestAnimationFrame = global.requestAnimationFrame || (cb => setTimeout(cb, 16))\n}\n\nimport React, { useState, useEffect, useCallback, useRef } from \"react\"\r\nconst { Play, Pause, Square, RotateCcw  } = require('lucide-react')\r\nconst { formatTime  } = require('../../utils/workoutUtils')\r\nimport \"./WorkoutSessionTimer.css\"\r\n\r\n// 로깅 유틸리티\r\nconst logger = {\r\n  info: (message: string, data?: any) => {\r\n    if (process.env.DEV) {\r\n      console.log(`[WorkoutSessionTimer] ${message}`, data || \"\")\r\n    }\r\n  },\r\n  debug: (message: string, data?: any) => {\r\n    if (process.env.DEV) {\r\n      console.debug(`[WorkoutSessionTimer] ${message}`, data || \"\")\r\n    }\r\n  },\r\n  warn: (message: string, data?: any) => {\r\n    console.warn(`[WorkoutSessionTimer] ${message}`, data || \"\")\r\n  },\r\n  error: (message: string, data?: any) => {\r\n    console.error(`[WorkoutSessionTimer] ${message}`, data || \"\")\r\n  },\r\n}\r\n\r\ninterface WorkoutSessionTimerProps {\r\n  onTimeUpdate?: (time: number) => void\r\n  onSessionComplete?: (duration: number) => void\r\n  className?: string\r\n  autoStart?: boolean\r\n}\r\n\r\nexport function WorkoutSessionTimer({\r\n  onTimeUpdate,\r\n  onSessionComplete,\r\n  className = \"\",\r\n  autoStart = false,\r\n}: WorkoutSessionTimerProps) {\r\n  const [isActive, setIsActive] = useState(false)\r\n  const [isPaused, setIsPaused] = useState(false)\r\n  const [time, setTime] = useState(0)\r\n  const [laps, setLaps] = useState<number[]>([])\r\n  const intervalRef = useRef<NodeJS.Timeout | null>(null)\r\n  const startTimeRef = useRef<number>(0)\r\n\r\n  const startTimer = useCallback(() => {\r\n    if (!isActive) {\r\n      logger.info(\"타이머 시작\", { currentTime: time })\r\n      setIsActive(true)\r\n      setIsPaused(false)\r\n      startTimeRef.current = Date.now() - time * 1000\r\n    }\r\n  }, [isActive, time])\r\n\r\n  const pauseTimer = useCallback(() => {\r\n    logger.info(\"타이머 일시정지\", { currentTime: time })\r\n    setIsActive(false)\r\n    setIsPaused(true)\r\n  }, [time])\r\n\r\n  const stopTimer = useCallback(() => {\r\n    logger.info(\"타이머 정지\", { finalTime: time, lapsCount: laps.length })\r\n    setIsActive(false)\r\n    setIsPaused(false)\r\n    const finalTime = time\r\n    setTime(0)\r\n    setLaps([])\r\n    onSessionComplete?.(finalTime)\r\n  }, [time, laps.length, onSessionComplete])\r\n\r\n  const resetTimer = useCallback(() => {\r\n    setIsActive(false)\r\n    setIsPaused(false)\r\n    setTime(0)\r\n    setLaps([])\r\n  }, [])\r\n\r\n  const addLap = useCallback(() => {\r\n    if (isActive || isPaused) {\r\n      setLaps(prev => [...prev, time])\r\n    }\r\n  }, [isActive, isPaused, time])\r\n\r\n  // 타이머 로직\r\n  useEffect(() => {\r\n    if (isActive) {\r\n      intervalRef.current = setInterval(() => {\r\n        const newTime = Math.floor((Date.now() - startTimeRef.current) / 1000)\r\n        setTime(newTime)\r\n        onTimeUpdate?.(newTime)\r\n      }, 1000)\r\n    } else {\r\n      if (intervalRef.current) {\r\n        clearInterval(intervalRef.current)\r\n        intervalRef.current = null\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      if (intervalRef.current) {\r\n        clearInterval(intervalRef.current)\r\n      }\r\n    }\r\n  }, [isActive, onTimeUpdate])\r\n\r\n  // 자동 시작\r\n  useEffect(() => {\r\n    if (autoStart && !isActive && !isPaused) {\r\n      startTimer()\r\n    }\r\n  }, [autoStart, isActive, isPaused, startTimer])\r\n\r\n  // 키보드 단축키\r\n  useEffect(() => {\r\n    const handleKeyPress = (e: KeyboardEvent) => {\r\n      if (\r\n        e.target instanceof HTMLInputElement ||\r\n        e.target instanceof HTMLTextAreaElement\r\n      ) {\r\n        return\r\n      }\r\n\r\n      switch (e.code) {\r\n        case \"Space\":\r\n          e.preventDefault()\r\n          if (isActive) {\r\n            pauseTimer()\r\n          } else {\r\n            startTimer()\r\n          }\r\n          break\r\n        case \"KeyS\":\r\n          if (e.ctrlKey || e.metaKey) {\r\n            e.preventDefault()\r\n            stopTimer()\r\n          }\r\n          break\r\n        case \"KeyR\":\r\n          if (e.ctrlKey || e.metaKey) {\r\n            e.preventDefault()\r\n            resetTimer()\r\n          }\r\n          break\r\n        case \"KeyL\":\r\n          e.preventDefault()\r\n          addLap()\r\n          break\r\n      }\r\n    }\r\n\r\n    document.addEventListener(\"keydown\", handleKeyPress)\r\n    return () => document.removeEventListener(\"keydown\", handleKeyPress)\r\n  }, [isActive, startTimer, pauseTimer, stopTimer, resetTimer, addLap])\r\n\r\n  return (\r\n    <div className={`workout-session-timer ${className}`}>\r\n      <div className=\"timer-display\">\r\n        <span\r\n          className=\"timer-time\"\r\n          role=\"timer\"\r\n          aria-live=\"polite\"\r\n          aria-label={`운동 시간: ${formatTime(time)}`}\r\n        >\r\n          {formatTime(time)}\r\n        </span>\r\n      </div>\r\n\r\n      <div className=\"timer-controls\">\r\n        {!isActive && !isPaused ? (\r\n          <button\r\n            className=\"timer-button start\"\r\n            onClick={startTimer}\r\n            title=\"타이머 시작 (스페이스바)\"\r\n            aria-label=\"타이머 시작\"\r\n          >\r\n            <Play size={16} />\r\n            시작\r\n          </button>\r\n        ) : (\r\n          <>\r\n            <button\r\n              className=\"timer-button pause\"\r\n              onClick={pauseTimer}\r\n              title=\"일시정지 (스페이스바)\"\r\n              aria-label=\"타이머 일시정지\"\r\n            >\r\n              <Pause size={16} />\r\n              일시정지\r\n            </button>\r\n            <button\r\n              className=\"timer-button stop\"\r\n              onClick={stopTimer}\r\n              title=\"정지 (Ctrl+S)\"\r\n              aria-label=\"타이머 정지\"\r\n            >\r\n              <Square size={16} />\r\n              정지\r\n            </button>\r\n          </>\r\n        )}\r\n\r\n        {isPaused && (\r\n          <button\r\n            className=\"timer-button resume\"\r\n            onClick={startTimer}\r\n            title=\"재개 (스페이스바)\"\r\n            aria-label=\"타이머 재개\"\r\n          >\r\n            <Play size={16} />\r\n            재개\r\n          </button>\r\n        )}\r\n\r\n        <button\r\n          className=\"timer-button reset\"\r\n          onClick={resetTimer}\r\n          title=\"리셋 (Ctrl+R)\"\r\n          aria-label=\"타이머 리셋\"\r\n          disabled={isActive}\r\n        >\r\n          <RotateCcw size={16} />\r\n          리셋\r\n        </button>\r\n      </div>\r\n\r\n      {laps.length > 0 && (\r\n        <div className=\"timer-laps\">\r\n          <h4>랩 기록</h4>\r\n          <div className=\"laps-list\" role=\"list\" aria-label=\"랩 기록 목록\">\r\n            {laps.map((lapTime, index) => (\r\n              <div key={index} className=\"lap-item\" role=\"listitem\">\r\n                <span className=\"lap-number\">랩 {index + 1}</span>\r\n                <span className=\"lap-time\">{formatTime(lapTime)}</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"timer-shortcuts\">\r\n        <small>\r\n          단축키: 스페이스바 (시작/일시정지), Ctrl+S (정지), Ctrl+R (리셋), L\r\n          (랩)\r\n        </small>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","timestamp":1759907919167}