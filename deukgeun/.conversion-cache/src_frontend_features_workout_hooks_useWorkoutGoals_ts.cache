{"key":"8bd925ddfd6beda37ec5c64416b06212","result":"const { useState, useEffect, useCallback  } = require('react')\r\nconst { workoutApi  } = require('../api/workoutApi')\r\nimport type { WorkoutGoal } from '../types'\r\n\r\nexport function useWorkoutGoals() {\r\n  const [goals, setGoals] = useState<WorkoutGoal[]>([])\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  const getUserGoals = useCallback(async () => {\r\n    console.log(`🔍 [useWorkoutGoals] getUserGoals 호출 시작`)\r\n    try {\r\n      setLoading(true)\r\n      setError(null)\r\n\r\n      console.log(`📡 [useWorkoutGoals] API 호출 중...`)\r\n      const data = await workoutApi.getGoals()\r\n      console.log(`✅ [useWorkoutGoals] 운동 목표 ${data.length}개 조회 성공`)\r\n      setGoals(data)\r\n    } catch (err) {\r\n      const errorMessage =\r\n        err instanceof Error\r\n          ? err.message\r\n          : '운동 목표를 불러오는데 실패했습니다.'\r\n      console.error(`❌ [useWorkoutGoals] 운동 목표 조회 실패:`, err)\r\n      setError(errorMessage)\r\n    } finally {\r\n      setLoading(false)\r\n      console.log(`🏁 [useWorkoutGoals] getUserGoals 완료`)\r\n    }\r\n  }, [])\r\n\r\n  const createGoal = useCallback(async (goalData: Partial<WorkoutGoal>) => {\r\n    const requestId = Math.random().toString(36).substring(2, 15)\r\n    console.log(`🔍 [useWorkoutGoals:${requestId}] createGoal 시작`, {\r\n      goalData,\r\n    })\r\n\r\n    try {\r\n      setLoading(true)\r\n      setError(null)\r\n      // userId는 백엔드에서 인증된 사용자 정보로 설정하므로 제거\r\n      const { userId, ...createData } = goalData\r\n      console.log(\r\n        `📝 [useWorkoutGoals:${requestId}] API 호출용 데이터:`,\r\n        createData\r\n      )\r\n\r\n      console.log(\r\n        `📡 [useWorkoutGoals:${requestId}] workoutApi.createGoal 호출`\r\n      )\r\n      const newGoal = await workoutApi.createGoal(createData as any)\r\n\r\n      console.log(`✅ [useWorkoutGoals:${requestId}] 목표 생성 성공:`, newGoal)\r\n      setGoals(prev => {\r\n        const updated = [newGoal, ...prev]\r\n        console.log(\r\n          `📝 [useWorkoutGoals:${requestId}] 목표 목록 업데이트:`,\r\n          updated\r\n        )\r\n        return updated\r\n      })\r\n      return newGoal\r\n    } catch (err) {\r\n      console.error(\r\n        `❌ [useWorkoutGoals:${requestId}] 운동 목표 생성 실패:`,\r\n        err\r\n      )\r\n      const errorMessage =\r\n        err instanceof Error ? err.message : '운동 목표 생성에 실패했습니다.'\r\n      setError(errorMessage)\r\n      throw err\r\n    } finally {\r\n      setLoading(false)\r\n      console.log(`🏁 [useWorkoutGoals:${requestId}] createGoal 완료`)\r\n    }\r\n  }, [])\r\n\r\n  const updateGoal = useCallback(\r\n    async (goalId: number, goalData: Partial<WorkoutGoal>) => {\r\n      try {\r\n        setLoading(true)\r\n        setError(null)\r\n        // goalId가 필수이므로 추가\r\n        const updateData = {\r\n          ...goalData,\r\n          goalId,\r\n        } as any\r\n        const updatedGoal = await workoutApi.updateGoal(goalId, updateData)\r\n        setGoals(prev =>\r\n          prev.map(goal => (goal.goal_id === goalId ? updatedGoal : goal))\r\n        )\r\n        return updatedGoal\r\n      } catch (err) {\r\n        const errorMessage =\r\n          err instanceof Error\r\n            ? err.message\r\n            : '운동 목표 업데이트에 실패했습니다.'\r\n        console.error('운동 목표 업데이트 실패:', err)\r\n        setError(errorMessage)\r\n        throw err\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    },\r\n    []\r\n  )\r\n\r\n  const deleteGoal = useCallback(async (goalId: number) => {\r\n    try {\r\n      setLoading(true)\r\n      setError(null)\r\n\r\n      // 개발 환경에서 더미 데이터 처리\r\n      if (\r\n        process.env.MODE === 'development' &&\r\n        (goalId === 1 || goalId === 2)\r\n      ) {\r\n        console.log(`🔧 개발 환경 - 더미 목표 삭제 처리: ${goalId}`)\r\n        setGoals(prev => prev.filter(goal => goal.goal_id !== goalId))\r\n        return\r\n      }\r\n\r\n      await workoutApi.deleteGoal(goalId)\r\n      setGoals(prev => prev.filter(goal => goal.goal_id !== goalId))\r\n    } catch (err) {\r\n      const errorMessage =\r\n        err instanceof Error ? err.message : '운동 목표 삭제에 실패했습니다.'\r\n      console.error('운동 목표 삭제 실패:', err)\r\n      setError(errorMessage)\r\n      throw err\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }, [])\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    getUserGoals()\r\n  }, [getUserGoals])\r\n\r\n  return {\r\n    goals,\r\n    loading,\r\n    error,\r\n    getUserGoals,\r\n    createGoal,\r\n    updateGoal,\r\n    deleteGoal,\r\n    clearError,\r\n  }\r\n}\r\n","timestamp":1759820789639}