{"key":"22272096d6d1107c5c7ff30bfdaf6f6a","result":"// Browser API polyfills for Node.js environment\nif (typeof window === 'undefined') {\n  global.window = global.window || {}\n  global.document = global.document || {}\n  global.localStorage = global.localStorage || {\n    getItem: () => null,\n    setItem: () => {},\n    removeItem: () => {},\n    clear: () => {}\n  }\n  global.sessionStorage = global.sessionStorage || {\n    getItem: () => null,\n    setItem: () => {},\n    removeItem: () => {},\n    clear: () => {}\n  }\n  global.File = global.File || class File {}\n  global.StorageEvent = global.StorageEvent || class StorageEvent {}\n  global.requestAnimationFrame = global.requestAnimationFrame || (cb => setTimeout(cb, 16))\n}\n\n// 전역 에러 핸들러\r\n// 애플리케이션 전체에서 발생하는 에러를 중앙에서 처리\r\n\r\nconst { errorLogger  } = require('./ErrorLogger')\r\n\r\ninterface ErrorContext {\r\n  message: string\r\n  stack?: string\r\n  timestamp: Date\r\n  url: string\r\n  userAgent: string\r\n  userId?: string\r\n  sessionId?: string\r\n  componentStack?: string\r\n  errorType: \"javascript\" | \"network\" | \"promise\" | \"resource\"\r\n}\r\n\r\ninterface ErrorHandlerConfig {\r\n  enableConsoleLogging: boolean\r\n  enableServerReporting: boolean\r\n  enableUserNotification: boolean\r\n  maxErrorHistory: number\r\n}\r\n\r\n// 프로젝트 스타일에 맞는 에러 알림 컴포넌트\r\nclass ErrorNotification {\r\n  private static instance: ErrorNotification\r\n  private container: HTMLDivElement | null = null\r\n\r\n  static getInstance(): ErrorNotification {\r\n    if (!ErrorNotification.instance) {\r\n      ErrorNotification.instance = new ErrorNotification()\r\n    }\r\n    return ErrorNotification.instance\r\n  }\r\n\r\n  private createContainer(): HTMLDivElement {\r\n    if (this.container) {\r\n      return this.container\r\n    }\r\n\r\n    this.container = document.createElement(\"div\")\r\n    this.container.id = \"error-notification-container\"\r\n    this.container.style.cssText = `\r\n      position: fixed;\r\n      top: 20px;\r\n      right: 20px;\r\n      z-index: 10000;\r\n      display: flex;\r\n      flex-direction: column;\r\n      gap: 12px;\r\n      max-width: 400px;\r\n      font-family: Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\r\n    `\r\n\r\n    document.body.appendChild(this.container)\r\n    return this.container\r\n  }\r\n\r\n  show(\r\n    message: string,\r\n    type: \"error\" | \"warning\" | \"info\" = \"error\",\r\n    duration: number = 5000\r\n  ) {\r\n    const container = this.createContainer()\r\n    const notification = document.createElement(\"div\")\r\n\r\n    const getTypeStyles = () => {\r\n      switch (type) {\r\n        case \"error\":\r\n          return {\r\n            background:\r\n              \"linear-gradient(135deg, rgba(239, 68, 68, 0.95) 0%, rgba(220, 38, 38, 0.95) 100%)\",\r\n            borderColor: \"rgba(239, 68, 68, 0.3)\",\r\n            icon: \"❌\",\r\n          }\r\n        case \"warning\":\r\n          return {\r\n            background:\r\n              \"linear-gradient(135deg, rgba(245, 158, 11, 0.95) 0%, rgba(217, 119, 6, 0.95) 100%)\",\r\n            borderColor: \"rgba(245, 158, 11, 0.3)\",\r\n            icon: \"⚠️\",\r\n          }\r\n        case \"info\":\r\n          return {\r\n            background:\r\n              \"linear-gradient(135deg, rgba(59, 130, 246, 0.95) 0%, rgba(37, 99, 235, 0.95) 100%)\",\r\n            borderColor: \"rgba(59, 130, 246, 0.3)\",\r\n            icon: \"ℹ️\",\r\n          }\r\n      }\r\n    }\r\n\r\n    const styles = getTypeStyles()\r\n\r\n    notification.style.cssText = `\r\n      background: ${styles.background};\r\n      border: 1px solid ${styles.borderColor};\r\n      border-radius: 16px;\r\n      padding: 16px 20px;\r\n      color: white;\r\n      font-size: 14px;\r\n      font-weight: 500;\r\n      line-height: 1.5;\r\n      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);\r\n      backdrop-filter: blur(20px);\r\n      transform: translateX(100%);\r\n      opacity: 0;\r\n      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n      display: flex;\r\n      align-items: flex-start;\r\n      gap: 12px;\r\n      max-width: 100%;\r\n      word-wrap: break-word;\r\n    `\r\n\r\n    notification.innerHTML = `\r\n      <span style=\"font-size: 18px; flex-shrink: 0; margin-top: 1px;\">${styles.icon}</span>\r\n      <div style=\"flex: 1; min-width: 0;\">\r\n        <div style=\"margin-bottom: 4px; font-weight: 600; font-size: 15px;\">오류 알림</div>\r\n        <div>${message}</div>\r\n      </div>\r\n      <button style=\"\r\n        background: none;\r\n        border: none;\r\n        color: rgba(255, 255, 255, 0.8);\r\n        cursor: pointer;\r\n        font-size: 18px;\r\n        padding: 0;\r\n        margin: 0;\r\n        flex-shrink: 0;\r\n        transition: color 0.2s ease;\r\n      \" onclick=\"this.parentElement.remove()\">✕</button>\r\n    `\r\n\r\n    container.appendChild(notification)\r\n\r\n    // 애니메이션 효과\r\n    requestAnimationFrame(() => {\r\n      notification.style.transform = \"translateX(0)\"\r\n      notification.style.opacity = \"1\"\r\n    })\r\n\r\n    // 자동 제거\r\n    if (duration > 0) {\r\n      setTimeout(() => {\r\n        if (notification.parentElement) {\r\n          notification.style.transform = \"translateX(100%)\"\r\n          notification.style.opacity = \"0\"\r\n          setTimeout(() => {\r\n            if (notification.parentElement) {\r\n              notification.remove()\r\n            }\r\n          }, 300)\r\n        }\r\n      }, duration)\r\n    }\r\n\r\n    // 호버 효과\r\n    notification.addEventListener(\"mouseenter\", () => {\r\n      notification.style.transform = \"translateX(0) scale(1.02)\"\r\n    })\r\n\r\n    notification.addEventListener(\"mouseleave\", () => {\r\n      notification.style.transform = \"translateX(0) scale(1)\"\r\n    })\r\n  }\r\n\r\n  clear() {\r\n    if (this.container) {\r\n      this.container.innerHTML = \"\"\r\n    }\r\n  }\r\n}\r\n\r\nclass GlobalErrorHandler {\r\n  private errorHistory: ErrorContext[] = []\r\n  private config: ErrorHandlerConfig = {\r\n    enableConsoleLogging: true,\r\n    enableServerReporting: process.env.PROD,\r\n    enableUserNotification: true,\r\n    maxErrorHistory: 100,\r\n  }\r\n  private notification: ErrorNotification\r\n\r\n  constructor(config?: Partial<ErrorHandlerConfig>) {\r\n    this.config = { ...this.config, ...config }\r\n    this.notification = ErrorNotification.getInstance()\r\n    this.initialize()\r\n  }\r\n\r\n  private initialize() {\r\n    // JavaScript 에러 핸들러\r\n    window.addEventListener(\"error\", this.handleJavaScriptError.bind(this))\r\n\r\n    // Promise 에러 핸들러\r\n    window.addEventListener(\r\n      \"unhandledrejection\",\r\n      this.handlePromiseError.bind(this)\r\n    )\r\n\r\n    // 리소스 로딩 에러 핸들러\r\n    window.addEventListener(\"error\", this.handleResourceError.bind(this), true)\r\n\r\n    // 네트워크 에러 핸들러\r\n    this.setupNetworkErrorHandling()\r\n  }\r\n\r\n  private handleJavaScriptError(event: ErrorEvent) {\r\n    const errorContext: ErrorContext = {\r\n      message: event.message,\r\n      stack: event.error?.stack,\r\n      timestamp: new Date(),\r\n      url: window.location.href,\r\n      userAgent: navigator.userAgent,\r\n      userId: this.getUserId(),\r\n      sessionId: this.getSessionId(),\r\n      errorType: \"javascript\",\r\n    }\r\n\r\n    this.processError(errorContext, event.error || new Error(event.message))\r\n  }\r\n\r\n  private handlePromiseError(event: PromiseRejectionEvent) {\r\n    const error = event.reason\r\n    const errorContext: ErrorContext = {\r\n      message: error?.message || \"Unhandled Promise Rejection\",\r\n      stack: error?.stack,\r\n      timestamp: new Date(),\r\n      url: window.location.href,\r\n      userAgent: navigator.userAgent,\r\n      userId: this.getUserId(),\r\n      sessionId: this.getSessionId(),\r\n      errorType: \"promise\",\r\n    }\r\n\r\n    this.processError(\r\n      errorContext,\r\n      error instanceof Error ? error : new Error(String(error))\r\n    )\r\n  }\r\n\r\n  private handleResourceError(event: ErrorEvent) {\r\n    // 리소스 로딩 에러 (이미지, 스크립트, CSS 등)\r\n    if (event.target !== window) {\r\n      const target = event.target as HTMLElement\r\n      const errorContext: ErrorContext = {\r\n        message: `Failed to load resource: ${target.tagName} - ${(target as any).src || (target as any).href}`,\r\n        timestamp: new Date(),\r\n        url: window.location.href,\r\n        userAgent: navigator.userAgent,\r\n        userId: this.getUserId(),\r\n        sessionId: this.getSessionId(),\r\n        errorType: \"resource\",\r\n      }\r\n\r\n      this.processError(errorContext, new Error(errorContext.message))\r\n    }\r\n  }\r\n\r\n  private setupNetworkErrorHandling() {\r\n    // 네트워크 상태 모니터링\r\n    window.addEventListener(\"online\", () => {\r\n      console.log(\"Network connection restored\")\r\n    })\r\n\r\n    window.addEventListener(\"offline\", () => {\r\n      const errorContext: ErrorContext = {\r\n        message: \"Network connection lost\",\r\n        timestamp: new Date(),\r\n        url: window.location.href,\r\n        userAgent: navigator.userAgent,\r\n        userId: this.getUserId(),\r\n        sessionId: this.getSessionId(),\r\n        errorType: \"network\",\r\n      }\r\n\r\n      this.processError(errorContext, new Error(\"Network connection lost\"))\r\n    })\r\n\r\n    // fetch 요청 실패 감지\r\n    const originalFetch = window.fetch\r\n    window.fetch = async (...args) => {\r\n      try {\r\n        const response = await originalFetch(...args)\r\n        if (!response.ok) {\r\n          const errorContext: ErrorContext = {\r\n            message: `HTTP ${response.status}: ${response.statusText}`,\r\n            timestamp: new Date(),\r\n            url: window.location.href,\r\n            userAgent: navigator.userAgent,\r\n            userId: this.getUserId(),\r\n            sessionId: this.getSessionId(),\r\n            errorType: \"network\",\r\n          }\r\n\r\n          this.processError(errorContext, new Error(`HTTP ${response.status}`))\r\n        }\r\n        return response\r\n      } catch (error) {\r\n        const errorContext: ErrorContext = {\r\n          message: `Network request failed: ${error instanceof Error ? error.message : String(error)}`,\r\n          timestamp: new Date(),\r\n          url: window.location.href,\r\n          userAgent: navigator.userAgent,\r\n          userId: this.getUserId(),\r\n          sessionId: this.getSessionId(),\r\n          errorType: \"network\",\r\n        }\r\n\r\n        this.processError(\r\n          errorContext,\r\n          error instanceof Error ? error : new Error(String(error))\r\n        )\r\n        throw error\r\n      }\r\n    }\r\n  }\r\n\r\n  private processError(errorContext: ErrorContext, error: Error) {\r\n    // 에러 히스토리에 추가\r\n    this.errorHistory.push(errorContext)\r\n    if (this.errorHistory.length > this.config.maxErrorHistory) {\r\n      this.errorHistory.shift()\r\n    }\r\n\r\n    // 에러 로깅\r\n    if (this.config.enableConsoleLogging) {\r\n      this.logError(errorContext, error)\r\n    }\r\n\r\n    // 서버 리포팅\r\n    if (this.config.enableServerReporting) {\r\n      this.reportToServer(errorContext)\r\n    }\r\n\r\n    // 사용자 알림\r\n    if (this.config.enableUserNotification) {\r\n      this.notifyUser(errorContext)\r\n    }\r\n\r\n    // 에러 로거에 전달\r\n    errorLogger.logError(error, {\r\n      errorType: errorContext.errorType,\r\n      userId: errorContext.userId,\r\n      sessionId: errorContext.sessionId,\r\n      componentStack: errorContext.componentStack,\r\n      metadata: {\r\n        url: errorContext.url,\r\n        userAgent: errorContext.userAgent,\r\n        severity: this.getErrorSeverity(errorContext),\r\n      },\r\n    })\r\n  }\r\n\r\n  private getErrorSeverity(\r\n    errorContext: ErrorContext\r\n  ): \"low\" | \"medium\" | \"high\" | \"critical\" {\r\n    // 에러 타입과 메시지에 따라 심각도 결정\r\n    if (errorContext.errorType === \"network\") {\r\n      return \"high\"\r\n    }\r\n    if (errorContext.errorType === \"javascript\") {\r\n      if (errorContext.message.includes(\"ResizeObserver\")) {\r\n        return \"low\"\r\n      }\r\n      return \"medium\"\r\n    }\r\n    if (errorContext.errorType === \"resource\") {\r\n      return \"low\"\r\n    }\r\n    return \"medium\"\r\n  }\r\n\r\n  private logError(errorContext: ErrorContext, error: Error) {\r\n    console.group(\"🚨 Global Error Handler\")\r\n    console.error(\"Error:\", error)\r\n    console.error(\"Context:\", errorContext)\r\n    console.error(\"Timestamp:\", errorContext.timestamp.toISOString())\r\n    console.error(\"URL:\", errorContext.url)\r\n    console.error(\"User Agent:\", errorContext.userAgent)\r\n    if (errorContext.userId) {\r\n      console.error(\"User ID:\", errorContext.userId)\r\n    }\r\n    console.groupEnd()\r\n  }\r\n\r\n  private async reportToServer(errorContext: ErrorContext) {\r\n    try {\r\n      const reportData = {\r\n        ...errorContext,\r\n        timestamp: errorContext.timestamp.toISOString(),\r\n      }\r\n\r\n      // 에러 리포팅 API 호출 (실제 구현 시 활성화)\r\n      // await fetch(\"/api/errors\", {\r\n      //   method: \"POST\",\r\n      //   headers: { \"Content-Type\": \"application/json\" },\r\n      //   body: JSON.stringify(reportData),\r\n      // })\r\n\r\n      console.log(\"Error report sent to server:\", reportData)\r\n    } catch (reportError) {\r\n      console.error(\"Failed to report error to server:\", reportError)\r\n    }\r\n  }\r\n\r\n  private notifyUser(errorContext: ErrorContext) {\r\n    // 중요하지 않은 에러는 사용자에게 알리지 않음\r\n    if (this.shouldNotifyUser(errorContext)) {\r\n      this.showUserNotification(errorContext)\r\n    }\r\n  }\r\n\r\n  private shouldNotifyUser(errorContext: ErrorContext): boolean {\r\n    // 네트워크 에러나 중요한 JavaScript 에러만 사용자에게 알림\r\n    return (\r\n      errorContext.errorType === \"network\" ||\r\n      (errorContext.errorType === \"javascript\" &&\r\n        !errorContext.message.includes(\"ResizeObserver\"))\r\n    )\r\n  }\r\n\r\n  private showUserNotification(errorContext: ErrorContext) {\r\n    const message = this.getUserFriendlyMessage(errorContext)\r\n    const type = this.getNotificationType(errorContext)\r\n\r\n    this.notification.show(message, type, 6000)\r\n  }\r\n\r\n  private getNotificationType(\r\n    errorContext: ErrorContext\r\n  ): \"error\" | \"warning\" | \"info\" {\r\n    switch (errorContext.errorType) {\r\n      case \"network\":\r\n        return \"error\"\r\n      case \"javascript\":\r\n        return \"warning\"\r\n      case \"resource\":\r\n        return \"info\"\r\n      case \"promise\":\r\n        return \"warning\"\r\n      default:\r\n        return \"error\"\r\n    }\r\n  }\r\n\r\n  private getUserFriendlyMessage(errorContext: ErrorContext): string {\r\n    switch (errorContext.errorType) {\r\n      case \"network\":\r\n        return \"네트워크 연결에 문제가 있습니다. 인터넷 연결을 확인해주세요.\"\r\n      case \"resource\":\r\n        return \"일부 리소스를 불러오는데 실패했습니다.\"\r\n      case \"javascript\":\r\n        return \"애플리케이션에서 오류가 발생했습니다. 페이지를 새로고침해주세요.\"\r\n      case \"promise\":\r\n        return \"작업 처리 중 오류가 발생했습니다. 다시 시도해주세요.\"\r\n      default:\r\n        return \"예상치 못한 오류가 발생했습니다.\"\r\n    }\r\n  }\r\n\r\n  private getUserId(): string | undefined {\r\n    try {\r\n      const user = localStorage.getItem(\"user\")\r\n      if (user) {\r\n        const userData = JSON.parse(user)\r\n        return userData.id || userData.email\r\n      }\r\n    } catch {\r\n      // 파싱 에러 무시\r\n    }\r\n    return undefined\r\n  }\r\n\r\n  private getSessionId(): string | undefined {\r\n    return sessionStorage.getItem(\"sessionId\") || undefined\r\n  }\r\n\r\n  // 공개 메서드들\r\n  public getErrorHistory(): ErrorContext[] {\r\n    return [...this.errorHistory]\r\n  }\r\n\r\n  public clearErrorHistory(): void {\r\n    this.errorHistory = []\r\n  }\r\n\r\n  public updateConfig(newConfig: Partial<ErrorHandlerConfig>): void {\r\n    this.config = { ...this.config, ...newConfig }\r\n  }\r\n\r\n  public manualErrorReport(\r\n    error: Error,\r\n    context?: Partial<ErrorContext>\r\n  ): void {\r\n    const errorContext: ErrorContext = {\r\n      message: error.message,\r\n      stack: error.stack,\r\n      timestamp: new Date(),\r\n      url: window.location.href,\r\n      userAgent: navigator.userAgent,\r\n      userId: this.getUserId(),\r\n      sessionId: this.getSessionId(),\r\n      errorType: \"javascript\",\r\n      ...context,\r\n    }\r\n\r\n    this.processError(errorContext, error)\r\n  }\r\n\r\n  public showNotification(\r\n    message: string,\r\n    type?: \"error\" | \"warning\" | \"info\",\r\n    duration?: number\r\n  ) {\r\n    this.notification.show(message, type, duration)\r\n  }\r\n\r\n  public clearNotifications() {\r\n    this.notification.clear()\r\n  }\r\n}\r\n\r\n// 싱글톤 인스턴스\r\nexport const globalErrorHandler = new GlobalErrorHandler()\r\n\r\n// 편의 함수들\r\nexport const reportError = (error: Error, context?: Partial<ErrorContext>) => {\r\n  globalErrorHandler.manualErrorReport(error, context)\r\n}\r\n\r\nexport const getErrorHistory = () => globalErrorHandler.getErrorHistory()\r\n\r\nexport const clearErrorHistory = () => globalErrorHandler.clearErrorHistory()\r\n\r\nexport const showErrorNotification = (\r\n  message: string,\r\n  type?: \"error\" | \"warning\" | \"info\",\r\n  duration?: number\r\n) => {\r\n  globalErrorHandler.showNotification(message, type, duration)\r\n}\r\n\r\nmodule.exports.default = globalErrorHandler\r\n","timestamp":1759907919208}