{"key":"077b906d6315d348b9edff782719f5c7","result":"import React, { useState } from 'react'\r\nconst { RecaptchaEnterpriseButton, RecaptchaEnterpriseScript, useRecaptchaEnterprise  } = require('../shared/components/RecaptchaEnterpriseButton')\r\n\r\nconst RecaptchaTestPage: React.FC = () => {\r\n  const [testResults, setTestResults] = useState<any[]>([])\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const { isLoaded, isLoading: recaptchaLoading, executeRecaptcha } = useRecaptchaEnterprise()\r\n\r\n  const addTestResult = (result: any) => {\r\n    setTestResults(prev => [...prev, {\r\n      ...result,\r\n      timestamp: new Date().toLocaleString()\r\n    }])\r\n  }\r\n\r\n  const handleRecaptchaSuccess = async (token: string, action: string) => {\r\n    setIsLoading(true)\r\n    try {\r\n      const response = await fetch('/api/recaptcha/verify', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          token,\r\n          action\r\n        })\r\n      })\r\n\r\n      const result = await response.json()\r\n      \r\n      addTestResult({\r\n        action,\r\n        success: result.success,\r\n        score: result.score,\r\n        message: result.message || '검증 완료',\r\n        token: token.substring(0, 20) + '...'\r\n      })\r\n    } catch (error) {\r\n      addTestResult({\r\n        action,\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        token: token.substring(0, 20) + '...'\r\n      })\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  const handleRecaptchaError = (error: any, action: string) => {\r\n    addTestResult({\r\n      action,\r\n      success: false,\r\n      error: error.message || 'reCAPTCHA 실행 실패',\r\n      token: null\r\n    })\r\n  }\r\n\r\n  const testActions = [\r\n    { name: 'LOGIN', label: '로그인 테스트', minScore: 0.5 },\r\n    { name: 'REGISTER', label: '회원가입 테스트', minScore: 0.7 },\r\n    { name: 'SENSITIVE', label: '민감한 작업 테스트', minScore: 0.8 },\r\n    { name: 'ADMIN', label: '관리자 작업 테스트', minScore: 0.9 }\r\n  ]\r\n\r\n  const clearResults = () => {\r\n    setTestResults([])\r\n  }\r\n\r\n  return (\r\n    <div className=\"recaptcha-test-page\">\r\n      <RecaptchaEnterpriseScript />\r\n      \r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <h1 className=\"text-3xl font-bold mb-8\">reCAPTCHA Enterprise 테스트</h1>\r\n        \r\n        {/* 상태 표시 */}\r\n        <div className=\"mb-8 p-4 bg-gray-100 rounded-lg\">\r\n          <h2 className=\"text-xl font-semibold mb-4\">상태 정보</h2>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n            <div className=\"p-3 bg-white rounded\">\r\n              <div className=\"font-medium\">reCAPTCHA 로드 상태</div>\r\n              <div className={`text-sm ${isLoaded ? 'text-green-600' : 'text-red-600'}`}>\r\n                {recaptchaLoading ? '로딩 중...' : isLoaded ? '로드됨' : '로드 실패'}\r\n              </div>\r\n            </div>\r\n            <div className=\"p-3 bg-white rounded\">\r\n              <div className=\"font-medium\">사이트 키</div>\r\n              <div className=\"text-sm text-gray-600\">\r\n                {process.env.VITE_RECAPTCHA_SITE_KEY ? \r\n                  process.env.VITE_RECAPTCHA_SITE_KEY.substring(0, 20) + '...' : \r\n                  '설정되지 않음'\r\n                }\r\n              </div>\r\n            </div>\r\n            <div className=\"p-3 bg-white rounded\">\r\n              <div className=\"font-medium\">테스트 결과</div>\r\n              <div className=\"text-sm text-gray-600\">\r\n                {testResults.length}개 실행됨\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* 테스트 버튼들 */}\r\n        <div className=\"mb-8\">\r\n          <h2 className=\"text-xl font-semibold mb-4\">테스트 실행</h2>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n            {testActions.map(({ name, label, minScore }) => (\r\n              <div key={name} className=\"p-4 border rounded-lg\">\r\n                <h3 className=\"font-medium mb-2\">{label}</h3>\r\n                <p className=\"text-sm text-gray-600 mb-3\">\r\n                  최소 점수: {minScore}\r\n                </p>\r\n                <RecaptchaEnterpriseButton\r\n                  action={name}\r\n                  onSuccess={(token) => handleRecaptchaSuccess(token, name)}\r\n                  onError={(error) => handleRecaptchaError(error, name)}\r\n                  className=\"w-full bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:bg-gray-400\"\r\n                  disabled={!isLoaded || isLoading}\r\n                >\r\n                  {isLoading ? '처리 중...' : '테스트 실행'}\r\n                </RecaptchaEnterpriseButton>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* 훅을 사용한 테스트 */}\r\n        <div className=\"mb-8\">\r\n          <h2 className=\"text-xl font-semibold mb-4\">훅을 사용한 테스트</h2>\r\n          <div className=\"p-4 border rounded-lg\">\r\n            <button\r\n              onClick={async () => {\r\n                try {\r\n                  const token = await executeRecaptcha('HOOK_TEST')\r\n                  handleRecaptchaSuccess(token, 'HOOK_TEST')\r\n                } catch (error) {\r\n                  handleRecaptchaError(error, 'HOOK_TEST')\r\n                }\r\n              }}\r\n              disabled={!isLoaded || isLoading}\r\n              className=\"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 disabled:bg-gray-400\"\r\n            >\r\n              훅 테스트 실행\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* 결과 표시 */}\r\n        <div className=\"mb-8\">\r\n          <div className=\"flex justify-between items-center mb-4\">\r\n            <h2 className=\"text-xl font-semibold\">테스트 결과</h2>\r\n            <button\r\n              onClick={clearResults}\r\n              className=\"bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600\"\r\n            >\r\n              결과 지우기\r\n            </button>\r\n          </div>\r\n          \r\n          {testResults.length === 0 ? (\r\n            <div className=\"text-gray-500 text-center py-8\">\r\n              아직 테스트가 실행되지 않았습니다.\r\n            </div>\r\n          ) : (\r\n            <div className=\"space-y-4\">\r\n              {testResults.map((result, index) => (\r\n                <div\r\n                  key={index}\r\n                  className={`p-4 rounded-lg border ${\r\n                    result.success ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'\r\n                  }`}\r\n                >\r\n                  <div className=\"flex justify-between items-start mb-2\">\r\n                    <div className=\"font-medium\">\r\n                      {result.action} - {result.success ? '성공' : '실패'}\r\n                    </div>\r\n                    <div className=\"text-sm text-gray-500\">{result.timestamp}</div>\r\n                  </div>\r\n                  \r\n                  {result.success && (\r\n                    <div className=\"text-sm text-green-600\">\r\n                      점수: {result.score?.toFixed(3) || 'N/A'}\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {result.error && (\r\n                    <div className=\"text-sm text-red-600\">\r\n                      오류: {result.error}\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {result.message && (\r\n                    <div className=\"text-sm text-gray-600\">\r\n                      메시지: {result.message}\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {result.token && (\r\n                    <div className=\"text-xs text-gray-500 mt-1\">\r\n                      토큰: {result.token}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* 디버깅 정보 */}\r\n        <div className=\"mb-8\">\r\n          <h2 className=\"text-xl font-semibold mb-4\">디버깅 정보</h2>\r\n          <div className=\"p-4 bg-gray-100 rounded-lg\">\r\n            <pre className=\"text-sm overflow-auto\">\r\n              {JSON.stringify({\r\n                isLoaded,\r\n                isLoading: recaptchaLoading,\r\n                siteKey: process.env.VITE_RECAPTCHA_SITE_KEY,\r\n                backendUrl: process.env.VITE_BACKEND_URL,\r\n                testResultsCount: testResults.length\r\n              }, null, 2)}\r\n            </pre>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nmodule.exports.default = RecaptchaTestPage\r\n","timestamp":1759907919223}