{"key":"3acca76412c73eed47522991dd72cde2","result":"// Browser API polyfills for Node.js environment\nif (typeof window === 'undefined') {\n  global.window = global.window || {}\n  global.document = global.document || {}\n  global.localStorage = global.localStorage || {\n    getItem: () => null,\n    setItem: () => {},\n    removeItem: () => {},\n    clear: () => {}\n  }\n  global.sessionStorage = global.sessionStorage || {\n    getItem: () => null,\n    setItem: () => {},\n    removeItem: () => {},\n    clear: () => {}\n  }\n  global.File = global.File || class File {}\n  global.StorageEvent = global.StorageEvent || class StorageEvent {}\n  global.requestAnimationFrame = global.requestAnimationFrame || (cb => setTimeout(cb, 16))\n}\n\nimport React, { useState, useEffect } from 'react'\r\nconst { useNavigate  } = require('react-router-dom')\r\nconst { FaArrowLeft  } = require('react-icons/fa')\r\nconst DatePicker = require('react-datepicker').default\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nconst { useAccountRecovery  } = require('@features/auth/hooks/useAccountRecovery')\r\nconst { useAuthContext  } = require('@frontend/shared/contexts/AuthContext')\r\nconst { RecaptchaWidget  } = require('@frontend/shared/components/RecaptchaWidget')\r\nconst { showToast  } = require('@frontend/shared/lib')\r\nconst styles = require('./FindIdPage.module.css').default\r\n\r\n// 전화번호 포맷팅 유틸리티 함수\r\nfunction formatPhoneNumber(value: string): string {\r\n  // 숫자만 추출\r\n  const numbers = value.replace(/[^\\d]/g, '')\r\n\r\n  // 길이에 따라 포맷팅\r\n  if (numbers.length <= 3) {\r\n    return numbers\r\n  } else if (numbers.length <= 7) {\r\n    return `${numbers.slice(0, 3)}-${numbers.slice(3)}`\r\n  } else {\r\n    return `${numbers.slice(0, 3)}-${numbers.slice(3, 7)}-${numbers.slice(7, 11)}`\r\n  }\r\n}\r\n\r\nmodule.exports.default = function FindIdPage() {\r\n  const navigate = useNavigate()\r\n  const { isAuthenticated, isLoading } = useAuthContext()\r\n  const { state, findIdSimple, reset } = useAccountRecovery()\r\n\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    phone: '',\r\n    gender: '',\r\n    birthday: '',\r\n  })\r\n  const [recaptchaToken, setRecaptchaToken] = useState<string | null>(null)\r\n  const [errors, setErrors] = useState<{\r\n    name?: string\r\n    phone?: string\r\n    recaptcha?: string\r\n  }>({})\r\n\r\n  // 로그인된 상태에서 접근 시 메인페이지로 리다이렉트\r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n      console.log('🧪 이미 로그인된 상태 - 메인페이지로 리다이렉트')\r\n      navigate('/', { replace: true })\r\n    }\r\n  }, [isAuthenticated, navigate])\r\n\r\n  // DatePicker 네비게이션 아이콘 스타일 직접 적용\r\n  useEffect(() => {\r\n    const applyDatePickerStyles = () => {\r\n      const navigationIcons = document.querySelectorAll(\r\n        '.react-datepicker__navigation-icon'\r\n      )\r\n      const previousIcons = document.querySelectorAll(\r\n        '.react-datepicker__navigation-icon--previous'\r\n      )\r\n      const nextIcons = document.querySelectorAll(\r\n        '.react-datepicker__navigation-icon--next'\r\n      )\r\n\r\n      navigationIcons.forEach(icon => {\r\n        ;(icon as HTMLElement).style.position = 'absolute'\r\n        ;(icon as HTMLElement).style.top = '50%'\r\n        ;(icon as HTMLElement).style.left = '50%'\r\n      })\r\n\r\n      previousIcons.forEach(icon => {\r\n        ;(icon as HTMLElement).style.transform =\r\n          'translate(-50%, -50%) rotate(180deg)'\r\n      })\r\n\r\n      nextIcons.forEach(icon => {\r\n        ;(icon as HTMLElement).style.transform =\r\n          'translate(-50%, -50%) rotate(0deg)'\r\n      })\r\n    }\r\n\r\n    // 초기 적용\r\n    applyDatePickerStyles()\r\n\r\n    // MutationObserver로 DatePicker가 동적으로 생성될 때마다 스타일 적용\r\n    const observer = new MutationObserver(mutations => {\r\n      mutations.forEach(mutation => {\r\n        if (mutation.type === 'childList') {\r\n          const datepicker = document.querySelector('.react-datepicker')\r\n          if (datepicker) {\r\n            applyDatePickerStyles()\r\n          }\r\n        }\r\n      })\r\n    })\r\n\r\n    observer.observe(document.body, {\r\n      childList: true,\r\n      subtree: true,\r\n    })\r\n\r\n    return () => observer.disconnect()\r\n  }, [])\r\n\r\n  // 전화번호 입력 핸들러\r\n  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const formattedPhone = formatPhoneNumber(e.target.value)\r\n    setFormData(prev => ({ ...prev, phone: formattedPhone }))\r\n    if (errors.phone) {\r\n      setErrors(prev => ({ ...prev, phone: undefined }))\r\n    }\r\n  }\r\n\r\n  // 생년월일 변경 핸들러\r\n  const handleBirthdayChange = (date: Date | null) => {\r\n    if (date) {\r\n      const formattedDate = date.toISOString().split('T')[0]\r\n      setFormData(prev => ({ ...prev, birthday: formattedDate }))\r\n    } else {\r\n      setFormData(prev => ({ ...prev, birthday: '' }))\r\n    }\r\n  }\r\n\r\n  // 생년월일 직접 입력 핸들러\r\n  const handleBirthdayInputChange = (\r\n    e: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    let inputValue = e.target.value.replace(/[^\\d]/g, '') // 숫자만 추출\r\n\r\n    // 길이에 따라 포맷팅\r\n    if (inputValue.length <= 4) {\r\n      // 4자 이하일 때는 그대로 유지\r\n    } else if (inputValue.length <= 6) {\r\n      inputValue = `${inputValue.slice(0, 4)}-${inputValue.slice(4)}`\r\n    } else {\r\n      inputValue = `${inputValue.slice(0, 4)}-${inputValue.slice(4, 6)}-${inputValue.slice(6, 8)}`\r\n    }\r\n\r\n    setFormData(prev => ({ ...prev, birthday: inputValue }))\r\n  }\r\n\r\n  const validateForm = (): boolean => {\r\n    const newErrors: { name?: string; phone?: string; recaptcha?: string } = {}\r\n\r\n    if (!formData.name.trim()) {\r\n      newErrors.name = '이름을 입력해주세요.'\r\n    }\r\n\r\n    if (!formData.phone.trim()) {\r\n      newErrors.phone = '휴대폰 번호를 입력해주세요.'\r\n    } else if (\r\n      !/^01[0-9]-?[0-9]{3,4}-?[0-9]{4}$/.test(formData.phone.replace(/-/g, ''))\r\n    ) {\r\n      newErrors.phone = '유효한 휴대폰 번호를 입력해주세요.'\r\n    }\r\n\r\n    if (!recaptchaToken) {\r\n      newErrors.recaptcha = '보안 인증을 완료해주세요.'\r\n    }\r\n\r\n    setErrors(newErrors)\r\n    return Object.keys(newErrors).length === 0\r\n  }\r\n\r\n  const handleFindId = async () => {\r\n    if (!validateForm()) {\r\n      return\r\n    }\r\n\r\n    const submitData = {\r\n      name: formData.name.trim(),\r\n      phone: formData.phone.trim(),\r\n      gender: (formData.gender as 'male' | 'female' | 'other') || undefined,\r\n      birthday: formData.birthday || undefined,\r\n      recaptchaToken: recaptchaToken!,\r\n    }\r\n\r\n    console.log('🧪 아이디 찾기 요청:', submitData)\r\n\r\n    await findIdSimple(submitData)\r\n  }\r\n\r\n  const handleRecaptchaChange = (token: string | null) => {\r\n    // 개발 환경에서는 더미 토큰 사용\r\n    const finalToken = process.env.DEV\r\n      ? 'dummy-token-for-development'\r\n      : token\r\n\r\n    console.log('🧪 reCAPTCHA 토큰 변경:', {\r\n      originalToken: token,\r\n      finalToken,\r\n    })\r\n    setRecaptchaToken(finalToken)\r\n    // reCAPTCHA 완료 시 해당 에러 초기화\r\n    if (finalToken && errors.recaptcha) {\r\n      setErrors(prev => ({ ...prev, recaptcha: undefined }))\r\n    }\r\n  }\r\n\r\n  // 로딩 중일 때 스피너 표시\r\n  if (isLoading) {\r\n    return (\r\n      <div className={styles.pageWrapper}>\r\n        <div className={styles.findIdBox}>\r\n          <div style={{ textAlign: 'center', color: '#f1f3f5' }}>\r\n            <p>인증 확인 중...</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // 이미 로그인된 상태라면 로딩 화면 표시\r\n  if (isAuthenticated) {\r\n    return (\r\n      <div className={styles.pageWrapper}>\r\n        <div className={styles.findIdBox}>\r\n          <div style={{ textAlign: 'center', color: '#f1f3f5' }}>\r\n            <p>이미 로그인된 상태입니다.</p>\r\n            <p>메인페이지로 이동 중...</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // 결과 화면\r\n  if (state.step === 'result') {\r\n    return (\r\n      <div className={styles.pageWrapper}>\r\n        <div className={styles.findIdBox}>\r\n          <button\r\n            onClick={() => navigate('/login')}\r\n            className={styles.backButton}\r\n            aria-label=\"뒤로 가기\"\r\n          >\r\n            <FaArrowLeft />\r\n          </button>\r\n\r\n          <h1 className={styles.title}>아이디 찾기 완료</h1>\r\n          <p className={styles.description}>\r\n            입력하신 정보로 찾은 아이디입니다.\r\n          </p>\r\n\r\n          <div className={styles.resultContainer}>\r\n            <div className={styles.successMessage}>\r\n              <strong>찾은 아이디:</strong>\r\n              <br />\r\n              <span className={styles.foundId}>\r\n                {state.data?.username || '아이디를 찾을 수 없습니다.'}\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          <div className={styles.linkRow}>\r\n            <button onClick={() => reset('find-id')} className={styles.linkBtn}>\r\n              다시 시도\r\n            </button>\r\n            <button\r\n              onClick={() => navigate('/login')}\r\n              className={styles.linkBtn}\r\n            >\r\n              로그인으로 돌아가기\r\n            </button>\r\n            <button\r\n              onClick={() => navigate('/find-password')}\r\n              className={styles.linkBtn}\r\n            >\r\n              비밀번호 찾기\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={styles.pageWrapper}>\r\n      <div className={styles.findIdBox}>\r\n        <button\r\n          onClick={() => navigate('/login')}\r\n          className={styles.backButton}\r\n          aria-label=\"뒤로 가기\"\r\n        >\r\n          <FaArrowLeft />\r\n        </button>\r\n\r\n        <h1 className={styles.title}>아이디 찾기</h1>\r\n        <p className={styles.description}>\r\n          가입 시 입력한 정보로 아이디를 찾을 수 있습니다.\r\n        </p>\r\n\r\n        <div className={styles.inputGroup}>\r\n          <input\r\n            type=\"text\"\r\n            value={formData.name}\r\n            onChange={e => {\r\n              setFormData(prev => ({ ...prev, name: e.target.value }))\r\n              if (errors.name) {\r\n                setErrors(prev => ({ ...prev, name: undefined }))\r\n              }\r\n            }}\r\n            onKeyDown={e => {\r\n              if (e.key === 'Enter' && !state.loading) {\r\n                e.preventDefault()\r\n                handleFindId()\r\n              }\r\n            }}\r\n            placeholder=\"이름\"\r\n            className={`${styles.input} ${\r\n              errors.name ? styles.inputError : ''\r\n            }`}\r\n          />\r\n          {errors.name && (\r\n            <span className={styles.errorText}>{errors.name}</span>\r\n          )}\r\n        </div>\r\n\r\n        <div className={styles.inputGroup}>\r\n          <input\r\n            type=\"tel\"\r\n            value={formData.phone}\r\n            onChange={handlePhoneChange}\r\n            onKeyDown={e => {\r\n              if (e.key === 'Enter' && !state.loading) {\r\n                e.preventDefault()\r\n                handleFindId()\r\n              }\r\n            }}\r\n            placeholder=\"휴대폰 번호 (010-0000-0000)\"\r\n            className={`${styles.input} ${\r\n              errors.phone ? styles.inputError : ''\r\n            }`}\r\n            maxLength={13}\r\n          />\r\n          {errors.phone && (\r\n            <span className={styles.errorText}>{errors.phone}</span>\r\n          )}\r\n        </div>\r\n\r\n        <div className={styles.inputGroup}>\r\n          <select\r\n            value={formData.gender}\r\n            onChange={e =>\r\n              setFormData(prev => ({ ...prev, gender: e.target.value }))\r\n            }\r\n            className={styles.input}\r\n          >\r\n            <option value=\"\" disabled>\r\n              성별 선택 (선택사항)\r\n            </option>\r\n            <option value=\"male\">남성</option>\r\n            <option value=\"female\">여성</option>\r\n            <option value=\"other\">기타</option>\r\n          </select>\r\n        </div>\r\n\r\n        <div className={styles.inputGroup}>\r\n          <DatePicker\r\n            selected={formData.birthday ? new Date(formData.birthday) : null}\r\n            onChange={handleBirthdayChange}\r\n            dateFormat=\"yyyy-MM-dd\"\r\n            placeholderText=\"생년월일 (선택사항)\"\r\n            className={styles.input}\r\n            maxDate={new Date()}\r\n            showYearDropdown\r\n            showMonthDropdown\r\n            dropdownMode=\"select\"\r\n            yearDropdownItemNumber={100}\r\n            scrollableYearDropdown\r\n            isClearable\r\n            customInput={\r\n              <input\r\n                className={styles.input}\r\n                placeholder=\"생년월일 (선택사항)\"\r\n                value={formData.birthday}\r\n                onChange={handleBirthdayInputChange}\r\n              />\r\n            }\r\n          />\r\n        </div>\r\n\r\n        <div className={styles.recaptchaContainer}>\r\n          <RecaptchaWidget\r\n            onChange={handleRecaptchaChange}\r\n            className={styles.recaptchaWidget}\r\n            aria-describedby={errors.recaptcha ? 'recaptcha-error' : undefined}\r\n          />\r\n          {errors.recaptcha && (\r\n            <span id=\"recaptcha-error\" className={styles.errorText}>\r\n              {errors.recaptcha}\r\n            </span>\r\n          )}\r\n        </div>\r\n\r\n        {state.error && (\r\n          <div className={styles.errorMessage}>{state.error}</div>\r\n        )}\r\n\r\n        <button\r\n          onClick={handleFindId}\r\n          className={styles.findButton}\r\n          disabled={state.loading}\r\n          aria-describedby={state.loading ? 'loading-description' : undefined}\r\n        >\r\n          {state.loading ? '처리 중...' : '아이디 찾기'}\r\n        </button>\r\n        {state.loading && (\r\n          <span id=\"loading-description\" className=\"sr-only\">\r\n            아이디 찾기 처리 중입니다.\r\n          </span>\r\n        )}\r\n\r\n        <div className={styles.linkRow}>\r\n          <button onClick={() => navigate('/login')} className={styles.linkBtn}>\r\n            로그인으로 돌아가기\r\n          </button>\r\n          <button\r\n            onClick={() => navigate('/find-password')}\r\n            className={styles.linkBtn}\r\n          >\r\n            비밀번호 찾기\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","timestamp":1759820789660}