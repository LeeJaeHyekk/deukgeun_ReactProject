{"key":"8bc6d6191548ec1a2618e8bd7a5f39bc","result":"// Browser API polyfills for Node.js environment\nif (typeof window === 'undefined') {\n  global.window = global.window || {}\n  global.document = global.document || {}\n  global.localStorage = global.localStorage || {\n    getItem: () => null,\n    setItem: () => {},\n    removeItem: () => {},\n    clear: () => {}\n  }\n  global.sessionStorage = global.sessionStorage || {\n    getItem: () => null,\n    setItem: () => {},\n    removeItem: () => {},\n    clear: () => {}\n  }\n  global.File = global.File || class File {}\n  global.StorageEvent = global.StorageEvent || class StorageEvent {}\n  global.requestAnimationFrame = global.requestAnimationFrame || (cb => setTimeout(cb, 16))\n}\n\nimport React, { useState, useEffect } from \"react\"\r\nconst { useNavigate  } = require('react-router-dom')\r\nconst { FaArrowLeft  } = require('react-icons/fa')\r\nconst DatePicker = require('react-datepicker').default\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\nconst { useAuthContext  } = require('@frontend/shared/contexts/AuthContext')\r\nconst { useAccountRecovery  } = require('@features/auth/hooks/useAccountRecovery')\r\nconst { RecaptchaWidget  } = require('@frontend/shared/components/RecaptchaWidget')\r\nimport type {\r\n  ResetPasswordStep1Request,\r\n  ResetPasswordStep2Request,\r\n} from \"@features/auth/types/accountRecovery\"\r\nconst styles = require('./FindPasswordPage.module.css').default\r\n\r\n// 전화번호 포맷팅 유틸리티 함수\r\nfunction formatPhoneNumber(value: string): string {\r\n  // 숫자만 추출\r\n  const numbers = value.replace(/[^\\d]/g, \"\")\r\n\r\n  // 길이에 따라 포맷팅\r\n  if (numbers.length <= 3) {\r\n    return numbers\r\n  } else if (numbers.length <= 7) {\r\n    return `${numbers.slice(0, 3)}-${numbers.slice(3)}`\r\n  } else {\r\n    return `${numbers.slice(0, 3)}-${numbers.slice(3, 7)}-${numbers.slice(7, 11)}`\r\n  }\r\n}\r\n\r\nmodule.exports.default = function FindPasswordPage() {\r\n  const navigate = useNavigate()\r\n  const { isAuthenticated, isLoading } = useAuthContext()\r\n  const { state, resetPasswordSimpleStep1, resetPasswordSimpleStep2, reset } =\r\n    useAccountRecovery()\r\n\r\n  // Step 1: 사용자 인증 폼 데이터\r\n  const [step1Data, setStep1Data] = useState({\r\n    username: \"\",\r\n    name: \"\",\r\n    phone: \"\",\r\n    gender: \"\",\r\n    birthday: \"\",\r\n  })\r\n\r\n  // Step 2: 비밀번호 재설정 폼 데이터\r\n  const [step2Data, setStep2Data] = useState({\r\n    newPassword: \"\",\r\n    confirmPassword: \"\",\r\n  })\r\n\r\n  const [recaptchaToken, setRecaptchaToken] = useState<string | null>(null)\r\n  const [errors, setErrors] = useState<{\r\n    username?: string\r\n    name?: string\r\n    phone?: string\r\n    newPassword?: string\r\n    confirmPassword?: string\r\n    recaptcha?: string\r\n  }>({})\r\n\r\n  // 로그인 상태 확인\r\n  useEffect(() => {\r\n    if (!isLoading && isAuthenticated) {\r\n      navigate(\"/\")\r\n    }\r\n  }, [isAuthenticated, isLoading, navigate])\r\n\r\n  // DatePicker 네비게이션 아이콘 스타일 직접 적용\r\n  useEffect(() => {\r\n    const applyDatePickerStyles = () => {\r\n      const navigationIcons = document.querySelectorAll(\r\n        \".react-datepicker__navigation-icon\"\r\n      )\r\n      const previousIcons = document.querySelectorAll(\r\n        \".react-datepicker__navigation-icon--previous\"\r\n      )\r\n      const nextIcons = document.querySelectorAll(\r\n        \".react-datepicker__navigation-icon--next\"\r\n      )\r\n\r\n      navigationIcons.forEach(icon => {\r\n        ;(icon as HTMLElement).style.position = \"absolute\"\r\n        ;(icon as HTMLElement).style.top = \"50%\"\r\n        ;(icon as HTMLElement).style.left = \"50%\"\r\n      })\r\n\r\n      previousIcons.forEach(icon => {\r\n        ;(icon as HTMLElement).style.transform =\r\n          \"translate(-50%, -50%) rotate(180deg)\"\r\n      })\r\n\r\n      nextIcons.forEach(icon => {\r\n        ;(icon as HTMLElement).style.transform =\r\n          \"translate(-50%, -50%) rotate(0deg)\"\r\n      })\r\n    }\r\n\r\n    // 초기 적용\r\n    applyDatePickerStyles()\r\n\r\n    // MutationObserver로 DatePicker가 동적으로 생성될 때마다 스타일 적용\r\n    const observer = new MutationObserver(mutations => {\r\n      mutations.forEach(mutation => {\r\n        if (mutation.type === \"childList\") {\r\n          const datepicker = document.querySelector(\".react-datepicker\")\r\n          if (datepicker) {\r\n            applyDatePickerStyles()\r\n          }\r\n        }\r\n      })\r\n    })\r\n\r\n    observer.observe(document.body, {\r\n      childList: true,\r\n      subtree: true,\r\n    })\r\n\r\n    return () => observer.disconnect()\r\n  }, [])\r\n\r\n  // 전화번호 입력 핸들러\r\n  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const formattedPhone = formatPhoneNumber(e.target.value)\r\n    setStep1Data(prev => ({ ...prev, phone: formattedPhone }))\r\n    if (errors.phone) {\r\n      setErrors(prev => ({ ...prev, phone: undefined }))\r\n    }\r\n  }\r\n\r\n  // 생년월일 변경 핸들러\r\n  const handleBirthdayChange = (date: Date | null) => {\r\n    if (date) {\r\n      const formattedDate = date.toISOString().split(\"T\")[0]\r\n      setStep1Data(prev => ({ ...prev, birthday: formattedDate }))\r\n    } else {\r\n      setStep1Data(prev => ({ ...prev, birthday: \"\" }))\r\n    }\r\n  }\r\n\r\n  // 생년월일 직접 입력 핸들러\r\n  const handleBirthdayInputChange = (\r\n    e: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    let inputValue = e.target.value.replace(/[^\\d]/g, \"\") // 숫자만 추출\r\n\r\n    // 길이에 따라 포맷팅\r\n    if (inputValue.length <= 4) {\r\n      // 4자 이하일 때는 그대로 유지\r\n    } else if (inputValue.length <= 6) {\r\n      inputValue = `${inputValue.slice(0, 4)}-${inputValue.slice(4)}`\r\n    } else {\r\n      inputValue = `${inputValue.slice(0, 4)}-${inputValue.slice(4, 6)}-${inputValue.slice(6, 8)}`\r\n    }\r\n\r\n    setStep1Data(prev => ({ ...prev, birthday: inputValue }))\r\n  }\r\n\r\n  // reCAPTCHA 변경 핸들러\r\n  const handleRecaptchaChange = (token: string | null) => {\r\n    // 개발 환경에서는 더미 토큰 사용\r\n    const finalToken = process.env.DEV\r\n      ? \"dummy-token-for-development\"\r\n      : token\r\n\r\n    console.log(\"🧪 reCAPTCHA 토큰 변경:\", {\r\n      originalToken: token,\r\n      finalToken,\r\n    })\r\n    setRecaptchaToken(finalToken)\r\n    if (errors.recaptcha) {\r\n      setErrors(prev => ({ ...prev, recaptcha: undefined }))\r\n    }\r\n  }\r\n\r\n  // Step 1 검증\r\n  const validateStep1 = () => {\r\n    const newErrors: typeof errors = {}\r\n\r\n    if (!step1Data.username.trim()) {\r\n      newErrors.username = \"아이디를 입력하세요.\"\r\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(step1Data.username)) {\r\n      newErrors.username = \"유효한 이메일 주소를 입력하세요.\"\r\n    }\r\n\r\n    if (!step1Data.name.trim()) {\r\n      newErrors.name = \"이름을 입력하세요.\"\r\n    } else if (step1Data.name.trim().length < 2) {\r\n      newErrors.name = \"이름은 2자 이상이어야 합니다.\"\r\n    }\r\n\r\n    if (!step1Data.phone.trim()) {\r\n      newErrors.phone = \"휴대폰 번호를 입력하세요.\"\r\n    } else if (\r\n      !/^01[0-9]-?[0-9]{3,4}-?[0-9]{4}$/.test(step1Data.phone.replace(/-/g, \"\"))\r\n    ) {\r\n      newErrors.phone = \"유효한 휴대폰 번호를 입력하세요.\"\r\n    }\r\n\r\n    if (!recaptchaToken) {\r\n      newErrors.recaptcha = \"reCAPTCHA를 완료해주세요.\"\r\n    }\r\n\r\n    setErrors(newErrors)\r\n    return Object.keys(newErrors).length === 0\r\n  }\r\n\r\n  // Step 2 검증\r\n  const validateStep2 = () => {\r\n    const newErrors: typeof errors = {}\r\n\r\n    if (!step2Data.newPassword) {\r\n      newErrors.newPassword = \"새 비밀번호를 입력하세요.\"\r\n    } else if (step2Data.newPassword.length < 8) {\r\n      newErrors.newPassword = \"비밀번호는 최소 8자 이상이어야 합니다.\"\r\n    } else if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/.test(step2Data.newPassword)) {\r\n      newErrors.newPassword =\r\n        \"비밀번호는 영문 대소문자와 숫자를 포함해야 합니다.\"\r\n    }\r\n\r\n    if (!step2Data.confirmPassword) {\r\n      newErrors.confirmPassword = \"비밀번호 확인을 입력하세요.\"\r\n    } else if (step2Data.newPassword !== step2Data.confirmPassword) {\r\n      newErrors.confirmPassword = \"비밀번호가 일치하지 않습니다.\"\r\n    }\r\n\r\n    if (!recaptchaToken) {\r\n      newErrors.recaptcha = \"reCAPTCHA를 완료해주세요.\"\r\n    }\r\n\r\n    setErrors(newErrors)\r\n    return Object.keys(newErrors).length === 0\r\n  }\r\n\r\n  // Step 1 제출\r\n  const handleStep1Submit = async () => {\r\n    if (!validateStep1()) return\r\n\r\n    try {\r\n      await resetPasswordSimpleStep1({\r\n        username: step1Data.username,\r\n        name: step1Data.name,\r\n        phone: step1Data.phone,\r\n        gender: step1Data.gender as \"male\" | \"female\" | \"other\",\r\n        birthday: step1Data.birthday,\r\n        recaptchaToken: recaptchaToken!,\r\n      })\r\n    } catch (error) {\r\n      console.error(\"Step 1 오류:\", error)\r\n    }\r\n  }\r\n\r\n  // Step 2 제출\r\n  const handleStep2Submit = async () => {\r\n    if (!validateStep2()) return\r\n\r\n    try {\r\n      await resetPasswordSimpleStep2({\r\n        username: step1Data.username,\r\n        code: \"000000\", // 더미 인증 코드\r\n        newPassword: step2Data.newPassword,\r\n        confirmPassword: step2Data.confirmPassword,\r\n        recaptchaToken: recaptchaToken!,\r\n      })\r\n    } catch (error) {\r\n      console.error(\"Step 2 오류:\", error)\r\n    }\r\n  }\r\n\r\n  // 로딩 중이거나 로그인 상태 확인 중\r\n  if (isLoading) {\r\n    return (\r\n      <div className={styles.pageWrapper}>\r\n        <div className={styles.findPasswordBox}>\r\n          <div className={styles.loadingMessage}>로딩 중...</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // 결과 화면\r\n  if (state.step === \"result\") {\r\n    return (\r\n      <div className={styles.pageWrapper}>\r\n        <div className={styles.findPasswordBox}>\r\n          <button\r\n            onClick={() => navigate(\"/login\")}\r\n            className={styles.backButton}\r\n            aria-label=\"뒤로 가기\"\r\n          >\r\n            <FaArrowLeft />\r\n          </button>\r\n\r\n          <h1 className={styles.title}>비밀번호 재설정 완료</h1>\r\n          <p className={styles.description}>\r\n            비밀번호가 성공적으로 재설정되었습니다.\r\n          </p>\r\n\r\n          <div className={styles.resultContainer}>\r\n            <div className={styles.successMessage}>\r\n              <strong>비밀번호 재설정 완료!</strong>\r\n              <br />\r\n              <span className={styles.foundId}>\r\n                새로운 비밀번호로 로그인하실 수 있습니다.\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          <div className={styles.linkRow}>\r\n            <button\r\n              onClick={() => reset(\"reset-password\")}\r\n              className={styles.linkBtn}\r\n            >\r\n              다시 시도\r\n            </button>\r\n            <button\r\n              onClick={() => navigate(\"/login\")}\r\n              className={styles.linkBtn}\r\n            >\r\n              로그인으로 돌아가기\r\n            </button>\r\n            <button\r\n              onClick={() => navigate(\"/find-id\")}\r\n              className={styles.linkBtn}\r\n            >\r\n              아이디 찾기\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Step 2: 비밀번호 재설정 화면\r\n  if (state.step === \"verification\") {\r\n    return (\r\n      <div className={styles.pageWrapper}>\r\n        <div className={styles.findPasswordBox}>\r\n          <button\r\n            onClick={() => reset(\"reset-password\")}\r\n            className={styles.backButton}\r\n            aria-label=\"뒤로 가기\"\r\n          >\r\n            <FaArrowLeft />\r\n          </button>\r\n\r\n          <h1 className={styles.title}>비밀번호 재설정</h1>\r\n          <p className={styles.description}>새 비밀번호를 설정하세요.</p>\r\n\r\n          {/* 새 비밀번호 입력 */}\r\n          <div className={styles.inputGroup}>\r\n            <input\r\n              type=\"password\"\r\n              value={step2Data.newPassword}\r\n              onChange={e => {\r\n                setStep2Data(prev => ({ ...prev, newPassword: e.target.value }))\r\n                if (errors.newPassword) {\r\n                  setErrors(prev => ({ ...prev, newPassword: undefined }))\r\n                }\r\n              }}\r\n              className={styles.input}\r\n              placeholder=\"새 비밀번호\"\r\n            />\r\n            {errors.newPassword && (\r\n              <span className={styles.errorText}>{errors.newPassword}</span>\r\n            )}\r\n          </div>\r\n\r\n          {/* 비밀번호 확인 입력 */}\r\n          <div className={styles.inputGroup}>\r\n            <input\r\n              type=\"password\"\r\n              value={step2Data.confirmPassword}\r\n              onChange={e => {\r\n                setStep2Data(prev => ({\r\n                  ...prev,\r\n                  confirmPassword: e.target.value,\r\n                }))\r\n                if (errors.confirmPassword) {\r\n                  setErrors(prev => ({ ...prev, confirmPassword: undefined }))\r\n                }\r\n              }}\r\n              className={styles.input}\r\n              placeholder=\"비밀번호 확인\"\r\n            />\r\n            {errors.confirmPassword && (\r\n              <span className={styles.errorText}>{errors.confirmPassword}</span>\r\n            )}\r\n          </div>\r\n\r\n          {/* reCAPTCHA */}\r\n          <div className={styles.inputGroup}>\r\n            <RecaptchaWidget\r\n              onChange={handleRecaptchaChange}\r\n              className={styles.recaptchaWidget}\r\n            />\r\n            {errors.recaptcha && (\r\n              <span className={styles.errorText}>{errors.recaptcha}</span>\r\n            )}\r\n          </div>\r\n\r\n          {state.error && (\r\n            <div className={styles.errorMessage}>{state.error}</div>\r\n          )}\r\n\r\n          <button\r\n            onClick={handleStep2Submit}\r\n            className={styles.findButton}\r\n            disabled={state.loading}\r\n          >\r\n            {state.loading ? \"처리 중...\" : \"비밀번호 재설정\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Step 1: 사용자 인증 화면 (기본)\r\n  return (\r\n    <div className={styles.pageWrapper}>\r\n      <div className={styles.findPasswordBox}>\r\n        <button\r\n          onClick={() => navigate(\"/login\")}\r\n          className={styles.backButton}\r\n          aria-label=\"뒤로 가기\"\r\n        >\r\n          <FaArrowLeft />\r\n        </button>\r\n\r\n        <h1 className={styles.title}>비밀번호 찾기</h1>\r\n        <p className={styles.description}>가입 시 입력한 정보를 입력하세요.</p>\r\n\r\n        {/* 아이디 입력 */}\r\n        <div className={styles.inputGroup}>\r\n          <input\r\n            type=\"email\"\r\n            value={step1Data.username}\r\n            onChange={e => {\r\n              setStep1Data(prev => ({ ...prev, username: e.target.value }))\r\n              if (errors.username) {\r\n                setErrors(prev => ({ ...prev, username: undefined }))\r\n              }\r\n            }}\r\n            className={styles.input}\r\n            placeholder=\"아이디 (이메일)\"\r\n          />\r\n          {errors.username && (\r\n            <span className={styles.errorText}>{errors.username}</span>\r\n          )}\r\n        </div>\r\n\r\n        {/* 이름 입력 */}\r\n        <div className={styles.inputGroup}>\r\n          <input\r\n            type=\"text\"\r\n            value={step1Data.name}\r\n            onChange={e => {\r\n              setStep1Data(prev => ({ ...prev, name: e.target.value }))\r\n              if (errors.name) {\r\n                setErrors(prev => ({ ...prev, name: undefined }))\r\n              }\r\n            }}\r\n            className={styles.input}\r\n            placeholder=\"이름\"\r\n          />\r\n          {errors.name && (\r\n            <span className={styles.errorText}>{errors.name}</span>\r\n          )}\r\n        </div>\r\n\r\n        {/* 휴대폰 번호 입력 */}\r\n        <div className={styles.inputGroup}>\r\n          <input\r\n            type=\"tel\"\r\n            value={step1Data.phone}\r\n            onChange={handlePhoneChange}\r\n            className={styles.input}\r\n            placeholder=\"휴대폰 번호 (010-1234-5678)\"\r\n            maxLength={13}\r\n          />\r\n          {errors.phone && (\r\n            <span className={styles.errorText}>{errors.phone}</span>\r\n          )}\r\n        </div>\r\n\r\n        {/* 성별 선택 */}\r\n        <div className={styles.inputGroup}>\r\n          <select\r\n            value={step1Data.gender}\r\n            onChange={e => {\r\n              setStep1Data(prev => ({ ...prev, gender: e.target.value }))\r\n            }}\r\n            className={styles.input}\r\n          >\r\n            <option value=\"\" disabled>\r\n              성별 선택 (선택사항)\r\n            </option>\r\n            <option value=\"male\">남성</option>\r\n            <option value=\"female\">여성</option>\r\n            <option value=\"other\">기타</option>\r\n          </select>\r\n        </div>\r\n\r\n        {/* 생년월일 입력 */}\r\n        <div className={styles.inputGroup}>\r\n          <DatePicker\r\n            selected={step1Data.birthday ? new Date(step1Data.birthday) : null}\r\n            onChange={handleBirthdayChange}\r\n            dateFormat=\"yyyy-MM-dd\"\r\n            placeholderText=\"생년월일 (선택사항)\"\r\n            className={styles.input}\r\n            maxDate={new Date()}\r\n            showYearDropdown\r\n            showMonthDropdown\r\n            dropdownMode=\"select\"\r\n            yearDropdownItemNumber={100}\r\n            scrollableYearDropdown\r\n            isClearable\r\n            customInput={\r\n              <input\r\n                className={styles.input}\r\n                placeholder=\"생년월일 (선택사항)\"\r\n                value={step1Data.birthday}\r\n                onChange={handleBirthdayInputChange}\r\n              />\r\n            }\r\n          />\r\n        </div>\r\n\r\n        {/* reCAPTCHA */}\r\n        <div className={styles.inputGroup}>\r\n          <RecaptchaWidget\r\n            onChange={handleRecaptchaChange}\r\n            className={styles.recaptchaWidget}\r\n          />\r\n          {errors.recaptcha && (\r\n            <span className={styles.errorText}>{errors.recaptcha}</span>\r\n          )}\r\n        </div>\r\n\r\n        {state.error && (\r\n          <div className={styles.errorMessage}>{state.error}</div>\r\n        )}\r\n\r\n        <button\r\n          onClick={handleStep1Submit}\r\n          className={styles.findButton}\r\n          disabled={state.loading}\r\n        >\r\n          {state.loading ? \"처리 중...\" : \"사용자 인증\"}\r\n        </button>\r\n\r\n        <div className={styles.linkRow}>\r\n          <button onClick={() => navigate(\"/login\")} className={styles.linkBtn}>\r\n            로그인으로 돌아가기\r\n          </button>\r\n          <button\r\n            onClick={() => navigate(\"/find-id\")}\r\n            className={styles.linkBtn}\r\n          >\r\n            아이디 찾기\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","timestamp":1759820789668}