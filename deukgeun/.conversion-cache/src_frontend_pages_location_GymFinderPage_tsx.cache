{"key":"51245a077fe9930ca8dd88ecb07f2c19","result":"// Browser API polyfills for Node.js environment\nif (typeof window === 'undefined') {\n  global.window = global.window || {}\n  global.document = global.document || {}\n  global.localStorage = global.localStorage || {\n    getItem: () => null,\n    setItem: () => {},\n    removeItem: () => {},\n    clear: () => {}\n  }\n  global.sessionStorage = global.sessionStorage || {\n    getItem: () => null,\n    setItem: () => {},\n    removeItem: () => {},\n    clear: () => {}\n  }\n  global.File = global.File || class File {}\n  global.StorageEvent = global.StorageEvent || class StorageEvent {}\n  global.requestAnimationFrame = global.requestAnimationFrame || (cb => setTimeout(cb, 16))\n}\n\nconst { useState, useEffect, useMemo, useRef  } = require('react')\r\nconst styles = require('./GymFinderPage.module.css').default\r\nconst { Navigation  } = require('@widgets/Navigation/Navigation')\r\nconst { SearchBar  } = require('./components/Map/SearchBar')\r\nconst { FilterTag  } = require('./components/FilterTag/FilterTag')\r\nconst { GymList  } = require('./components/Map/GymList')\r\nconst { fetchGymsByKeyword  } = require('./API/kakao')\r\nconst { Gym, FilterOption, SortOption, SortDirection  } = require('./types')\r\nconst { useAuth  } = require('@shared/hooks/useAuth')\r\nconst { useNavigate  } = require('react-router-dom')\r\nconst { processGyms  } = require('./utils/gymFilters')\r\n\r\n// 전역 선언\r\ndeclare global {\r\n  interface Window {\r\n    kakao: any\r\n  }\r\n}\r\n\r\nconst filters: FilterOption[] = [\"PT\", \"GX\", \"24시간\", \"주차\", \"샤워\"]\r\n\r\nmodule.exports.default = function GymFinderPage() {\r\n  const [gyms, setGyms] = useState<Gym[]>([])\r\n  const [position, setPosition] = useState<{ lat: number; lng: number } | null>(\r\n    null\r\n  )\r\n  const [activeFilters, setActiveFilters] = useState<FilterOption[]>([])\r\n  const [sortBy, setSortBy] = useState<SortOption>(\"distance\")\r\n  const [sortDirection, setSortDirection] = useState<SortDirection>(\"asc\")\r\n  const [isMapLoaded, setIsMapLoaded] = useState(false)\r\n  const [maxDistance, setMaxDistance] = useState<number>(5) // 기본 5km\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const navigate = useNavigate()\r\n  const { isAuthenticated } = useAuth()\r\n\r\n  // 맵 관련 refs\r\n  const mapRef = useRef<any>(null)\r\n  const currentLocationMarkerRef = useRef<any>(null)\r\n  const gymMarkersRef = useRef<any[]>([])\r\n\r\n  const kakaoApiKey = process.env.VITE_LOCATION_JAVASCRIPT_MAP_API_KEY\r\n\r\n  console.log(\"🧪 GymFinderPage 렌더링\")\r\n  console.log(\"🧪 현재 gyms 상태:\", gyms.length, \"개\")\r\n  console.log(\"🧪 현재 position:\", position)\r\n\r\n  // 로그인 상태 확인 및 현재 위치 가져오기\r\n  useEffect(() => {\r\n    console.log(\"🧪 위치 정보 가져오기 시작\")\r\n    if (!isAuthenticated) {\r\n      console.log(\"🧪 로그인되지 않음, 로그인 페이지로 이동\")\r\n      navigate(\"/login\")\r\n      return\r\n    }\r\n\r\n    if (!navigator.geolocation) {\r\n      console.error(\"Geolocation을 지원하지 않는 브라우저입니다.\")\r\n      return\r\n    }\r\n\r\n    navigator.geolocation.getCurrentPosition(\r\n      pos => {\r\n        const currentPos = {\r\n          lat: pos.coords.latitude,\r\n          lng: pos.coords.longitude,\r\n        }\r\n        console.log(\"🧪 위치 정보 획득:\", currentPos)\r\n        setPosition(currentPos)\r\n      },\r\n      error => {\r\n        console.error(\"위치 정보를 가져오지 못했습니다.\", error)\r\n      }\r\n    )\r\n  }, [isAuthenticated, navigate])\r\n\r\n  // 위치가 설정되면 기본 헬스장 검색 실행\r\n  useEffect(() => {\r\n    if (position && gyms.length === 0) {\r\n      console.log(\"🧪 위치 설정됨, 기본 헬스장 검색 시작\")\r\n      handleSearch(\"헬스장\")\r\n    }\r\n  }, [position])\r\n\r\n  // Kakao Maps SDK 로드 및 맵 초기화\r\n  useEffect(() => {\r\n    if (!position || isMapLoaded) return\r\n    if (!kakaoApiKey) {\r\n      console.error(\"⚠️ Kakao API Key가 .env에 설정되지 않았습니다.\")\r\n      return\r\n    }\r\n\r\n    const loadKakaoMap = (): Promise<void> => {\r\n      return new Promise((resolve, reject) => {\r\n        if (window.kakao && window.kakao.maps) {\r\n          resolve()\r\n        } else {\r\n          const existingScript = document.getElementById(\"kakao-map-sdk-script\")\r\n          if (existingScript) {\r\n            existingScript.addEventListener(\"load\", () => resolve())\r\n            existingScript.addEventListener(\"error\", () => reject())\r\n            return\r\n          }\r\n\r\n          const script = document.createElement(\"script\")\r\n          script.id = \"kakao-map-sdk-script\"\r\n          script.src = `https://dapi.kakao.com/v2/maps/sdk.js?appkey=${kakaoApiKey}&autoload=false`\r\n          script.async = true\r\n\r\n          script.onload = () => resolve()\r\n          script.onerror = error => reject(error)\r\n\r\n          document.head.appendChild(script)\r\n        }\r\n      })\r\n    }\r\n\r\n    const initializeMap = () => {\r\n      const container = document.getElementById(\"kakao-map\")\r\n      if (!container) {\r\n        console.error(\"카카오맵 컨테이너가 존재하지 않습니다.\")\r\n        return\r\n      }\r\n\r\n      const options = {\r\n        center: new window.kakao.maps.LatLng(position.lat, position.lng),\r\n        level: 3,\r\n      }\r\n\r\n      mapRef.current = new window.kakao.maps.Map(container, options)\r\n\r\n      // 현재 위치 마커 추가\r\n      addCurrentLocationMarker()\r\n\r\n      setIsMapLoaded(true)\r\n    }\r\n\r\n    loadKakaoMap()\r\n      .then(() => {\r\n        window.kakao.maps.load(initializeMap)\r\n      })\r\n      .catch(err => {\r\n        console.error(\"❌ Kakao Maps SDK 로딩 실패:\", err)\r\n      })\r\n\r\n    return () => {\r\n      const script = document.getElementById(\"kakao-map-sdk-script\")\r\n      if (script) script.remove()\r\n    }\r\n  }, [position, isMapLoaded, kakaoApiKey])\r\n\r\n  // 현재 위치 마커 추가 함수\r\n  const addCurrentLocationMarker = () => {\r\n    if (!mapRef.current || !position) return\r\n\r\n    // 기존 현재 위치 마커 제거\r\n    if (currentLocationMarkerRef.current) {\r\n      currentLocationMarkerRef.current.setMap(null)\r\n    }\r\n\r\n    // 현재 위치 마커 생성 (파란색 원형 마커)\r\n    const currentLocationMarker = new window.kakao.maps.Marker({\r\n      position: new window.kakao.maps.LatLng(position.lat, position.lng),\r\n      map: mapRef.current,\r\n    })\r\n\r\n    // 현재 위치 마커 스타일 설정\r\n    const currentLocationImage = new window.kakao.maps.MarkerImage(\r\n      \"data:image/svg+xml;base64,\" +\r\n        btoa(`\r\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <circle cx=\"16\" cy=\"16\" r=\"14\" fill=\"#d1d5db\" stroke=\"white\" stroke-width=\"3\"/>\r\n          <circle cx=\"16\" cy=\"16\" r=\"8\" fill=\"white\"/>\r\n          <circle cx=\"16\" cy=\"16\" r=\"4\" fill=\"#374151\"/>\r\n        </svg>\r\n      `),\r\n      new window.kakao.maps.Size(32, 32)\r\n    )\r\n\r\n    currentLocationMarker.setImage(currentLocationImage)\r\n    currentLocationMarkerRef.current = currentLocationMarker\r\n\r\n    // 현재 위치 인포윈도우 추가\r\n    const infowindow = new window.kakao.maps.InfoWindow({\r\n      content:\r\n        '<div style=\"padding:8px 12px;font-size:14px;font-weight:600;background:#d1d5db;color:#374151;border-radius:8px;box-shadow:0 2px 8px rgba(0,0,0,0.2);\">📍 현재 위치</div>',\r\n    })\r\n\r\n    window.kakao.maps.event.addListener(\r\n      currentLocationMarker,\r\n      \"click\",\r\n      function () {\r\n        infowindow.open(mapRef.current, currentLocationMarker)\r\n      }\r\n    )\r\n  }\r\n\r\n  // 헬스장 마커 추가 함수\r\n  const addGymMarkers = () => {\r\n    if (!mapRef.current || !gyms.length) return\r\n\r\n    // 기존 헬스장 마커들 제거\r\n    gymMarkersRef.current.forEach(marker => {\r\n      marker.setMap(null)\r\n    })\r\n    gymMarkersRef.current = []\r\n\r\n    // 헬스장 마커들 추가\r\n    gyms.forEach((gym, index) => {\r\n      const marker = new window.kakao.maps.Marker({\r\n        position: new window.kakao.maps.LatLng(gym.latitude, gym.longitude),\r\n        map: mapRef.current,\r\n      })\r\n\r\n      // 헬스장 마커 스타일 설정 (빨간색 핀)\r\n      const gymImage = new window.kakao.maps.MarkerImage(\r\n        \"data:image/svg+xml;base64,\" +\r\n          btoa(`\r\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7z\" fill=\"#EA4335\"/>\r\n            <circle cx=\"12\" cy=\"9\" r=\"2.5\" fill=\"white\"/>\r\n          </svg>\r\n        `),\r\n        new window.kakao.maps.Size(24, 24)\r\n      )\r\n\r\n      marker.setImage(gymImage)\r\n\r\n      // 헬스장 인포윈도우 생성\r\n      const infowindow = new window.kakao.maps.InfoWindow({\r\n        content: `\r\n          <div style=\"padding:10px;min-width:200px;\">\r\n            <h3 style=\"margin:0 0 5px 0;font-size:14px;font-weight:bold;\">${\r\n              gym.name\r\n            }</h3>\r\n            <p style=\"margin:0 0 3px 0;font-size:12px;color:#666;\">${\r\n              gym.address\r\n            }</p>\r\n            ${\r\n              gym.phone\r\n                ? `<p style=\"margin:0 0 3px 0;font-size:12px;color:#666;\">${gym.phone}</p>`\r\n                : \"\"\r\n            }\r\n            ${\r\n              gym.rating\r\n                ? `<p style=\"margin:0;font-size:12px;color:#666;\">평점: ${gym.rating.toFixed(\r\n                    1\r\n                  )}</p>`\r\n                : \"\"\r\n            }\r\n          </div>\r\n        `,\r\n      })\r\n\r\n      // 마커 클릭 이벤트\r\n      window.kakao.maps.event.addListener(marker, \"click\", function () {\r\n        infowindow.open(mapRef.current, marker)\r\n      })\r\n\r\n      gymMarkersRef.current.push(marker)\r\n    })\r\n  }\r\n\r\n  // 헬스장 목록이 변경될 때마다 마커 업데이트\r\n  useEffect(() => {\r\n    if (isMapLoaded && gyms.length > 0) {\r\n      addGymMarkers()\r\n    }\r\n  }, [gyms, isMapLoaded])\r\n\r\n  // 검색 처리\r\n  const handleSearch = async (query: string) => {\r\n    console.log(\"🧪 검색 시작:\", query)\r\n    if (!position) {\r\n      console.warn(\"⚠️ 위치 정보가 없습니다.\")\r\n      return\r\n    }\r\n\r\n    setIsLoading(true)\r\n    try {\r\n      const result = await fetchGymsByKeyword(query, position)\r\n      console.log(\"🧪 API 결과:\", result.length, \"개\")\r\n\r\n      // 결과가 이미 Gym 타입인지 확인하고 변환\r\n      const transformedGyms: Gym[] = result.map((item: any) => {\r\n        // 이미 Gym 타입인 경우 (더미 데이터)\r\n        if (item.name && item.type) {\r\n          return item\r\n        }\r\n\r\n        // 카카오 API 결과인 경우 변환\r\n        return {\r\n          id: item.id,\r\n          name: item.place_name,\r\n          type: \"피트니스\",\r\n          address: item.address_name,\r\n          phone: item.phone,\r\n          latitude: parseFloat(item.y),\r\n          longitude: parseFloat(item.x),\r\n          // 추가 필드들은 기본값으로 설정 (실제로는 별도 API 호출 필요)\r\n          rating: Math.random() * 2 + 3, // 임시 평점 (3-5)\r\n          reviewCount: Math.floor(Math.random() * 100) + 10, // 임시 리뷰 수\r\n          hasPT: Math.random() > 0.5,\r\n          hasGX: Math.random() > 0.5,\r\n          is24Hours: Math.random() > 0.7,\r\n          hasParking: Math.random() > 0.3,\r\n          hasShower: Math.random() > 0.6,\r\n          price: `${Math.floor(Math.random() * 20 + 10)}만원`,\r\n        }\r\n      })\r\n\r\n      console.log(\"🧪 변환된 헬스장 데이터:\", transformedGyms.length, \"개\")\r\n      setGyms(transformedGyms)\r\n    } catch (error) {\r\n      console.error(\"🧪 검색 실패:\", error)\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  // 필터 토글\r\n  const toggleFilter = (filter: FilterOption) => {\r\n    setActiveFilters(prev =>\r\n      prev.includes(filter) ? prev.filter(f => f !== filter) : [...prev, filter]\r\n    )\r\n  }\r\n\r\n  // 정렬 변경\r\n  const handleSortChange = (\r\n    newSortBy: SortOption,\r\n    newDirection: SortDirection\r\n  ) => {\r\n    setSortBy(newSortBy)\r\n    setSortDirection(newDirection)\r\n  }\r\n\r\n  // 헬스장 클릭 처리 - 맵에서 해당 위치로 이동\r\n  const handleGymClick = (gym: Gym) => {\r\n    console.log(\"헬스장 클릭:\", gym)\r\n\r\n    if (mapRef.current) {\r\n      // 맵 중심을 해당 헬스장 위치로 이동\r\n      const newPosition = new window.kakao.maps.LatLng(\r\n        gym.latitude,\r\n        gym.longitude\r\n      )\r\n      mapRef.current.panTo(newPosition)\r\n\r\n      // 줌 레벨을 더 가깝게 설정 (더 확대)\r\n      mapRef.current.setLevel(2)\r\n\r\n      // 해당 헬스장 마커 찾기\r\n      const gymMarker = gymMarkersRef.current.find(marker => {\r\n        const markerPos = marker.getPosition()\r\n        return (\r\n          markerPos.getLat() === gym.latitude &&\r\n          markerPos.getLng() === gym.longitude\r\n        )\r\n      })\r\n\r\n      // 마커 클릭 이벤트 트리거 (인포윈도우 표시)\r\n      if (gymMarker) {\r\n        window.kakao.maps.event.trigger(gymMarker, \"click\")\r\n      }\r\n    }\r\n  }\r\n\r\n  // 현재 위치로 이동하는 함수\r\n  const moveToCurrentLocation = () => {\r\n    if (mapRef.current && position) {\r\n      const currentPosition = new window.kakao.maps.LatLng(\r\n        position.lat,\r\n        position.lng\r\n      )\r\n      mapRef.current.panTo(currentPosition)\r\n      mapRef.current.setLevel(3)\r\n    }\r\n  }\r\n\r\n  // 필터링 및 정렬된 헬스장 목록\r\n  const processedGyms = useMemo(() => {\r\n    console.log(\"🧪 헬스장 처리 중:\", gyms.length, \"개\")\r\n    const result = processGyms(gyms, {\r\n      activeFilters,\r\n      sortBy,\r\n      sortDirection,\r\n      maxDistance,\r\n      currentPosition: position,\r\n    })\r\n    console.log(\"🧪 처리된 헬스장:\", result.length, \"개\")\r\n    return result\r\n  }, [gyms, activeFilters, sortBy, sortDirection, maxDistance, position])\r\n\r\n  return (\r\n    <div className={styles.page}>\r\n      <Navigation />\r\n\r\n      <header className={styles.header}>\r\n        <h1>내 주변 헬스장 찾기</h1>\r\n      </header>\r\n\r\n      <section className={styles.searchSection}>\r\n        <SearchBar onSearch={handleSearch} />\r\n        <div className={styles.filterGroup}>\r\n          {filters.map(filter => (\r\n            <FilterTag\r\n              key={filter}\r\n              label={filter}\r\n              active={activeFilters.includes(filter)}\r\n              onClick={() => toggleFilter(filter)}\r\n            />\r\n          ))}\r\n        </div>\r\n        <div className={styles.distanceFilter}>\r\n          <label htmlFor=\"distance-range\">검색 반경: {maxDistance}km</label>\r\n          <input\r\n            id=\"distance-range\"\r\n            type=\"range\"\r\n            min=\"1\"\r\n            max=\"20\"\r\n            value={maxDistance}\r\n            onChange={e => setMaxDistance(Number(e.target.value))}\r\n            className={styles.rangeSlider}\r\n          />\r\n        </div>\r\n      </section>\r\n\r\n      <main className={styles.main}>\r\n        <div className={styles.mapListWrapper}>\r\n          <section className={styles.mapSection}>\r\n            <div className={styles.mapHeader}>\r\n              <h2>헬스장 위치</h2>\r\n              <button\r\n                onClick={moveToCurrentLocation}\r\n                className={styles.currentLocationButton}\r\n                title=\"현재 위치로 이동\"\r\n              >\r\n                📍 현재 위치\r\n              </button>\r\n            </div>\r\n            <div id=\"kakao-map\" className={styles.map}></div>\r\n          </section>\r\n\r\n          <section className={styles.listSection}>\r\n            <div className={styles.listHeader}>\r\n              <h2>추천 헬스장</h2>\r\n              {isLoading && <span>검색 중...</span>}\r\n            </div>\r\n            <div className={styles.gymList}>\r\n              <GymList\r\n                gyms={processedGyms}\r\n                sortBy={sortBy}\r\n                sortDirection={sortDirection}\r\n                onSortChange={handleSortChange}\r\n                onGymClick={handleGymClick}\r\n              />\r\n            </div>\r\n          </section>\r\n        </div>\r\n      </main>\r\n\r\n      <footer className={styles.footer}>\r\n        <p>&copy; 2025 내 주변 헬스장 찾기. All rights reserved.</p>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n","timestamp":1759820789694}