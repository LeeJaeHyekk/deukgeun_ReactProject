{"key":"fa904434aa57d02d98b23696207e6982","result":"const { useState, useEffect  } = require('react')\r\nconst { useNavigate  } = require('react-router-dom')\r\nconst { FaEye, FaEyeSlash, FaArrowLeft  } = require('react-icons/fa')\r\nconst { authApi  } = require('@features/auth/api/authApi')\r\nimport type { LoginRequest } from '../../../shared/types'\r\nconst { validation, showToast  } = require('@frontend/shared/lib')\r\nconst { useAuthContext  } = require('@frontend/shared/contexts/AuthContext')\r\nconst { RecaptchaWidget  } = require('@frontend/shared/components/RecaptchaWidget')\r\nconst { useAuthErrorHandler  } = require('@pages/Error')\r\n\r\nconst styles = require('./LoginPage.module.css').default\r\n\r\nmodule.exports.default = function LoginPage() {\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [showPassword, setShowPassword] = useState(false)\r\n  const [loading, setLoading] = useState(false)\r\n  const [recaptchaToken, setRecaptchaToken] = useState<string | null>(null)\r\n  const [errors, setErrors] = useState<{\r\n    email?: string\r\n    password?: string\r\n    recaptcha?: string\r\n  }>({})\r\n  const [error, setError] = useState<string>('')\r\n  const navigate = useNavigate()\r\n  const { login, isAuthenticated } = useAuthContext()\r\n  const { handleApiError, hasError, errorInfo, retry } = useAuthErrorHandler()\r\n\r\n  // 로그인된 상태에서 접근 시 메인페이지로 리다이렉트\r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n      navigate('/', { replace: true })\r\n    }\r\n  }, [isAuthenticated, navigate])\r\n\r\n  // 폼 검증\r\n  const validateForm = (): boolean => {\r\n    const newErrors: {\r\n      email?: string\r\n      password?: string\r\n      recaptcha?: string\r\n    } = {}\r\n\r\n    if (!validation.required(email)) {\r\n      newErrors.email = '이메일을 입력해주세요.'\r\n    } else if (!validation.email(email)) {\r\n      newErrors.email = '유효한 이메일 주소를 입력해주세요.'\r\n    }\r\n\r\n    if (!validation.required(password)) {\r\n      newErrors.password = '비밀번호를 입력해주세요.'\r\n    } else if (!validation.password(password)) {\r\n      newErrors.password = '비밀번호는 최소 8자 이상이어야 합니다.'\r\n    }\r\n\r\n    if (!recaptchaToken) {\r\n      newErrors.recaptcha = '보안 인증을 완료해주세요.'\r\n    }\r\n\r\n    setErrors(newErrors)\r\n    const isValid = Object.keys(newErrors).length === 0\r\n    return isValid\r\n  }\r\n\r\n  const handleLogin = async (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n\r\n    if (!validateForm()) {\r\n      return\r\n    }\r\n\r\n    setLoading(true)\r\n    setError('')\r\n\r\n    try {\r\n      const loginData: LoginRequest = {\r\n        email: email.trim().toLowerCase(),\r\n        password,\r\n        recaptchaToken: recaptchaToken!,\r\n      }\r\n\r\n      console.log('🧪 로그인 데이터:', { ...loginData, password: '***' })\r\n\r\n      const response = await authApi.login(loginData)\r\n\r\n      console.log('🧪 로그인 응답:', response)\r\n\r\n      if (!response || !response.user) {\r\n        console.log('🧪 로그인 실패: 사용자 정보 없음')\r\n        showToast('로그인에 실패했습니다.', 'error')\r\n        setLoading(false)\r\n        return\r\n      }\r\n\r\n      // AuthContext의 login 함수 사용 (Zustand + storage 모두 업데이트)\r\n      console.log('🧪 AuthContext login 호출')\r\n\r\n      // 백엔드 응답을 새로운 타입 시스템과 호환되도록 변환\r\n      const userWithToken = {\r\n        id: response.user.id,\r\n        email: response.user.email,\r\n        nickname: response.user.nickname,\r\n        accessToken: response.accessToken,\r\n        // 새로운 타입 시스템에서 요구하는 필드들에 기본값 설정\r\n        role: 'user' as const,\r\n        isActive: true,\r\n        isEmailVerified: false,\r\n        isPhoneVerified: false,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n      }\r\n      login(userWithToken, response.accessToken)\r\n\r\n      console.log('🧪 로그인 성공!')\r\n      showToast('로그인 성공!', 'success')\r\n\r\n      // 자동 리다이렉트는 App.tsx의 RedirectIfLoggedIn에서 처리\r\n    } catch (error: unknown) {\r\n      console.log('🧪 로그인 에러:', error)\r\n      handleApiError(error as any)\r\n      setError(errorInfo.message || '로그인에 실패했습니다.')\r\n    } finally {\r\n      setLoading(false)\r\n      console.log('🧪 로그인 처리 완료')\r\n    }\r\n  }\r\n\r\n  const handleRecaptchaChange = (token: string | null) => {\r\n    // 개발 환경에서는 더미 토큰 사용\r\n    const finalToken = process.env.DEV\r\n      ? 'dummy-token-for-development'\r\n      : token\r\n\r\n    console.log('🧪 reCAPTCHA 토큰 변경:', {\r\n      originalToken: token,\r\n      finalToken,\r\n    })\r\n    setRecaptchaToken(finalToken)\r\n    // reCAPTCHA 완료 시 해당 에러 초기화\r\n    if (finalToken && errors.recaptcha) {\r\n      setErrors(prev => ({ ...prev, recaptcha: undefined }))\r\n    }\r\n    setError('') // 전체 에러 메시지도 초기화\r\n  }\r\n\r\n  // 에러 상태 표시\r\n  if (hasError) {\r\n    return (\r\n      <div className={styles.pageWrapper}>\r\n        <div className={styles.loginBox}>\r\n          <div style={{ textAlign: 'center', color: '#f1f3f5' }}>\r\n            <h2>로그인 중 오류가 발생했습니다</h2>\r\n            <p>{errorInfo.message}</p>\r\n            <button\r\n              onClick={retry}\r\n              style={{\r\n                padding: '10px 20px',\r\n                backgroundColor: '#4f46e5',\r\n                color: 'white',\r\n                border: 'none',\r\n                borderRadius: '8px',\r\n                cursor: 'pointer',\r\n                marginTop: '20px',\r\n              }}\r\n            >\r\n              다시 시도\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // 이미 로그인된 상태라면 로딩 화면 표시\r\n  if (isAuthenticated) {\r\n    return (\r\n      <div className={styles.pageWrapper}>\r\n        <div className={styles.loginBox}>\r\n          <div style={{ textAlign: 'center', color: '#f1f3f5' }}>\r\n            <p>이미 로그인된 상태입니다.</p>\r\n            <p>메인페이지로 이동 중...</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={styles.pageWrapper}>\r\n      <div className={styles.loginBox}>\r\n        <button\r\n          onClick={() => navigate('/')}\r\n          className={styles.backButton}\r\n          aria-label=\"뒤로 가기\"\r\n        >\r\n          <FaArrowLeft />\r\n        </button>\r\n\r\n        <h1 className={styles.logo}>득근 득근</h1>\r\n\r\n        <form\r\n          onSubmit={e => {\r\n            e.preventDefault()\r\n            handleLogin(e)\r\n          }}\r\n        >\r\n          <div className={styles.inputGroup}>\r\n            <input\r\n              type=\"email\"\r\n              value={email}\r\n              onChange={e => {\r\n                setEmail(e.target.value)\r\n                if (errors.email) {\r\n                  setErrors(prev => ({ ...prev, email: undefined }))\r\n                }\r\n              }}\r\n              onKeyDown={e => {\r\n                if (e.key === 'Enter' && !loading) {\r\n                  e.preventDefault()\r\n                  handleLogin(e)\r\n                }\r\n              }}\r\n              placeholder=\"이메일\"\r\n              className={`${styles.input} ${\r\n                errors.email ? styles.inputError : ''\r\n              }`}\r\n              autoComplete=\"email\"\r\n              aria-describedby={errors.email ? 'email-error' : undefined}\r\n            />\r\n            {errors.email && (\r\n              <span id=\"email-error\" className={styles.errorText}>\r\n                {errors.email}\r\n              </span>\r\n            )}\r\n          </div>\r\n\r\n          <div className={styles.inputGroup}>\r\n            <div className={styles.passwordWrapper}>\r\n              <input\r\n                type={showPassword ? 'text' : 'password'}\r\n                value={password}\r\n                onChange={e => {\r\n                  setPassword(e.target.value)\r\n                  if (errors.password) {\r\n                    setErrors(prev => ({ ...prev, password: undefined }))\r\n                  }\r\n                }}\r\n                onKeyDown={e => {\r\n                  if (e.key === 'Enter' && !loading) {\r\n                    e.preventDefault()\r\n                    handleLogin(e)\r\n                  }\r\n                }}\r\n                placeholder=\"비밀번호\"\r\n                className={`${styles.passwordInput} ${\r\n                  errors.password ? styles.inputError : ''\r\n                }`}\r\n                autoComplete=\"current-password\"\r\n                aria-describedby={\r\n                  errors.password ? 'password-error' : undefined\r\n                }\r\n              />\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => setShowPassword(!showPassword)}\r\n                className={styles.eyeButton}\r\n                aria-label={showPassword ? '비밀번호 숨기기' : '비밀번호 보기'}\r\n              >\r\n                {showPassword ? <FaEyeSlash /> : <FaEye />}\r\n              </button>\r\n            </div>\r\n            {errors.password && (\r\n              <span id=\"password-error\" className={styles.errorText}>\r\n                {errors.password}\r\n              </span>\r\n            )}\r\n          </div>\r\n\r\n          <div className={styles.recaptchaContainer}>\r\n            <RecaptchaWidget\r\n              onChange={handleRecaptchaChange}\r\n              className={styles.recaptchaWidget}\r\n              aria-describedby={\r\n                errors.recaptcha ? 'recaptcha-error' : undefined\r\n              }\r\n            />\r\n            {errors.recaptcha && (\r\n              <span id=\"recaptcha-error\" className={styles.errorText}>\r\n                {errors.recaptcha}\r\n              </span>\r\n            )}\r\n          </div>\r\n\r\n          <button\r\n            type=\"submit\"\r\n            className={styles.loginButton}\r\n            disabled={loading}\r\n            aria-describedby={loading ? 'loading-description' : undefined}\r\n          >\r\n            {loading ? '로그인 중...' : '로그인'}\r\n          </button>\r\n          {loading && (\r\n            <span id=\"loading-description\" className=\"sr-only\">\r\n              로그인 처리 중입니다.\r\n            </span>\r\n          )}\r\n        </form>\r\n\r\n        <div className={styles.divider}>또는</div>\r\n\r\n        <div className={styles.socialWrapper}>\r\n          <button\r\n            type=\"button\"\r\n            className={styles.kakaoBtn}\r\n            disabled={loading}\r\n            onClick={() => showToast('카카오 로그인은 준비 중입니다.', 'info')}\r\n          >\r\n            🟡 카카오로 로그인\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className={styles.googleBtn}\r\n            disabled={loading}\r\n            onClick={() => showToast('Google 로그인은 준비 중입니다.', 'info')}\r\n          >\r\n            🔵 Google로 로그인\r\n          </button>\r\n        </div>\r\n\r\n        <div className={styles.linkRow}>\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => navigate('/signup')}\r\n            className={styles.linkBtn}\r\n            disabled={loading}\r\n          >\r\n            회원가입\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => navigate('/find-id')}\r\n            className={styles.linkBtn}\r\n            disabled={loading}\r\n          >\r\n            아이디 찾기\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => navigate('/find-password')}\r\n            className={styles.linkBtn}\r\n            disabled={loading}\r\n          >\r\n            비밀번호 찾기\r\n          </button>\r\n        </div>\r\n\r\n        <div className={styles.recaptcha}>\r\n          <p className={styles.recaptchaText}>\r\n            이 사이트는 reCAPTCHA 및 Google 개인정보처리방침과 서비스 약관의\r\n            적용을 받습니다.\r\n          </p>\r\n        </div>\r\n        {error && <p className={styles.errorMessage}>{error}</p>}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","timestamp":1759907919220}