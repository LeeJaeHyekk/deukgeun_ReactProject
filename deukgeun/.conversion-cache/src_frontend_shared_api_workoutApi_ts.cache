{"key":"654c2decac81739c0a3e1ad19a61b4db","result":"import type {\r\n  WorkoutPlan,\r\n  WorkoutSession,\r\n  WorkoutGoal,\r\n  ExerciseSet,\r\n} from \"../../../shared/types\"\r\n\r\n// API 함수들\r\nexport const workoutApi = {\r\n  // 운동 계획 관련\r\n  async getPlans(accessToken: string): Promise<WorkoutPlan[]> {\r\n    const response = await fetch(\r\n      `${process.env.VITE_BACKEND_URL}/api/workout/plans`,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    )\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"운동 계획을 불러오는데 실패했습니다.\")\r\n    }\r\n\r\n    const data = await response.json()\r\n    return data.data || []\r\n  },\r\n\r\n  async createPlan(\r\n    accessToken: string,\r\n    planData: Partial<WorkoutPlan>\r\n  ): Promise<WorkoutPlan> {\r\n    const response = await fetch(\r\n      `${process.env.VITE_BACKEND_URL}/api/workout/plans`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(planData),\r\n      }\r\n    )\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"운동 계획 생성에 실패했습니다.\")\r\n    }\r\n\r\n    const data = await response.json()\r\n    return data.data\r\n  },\r\n\r\n  async updatePlan(\r\n    accessToken: string,\r\n    planId: number,\r\n    planData: Partial<WorkoutPlan>\r\n  ): Promise<WorkoutPlan> {\r\n    const response = await fetch(\r\n      `${process.env.VITE_BACKEND_URL}/api/workout/plans/${planId}`,\r\n      {\r\n        method: \"PUT\",\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(planData),\r\n      }\r\n    )\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"운동 계획 수정에 실패했습니다.\")\r\n    }\r\n\r\n    const data = await response.json()\r\n    return data.data\r\n  },\r\n\r\n  async deletePlan(accessToken: string, planId: number): Promise<void> {\r\n    const response = await fetch(\r\n      `${process.env.VITE_BACKEND_URL}/api/workout/plans/${planId}`,\r\n      {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        },\r\n      }\r\n    )\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"운동 계획 삭제에 실패했습니다.\")\r\n    }\r\n  },\r\n\r\n  // 운동 세션 관련\r\n  async getSessions(accessToken: string): Promise<WorkoutSession[]> {\r\n    const response = await fetch(\r\n      `${process.env.VITE_BACKEND_URL}/api/workout/sessions`,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    )\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"운동 세션을 불러오는데 실패했습니다.\")\r\n    }\r\n\r\n    const data = await response.json()\r\n    return data.data || []\r\n  },\r\n\r\n  async createSession(\r\n    accessToken: string,\r\n    sessionData: Partial<WorkoutSession>\r\n  ): Promise<WorkoutSession> {\r\n    const response = await fetch(\r\n      `${process.env.VITE_BACKEND_URL}/api/workout/sessions`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(sessionData),\r\n      }\r\n    )\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"운동 세션 생성에 실패했습니다.\")\r\n    }\r\n\r\n    const data = await response.json()\r\n    return data.data\r\n  },\r\n\r\n  async updateSession(\r\n    accessToken: string,\r\n    sessionId: number,\r\n    sessionData: Partial<WorkoutSession>\r\n  ): Promise<WorkoutSession> {\r\n    const response = await fetch(\r\n      `${process.env.VITE_BACKEND_URL}/api/workout/sessions/${sessionId}`,\r\n      {\r\n        method: \"PUT\",\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(sessionData),\r\n      }\r\n    )\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"운동 세션 수정에 실패했습니다.\")\r\n    }\r\n\r\n    const data = await response.json()\r\n    return data.data\r\n  },\r\n\r\n  async deleteSession(accessToken: string, sessionId: number): Promise<void> {\r\n    const response = await fetch(\r\n      `${process.env.VITE_BACKEND_URL}/api/workout/sessions/${sessionId}`,\r\n      {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        },\r\n      }\r\n    )\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"운동 세션 삭제에 실패했습니다.\")\r\n    }\r\n  },\r\n\r\n  // 운동 목표 관련\r\n  async getGoals(accessToken: string): Promise<WorkoutGoal[]> {\r\n    const response = await fetch(\r\n      `${process.env.VITE_BACKEND_URL}/api/workout/goals`,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    )\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"운동 목표를 불러오는데 실패했습니다.\")\r\n    }\r\n\r\n    const data = await response.json()\r\n    return data.data || []\r\n  },\r\n\r\n  async createGoal(\r\n    accessToken: string,\r\n    goalData: Partial<WorkoutGoal>\r\n  ): Promise<WorkoutGoal> {\r\n    const response = await fetch(\r\n      `${process.env.VITE_BACKEND_URL}/api/workout/goals`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(goalData),\r\n      }\r\n    )\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"운동 목표 생성에 실패했습니다.\")\r\n    }\r\n\r\n    const data = await response.json()\r\n    return data.data\r\n  },\r\n\r\n  async updateGoal(\r\n    accessToken: string,\r\n    goalId: number,\r\n    goalData: Partial<WorkoutGoal>\r\n  ): Promise<WorkoutGoal> {\r\n    const response = await fetch(\r\n      `${process.env.VITE_BACKEND_URL}/api/workout/goals/${goalId}`,\r\n      {\r\n        method: \"PUT\",\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(goalData),\r\n      }\r\n    )\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"운동 목표 수정에 실패했습니다.\")\r\n    }\r\n\r\n    const data = await response.json()\r\n    return data.data\r\n  },\r\n\r\n  async deleteGoal(accessToken: string, goalId: number): Promise<void> {\r\n    const response = await fetch(\r\n      `${process.env.VITE_BACKEND_URL}/api/workout/goals/${goalId}`,\r\n      {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        },\r\n      }\r\n    )\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"운동 목표 삭제에 실패했습니다.\")\r\n    }\r\n  },\r\n\r\n  // 운동 세트 관련\r\n  async addExerciseSet(\r\n    accessToken: string,\r\n    setData: Partial<ExerciseSet>\r\n  ): Promise<ExerciseSet> {\r\n    const response = await fetch(\r\n      `${process.env.VITE_BACKEND_URL}/api/workout/sets`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(setData),\r\n      }\r\n    )\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"운동 세트 추가에 실패했습니다.\")\r\n    }\r\n\r\n    const data = await response.json()\r\n    return data.data\r\n  },\r\n\r\n  // 운동 세션 완료\r\n  async completeSession(\r\n    accessToken: string,\r\n    sessionId: number,\r\n    endTime: Date\r\n  ): Promise<WorkoutSession> {\r\n    const response = await fetch(\r\n      `${process.env.VITE_BACKEND_URL}/api/workout/sessions/${sessionId}/complete`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ endTime }),\r\n      }\r\n    )\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"운동 세션 완료에 실패했습니다.\")\r\n    }\r\n\r\n    const data = await response.json()\r\n    return data.data\r\n  },\r\n}\r\n","timestamp":1759820789723}