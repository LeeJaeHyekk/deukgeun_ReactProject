{"key":"e407ab28e9e78ba711a51cc73dfea084","result":"// Browser API polyfills for Node.js environment\nif (typeof window === 'undefined') {\n  global.window = global.window || {}\n  global.document = global.document || {}\n  global.localStorage = global.localStorage || {\n    getItem: () => null,\n    setItem: () => {},\n    removeItem: () => {},\n    clear: () => {}\n  }\n  global.sessionStorage = global.sessionStorage || {\n    getItem: () => null,\n    setItem: () => {},\n    removeItem: () => {},\n    clear: () => {}\n  }\n  global.File = global.File || class File {}\n  global.StorageEvent = global.StorageEvent || class StorageEvent {}\n  global.requestAnimationFrame = global.requestAnimationFrame || (cb => setTimeout(cb, 16))\n}\n\nimport React, { useEffect, useState } from 'react'\r\n\r\ninterface RecaptchaEnterpriseButtonProps {\r\n  action: string\r\n  onSuccess: (token: string) => void\r\n  onError: (error: any) => void\r\n  children: React.ReactNode\r\n  className?: string\r\n  disabled?: boolean\r\n  loading?: boolean\r\n}\r\n\r\n// Remove global declaration to avoid conflict\r\n\r\nexport const RecaptchaEnterpriseButton: React.FC<RecaptchaEnterpriseButtonProps> = ({\r\n  action,\r\n  onSuccess,\r\n  onError,\r\n  children,\r\n  className = '',\r\n  disabled = false,\r\n  loading = false\r\n}) => {\r\n  const [isRecaptchaLoaded, setIsRecaptchaLoaded] = useState(false)\r\n  const [isExecuting, setIsExecuting] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const loadRecaptcha = () => {\r\n      if (window.grecaptcha && window.grecaptcha.enterprise) {\r\n        window.grecaptcha.enterprise.ready(() => {\r\n          console.log('reCAPTCHA Enterprise 로드됨')\r\n          setIsRecaptchaLoaded(true)\r\n        })\r\n      } else {\r\n        console.warn('reCAPTCHA Enterprise가 로드되지 않았습니다.')\r\n      }\r\n    }\r\n\r\n    if (document.readyState === 'loading') {\r\n      document.addEventListener('DOMContentLoaded', loadRecaptcha)\r\n    } else {\r\n      loadRecaptcha()\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener('DOMContentLoaded', loadRecaptcha)\r\n    }\r\n  }, [])\r\n\r\n  const handleClick = async (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n\r\n    if (disabled || loading || isExecuting) {\r\n      return\r\n    }\r\n\r\n    if (!isRecaptchaLoaded) {\r\n      onError(new Error('reCAPTCHA Enterprise가 아직 로드되지 않았습니다.'))\r\n      return\r\n    }\r\n\r\n    try {\r\n      setIsExecuting(true)\r\n\r\n      const siteKey = process.env.VITE_RECAPTCHA_SITE_KEY\r\n      if (!siteKey) {\r\n        throw new Error('reCAPTCHA 사이트 키가 설정되지 않았습니다.')\r\n      }\r\n\r\n      const token = await (window.grecaptcha as any).enterprise.execute(siteKey, { action })\r\n      \r\n      if (!token) {\r\n        throw new Error('reCAPTCHA 토큰 생성에 실패했습니다.')\r\n      }\r\n\r\n      onSuccess(token)\r\n    } catch (error) {\r\n      console.error('reCAPTCHA Enterprise 실행 오류:', error)\r\n      onError(error)\r\n    } finally {\r\n      setIsExecuting(false)\r\n    }\r\n  }\r\n\r\n  const isDisabled = disabled || loading || isExecuting || !isRecaptchaLoaded\r\n\r\n  return (\r\n    <button\r\n      onClick={handleClick}\r\n      disabled={isDisabled}\r\n      className={`recaptcha-enterprise-button ${className} ${\r\n        isDisabled ? 'disabled' : ''\r\n      } ${isExecuting ? 'executing' : ''}`}\r\n      data-testid=\"recaptcha-enterprise-button\"\r\n    >\r\n      {isExecuting ? (\r\n        <span className=\"loading-spinner\">🔄</span>\r\n      ) : (\r\n        children\r\n      )}\r\n    </button>\r\n  )\r\n}\r\n\r\n/**\r\n * reCAPTCHA Enterprise 훅\r\n * 컴포넌트에서 쉽게 사용할 수 있는 훅\r\n */\r\nexport const useRecaptchaEnterprise = () => {\r\n  const [isLoaded, setIsLoaded] = useState(false)\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    const checkRecaptcha = () => {\r\n      if (window.grecaptcha && window.grecaptcha.enterprise) {\r\n        window.grecaptcha.enterprise.ready(() => {\r\n          setIsLoaded(true)\r\n          setIsLoading(false)\r\n        })\r\n      } else {\r\n        setIsLoading(false)\r\n      }\r\n    }\r\n\r\n    if (document.readyState === 'loading') {\r\n      document.addEventListener('DOMContentLoaded', checkRecaptcha)\r\n    } else {\r\n      checkRecaptcha()\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener('DOMContentLoaded', checkRecaptcha)\r\n    }\r\n  }, [])\r\n\r\n  const executeRecaptcha = async (action: string): Promise<string> => {\r\n    if (!isLoaded) {\r\n      throw new Error('reCAPTCHA Enterprise가 로드되지 않았습니다.')\r\n    }\r\n\r\n    const siteKey = process.env.VITE_RECAPTCHA_SITE_KEY\r\n    if (!siteKey) {\r\n      throw new Error('reCAPTCHA 사이트 키가 설정되지 않았습니다.')\r\n    }\r\n\r\n    return await (window.grecaptcha as any).enterprise.execute(siteKey, { action })\r\n  }\r\n\r\n  return {\r\n    isLoaded,\r\n    isLoading,\r\n    executeRecaptcha\r\n  }\r\n}\r\n\r\n/**\r\n * reCAPTCHA Enterprise 스크립트 로더\r\n * HTML head에 reCAPTCHA Enterprise 스크립트를 동적으로 추가\r\n */\r\nexport const RecaptchaEnterpriseScript: React.FC = () => {\r\n  useEffect(() => {\r\n    const siteKey = process.env.VITE_RECAPTCHA_SITE_KEY\r\n    if (!siteKey) {\r\n      console.error('reCAPTCHA 사이트 키가 설정되지 않았습니다.')\r\n      return\r\n    }\r\n\r\n    // 이미 스크립트가 로드되었는지 확인\r\n    if (document.querySelector('script[src*=\"recaptcha/enterprise.js\"]')) {\r\n      return\r\n    }\r\n\r\n    const script = document.createElement('script')\r\n    script.src = `https://www.google.com/recaptcha/enterprise.js?render=${siteKey}`\r\n    script.async = true\r\n    script.defer = true\r\n\r\n    script.onload = () => {\r\n      console.log('reCAPTCHA Enterprise 스크립트 로드 완료')\r\n    }\r\n\r\n    script.onerror = () => {\r\n      console.error('reCAPTCHA Enterprise 스크립트 로드 실패')\r\n    }\r\n\r\n    document.head.appendChild(script)\r\n\r\n    return () => {\r\n      // 컴포넌트 언마운트 시 스크립트 제거하지 않음 (다른 컴포넌트에서 사용할 수 있음)\r\n    }\r\n  }, [])\r\n\r\n  return null\r\n}\r\n","timestamp":1759907919234}