{"key":"744e171e21c56567b28c2374bc4d0806","result":"// Browser API polyfills for Node.js environment\nif (typeof window === 'undefined') {\n  global.window = global.window || {}\n  global.document = global.document || {}\n  global.localStorage = global.localStorage || {\n    getItem: () => null,\n    setItem: () => {},\n    removeItem: () => {},\n    clear: () => {}\n  }\n  global.sessionStorage = global.sessionStorage || {\n    getItem: () => null,\n    setItem: () => {},\n    removeItem: () => {},\n    clear: () => {}\n  }\n  global.File = global.File || class File {}\n  global.StorageEvent = global.StorageEvent || class StorageEvent {}\n  global.requestAnimationFrame = global.requestAnimationFrame || (cb => setTimeout(cb, 16))\n}\n\nimport '@testing-library/jest-dom'\r\nconst { vi, beforeEach, afterEach  } = require('vitest')\r\n\r\n// Mock 환경 변수\r\nObject.defineProperty(import.meta, 'env', {\r\n  value: {\r\n    DEV: true,\r\n    PROD: false,\r\n    VITE_BACKEND_URL: 'http://localhost:5000',\r\n    VITE_RECAPTCHA_SITE_KEY: 'test-recaptcha-key',\r\n    VITE_LOCATION_JAVASCRIPT_MAP_API_KEY: 'test-kakao-key',\r\n    VITE_LOCATION_REST_MAP_API_KEY: 'test-kakao-rest-key',\r\n    VITE_GYM_API_KEY: 'test-gym-key',\r\n  },\r\n  writable: true,\r\n})\r\n\r\n// Mock window.matchMedia\r\nObject.defineProperty(window, 'matchMedia', {\r\n  writable: true,\r\n  value: vi.fn().mockImplementation(query => ({\r\n    matches: false,\r\n    media: query,\r\n    onchange: null,\r\n    addListener: vi.fn(), // deprecated\r\n    removeListener: vi.fn(), // deprecated\r\n    addEventListener: vi.fn(),\r\n    removeEventListener: vi.fn(),\r\n    dispatchEvent: vi.fn(),\r\n  })),\r\n})\r\n\r\n// Mock IntersectionObserver\r\nglobal.IntersectionObserver = vi.fn().mockImplementation(() => ({\r\n  observe: vi.fn(),\r\n  unobserve: vi.fn(),\r\n  disconnect: vi.fn(),\r\n}))\r\n\r\n// Mock ResizeObserver\r\nglobal.ResizeObserver = vi.fn().mockImplementation(() => ({\r\n  observe: vi.fn(),\r\n  unobserve: vi.fn(),\r\n  disconnect: vi.fn(),\r\n}))\r\n\r\n// Mock navigator.geolocation\r\nObject.defineProperty(navigator, 'geolocation', {\r\n  writable: true,\r\n  value: {\r\n    getCurrentPosition: vi.fn(),\r\n    watchPosition: vi.fn(),\r\n    clearWatch: vi.fn(),\r\n  },\r\n})\r\n\r\n// Mock localStorage\r\nconst localStorageMock = {\r\n  getItem: vi.fn(),\r\n  setItem: vi.fn(),\r\n  removeItem: vi.fn(),\r\n  clear: vi.fn(),\r\n}\r\nObject.defineProperty(window, 'localStorage', {\r\n  value: localStorageMock,\r\n})\r\n\r\n// Mock sessionStorage\r\nconst sessionStorageMock = {\r\n  getItem: vi.fn(),\r\n  setItem: vi.fn(),\r\n  removeItem: vi.fn(),\r\n  clear: vi.fn(),\r\n}\r\nObject.defineProperty(window, 'sessionStorage', {\r\n  value: sessionStorageMock,\r\n})\r\n\r\n// Mock fetch\r\nglobal.fetch = vi.fn()\r\n\r\n// Mock window.location.reload (will be handled in individual tests)\r\n\r\n// Mock console methods for cleaner test output\r\nconst originalConsoleError = console.error\r\nconst originalConsoleWarn = console.warn\r\n\r\nbeforeEach(() => {\r\n  // Reset all mocks before each test\r\n  vi.clearAllMocks()\r\n\r\n  // Reset localStorage and sessionStorage\r\n  localStorageMock.getItem.mockClear()\r\n  localStorageMock.setItem.mockClear()\r\n  localStorageMock.removeItem.mockClear()\r\n  localStorageMock.clear.mockClear()\r\n\r\n  sessionStorageMock.getItem.mockClear()\r\n  sessionStorageMock.setItem.mockClear()\r\n  sessionStorageMock.removeItem.mockClear()\r\n  sessionStorageMock.clear.mockClear()\r\n\r\n  // Reset fetch mock\r\n  vi.mocked(fetch).mockClear()\r\n})\r\n\r\nafterEach(() => {\r\n  // Restore console methods\r\n  console.error = originalConsoleError\r\n  console.warn = originalConsoleWarn\r\n})\r\n\r\n// Global test utilities\r\nexport const mockUser = {\r\n  id: 'test-user-id',\r\n  email: 'test@example.com',\r\n  nickname: 'Test User',\r\n  role: 'user' as const,\r\n  isActive: true,\r\n  isEmailVerified: false,\r\n  isPhoneVerified: false,\r\n  createdAt: new Date('2024-01-01'),\r\n  updatedAt: new Date('2024-01-01'),\r\n}\r\n\r\nexport const mockToken = 'mock-jwt-token'\r\n\r\nexport const mockApiResponse = <T>(data: T, status = 200) => ({\r\n  data,\r\n  status,\r\n  statusText: 'OK',\r\n  headers: {},\r\n  config: {},\r\n})\r\n\r\nexport const mockApiError = (message: string, status = 500) => {\r\n  const error = new Error(message)\r\n  ;(error as any).response = {\r\n    data: { message },\r\n    status,\r\n    statusText: 'Internal Server Error',\r\n    headers: {},\r\n    config: {},\r\n  }\r\n  return error\r\n}\r\n","timestamp":1759907919247}