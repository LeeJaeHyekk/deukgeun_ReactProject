name: Type Safety Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  type-safety-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: TypeScript type check
      run: npx tsc --noEmit --pretty
      
    - name: Run type safety checker
      run: npx tsx scripts/type-safety-checker.ts
      
    - name: Upload type safety report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: type-safety-report
        path: type-safety-report.json
        
    - name: Comment PR with type safety report
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const reportPath = 'type-safety-report.json';
            if (fs.existsSync(reportPath)) {
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              
              const comment = `## üîç Type Safety Check Report
              
              **Summary:**
              - TypeScript Errors: ${report.typeErrors}
              - API Validation Coverage: ${report.apiValidationCoverage}%
              - Hook Type Safety: ${report.hookTypeSafety}%
              - Component Type Safety: ${report.componentTypeSafety}%
              - Total Issues: ${report.issues.length}
              
              ${report.issues.length > 0 ? `
              **Issues Found:**
              ${report.issues.slice(0, 10).map(issue => 
                `- \`${issue.file}\`: ${issue.message} (${issue.severity})`
              ).join('\n')}
              ${report.issues.length > 10 ? `\n... and ${report.issues.length - 10} more issues` : ''}
              ` : '‚úÖ No issues found!'}
              
              ${report.recommendations.length > 0 ? `
              **Recommendations:**
              ${report.recommendations.map((rec, i) => `${i + 1}. ${rec}`).join('\n')}
              ` : ''}
              
              <details>
              <summary>Full Report</summary>
              
              \`\`\`json
              ${JSON.stringify(report, null, 2)}
              \`\`\`
              </details>`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.error('Failed to create comment:', error);
          }

  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Check Prettier formatting
      run: npm run format:check
      
    - name: Run type safety checker
      run: npx tsx scripts/type-safety-checker.ts
      
    - name: Fail if type safety issues found
      run: |
        if [ -f type-safety-report.json ]; then
          TYPE_ERRORS=$(jq '.typeErrors' type-safety-report.json)
          API_COVERAGE=$(jq '.apiValidationCoverage' type-safety-report.json)
          
          if [ "$TYPE_ERRORS" -gt 0 ] || [ "$API_COVERAGE" -lt 70 ]; then
            echo "‚ùå Type safety check failed"
            echo "TypeScript errors: $TYPE_ERRORS"
            echo "API validation coverage: $API_COVERAGE%"
            exit 1
          fi
        fi
