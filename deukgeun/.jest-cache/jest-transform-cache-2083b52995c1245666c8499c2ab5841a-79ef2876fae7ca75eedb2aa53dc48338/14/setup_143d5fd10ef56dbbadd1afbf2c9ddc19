768177d6c71136ed33d6ebaed3f745ff
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// 통합 테스트 환경 설정
require("@testing-library/jest-dom");
// 환경 변수 설정
process.env.NODE_ENV = "test";
// 전역 모킹 설정
global.console = {
    ...console,
    // 테스트 중 불필요한 로그 숨김
    log: jest.fn(),
    debug: jest.fn(),
    info: jest.fn(),
    warn: jest.fn(),
    error: jest.fn(),
};
// MSW 설정 (API 모킹) - 브라우저 환경에서만
if (typeof window !== "undefined") {
    try {
        const { server } = require("./shared/mocks/server");
        beforeAll(() => server.listen());
        afterEach(() => server.resetHandlers());
        afterAll(() => server.close());
    }
    catch (error) {
        console.warn("MSW server not available for testing");
    }
}
// 전역 테스트 유틸리티
global.testUtils = {
    // 테스트 데이터 생성 헬퍼
    createMockUser: (overrides = {}) => ({
        id: 1,
        email: "test@example.com",
        nickname: "TestUser",
        birthDate: new Date("1990-01-01"),
        gender: "male",
        phoneNumber: "010-1234-5678",
        level: 1,
        exp: 0,
        createdAt: new Date(),
        updatedAt: new Date(),
        ...overrides,
    }),
    // API 응답 모킹 헬퍼
    createMockApiResponse: (data, success = true) => ({
        success,
        data,
        message: success ? "Success" : "Error",
    }),
    // 에러 응답 모킹 헬퍼
    createMockErrorResponse: (message = "Error occurred") => ({
        success: false,
        data: null,
        message,
    }),
};
// 커스텀 매처 추가
expect.extend({
    toHaveBeenCalledWithUser(received, expectedUser) {
        const pass = received.mock.calls.some((call) => call.some((arg) => arg && typeof arg === "object" && arg.id === expectedUser.id));
        return {
            pass,
            message: () => `expected ${received.getMockName()} to have been called with user ${JSON.stringify(expectedUser)}`,
        };
    },
    toHaveBeenCalledWithToken(received, expectedToken) {
        const pass = received.mock.calls.some((call) => call.some((arg) => arg === expectedToken));
        return {
            pass,
            message: () => `expected ${received.getMockName()} to have been called with token "${expectedToken}"`,
        };
    },
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFzsnqzsvZRcXERvY3VtZW50c1xcR2l0SHViXFxkZXVrZ2V1bl9SZWFjdFByb2plY3RcXGRldWtnZXVuXFxzcmNcXHRlc3RcXHNldHVwLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsZUFBZTtBQUNmLHFDQUFrQztBQUVsQyxXQUFXO0FBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFBO0FBRTdCLFdBQVc7QUFDWCxNQUFNLENBQUMsT0FBTyxHQUFHO0lBQ2YsR0FBRyxPQUFPO0lBQ1YsbUJBQW1CO0lBQ25CLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0lBQ2QsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDaEIsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtJQUNmLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0NBQ2pCLENBQUE7QUFFRCwrQkFBK0I7QUFDL0IsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxJQUFJLENBQUM7UUFDSCxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLHVCQUF1QixDQUFDLENBQUE7UUFDbkQsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBO1FBQ2hDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQTtRQUN2QyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUE7SUFDaEMsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDZixPQUFPLENBQUMsSUFBSSxDQUFDLHNDQUFzQyxDQUFDLENBQUE7SUFDdEQsQ0FBQztBQUNILENBQUM7QUFFRCxjQUFjO0FBQ2QsTUFBTSxDQUFDLFNBQVMsR0FBRztJQUNqQixnQkFBZ0I7SUFDaEIsY0FBYyxFQUFFLENBQUMsU0FBUyxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNuQyxFQUFFLEVBQUUsQ0FBQztRQUNMLEtBQUssRUFBRSxrQkFBa0I7UUFDekIsUUFBUSxFQUFFLFVBQVU7UUFDcEIsU0FBUyxFQUFFLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQztRQUNqQyxNQUFNLEVBQUUsTUFBTTtRQUNkLFdBQVcsRUFBRSxlQUFlO1FBQzVCLEtBQUssRUFBRSxDQUFDO1FBQ1IsR0FBRyxFQUFFLENBQUM7UUFDTixTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUU7UUFDckIsU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFO1FBQ3JCLEdBQUcsU0FBUztLQUNiLENBQUM7SUFFRixlQUFlO0lBQ2YscUJBQXFCLEVBQUUsQ0FBQyxJQUFTLEVBQUUsT0FBTyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNyRCxPQUFPO1FBQ1AsSUFBSTtRQUNKLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTztLQUN2QyxDQUFDO0lBRUYsY0FBYztJQUNkLHVCQUF1QixFQUFFLENBQUMsT0FBTyxHQUFHLGdCQUFnQixFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3hELE9BQU8sRUFBRSxLQUFLO1FBQ2QsSUFBSSxFQUFFLElBQUk7UUFDVixPQUFPO0tBQ1IsQ0FBQztDQUNILENBQUE7QUFrQkQsWUFBWTtBQUNaLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDWix3QkFBd0IsQ0FBQyxRQUFRLEVBQUUsWUFBWTtRQUM3QyxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFXLEVBQUUsRUFBRSxDQUNwRCxJQUFJLENBQUMsSUFBSSxDQUNQLENBQUMsR0FBUSxFQUFFLEVBQUUsQ0FDWCxHQUFHLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssWUFBWSxDQUFDLEVBQUUsQ0FDL0QsQ0FDRixDQUFBO1FBRUQsT0FBTztZQUNMLElBQUk7WUFDSixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQ1osWUFBWSxRQUFRLENBQUMsV0FBVyxFQUFFLGtDQUFrQyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxFQUFFO1NBQ3JHLENBQUE7SUFDSCxDQUFDO0lBRUQseUJBQXlCLENBQUMsUUFBUSxFQUFFLGFBQWE7UUFDL0MsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBVyxFQUFFLEVBQUUsQ0FDcEQsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQVEsRUFBRSxFQUFFLENBQUMsR0FBRyxLQUFLLGFBQWEsQ0FBQyxDQUMvQyxDQUFBO1FBRUQsT0FBTztZQUNMLElBQUk7WUFDSixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQ1osWUFBWSxRQUFRLENBQUMsV0FBVyxFQUFFLG9DQUFvQyxhQUFhLEdBQUc7U0FDekYsQ0FBQTtJQUNILENBQUM7Q0FDRixDQUFDLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFzsnqzsvZRcXERvY3VtZW50c1xcR2l0SHViXFxkZXVrZ2V1bl9SZWFjdFByb2plY3RcXGRldWtnZXVuXFxzcmNcXHRlc3RcXHNldHVwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIO2Gte2VqSDthYzsiqTtirgg7ZmY6rK9IOyEpOyglVxyXG5pbXBvcnQgXCJAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tXCJcclxuXHJcbi8vIO2ZmOqyvSDrs4DsiJgg7ISk7KCVXHJcbnByb2Nlc3MuZW52Lk5PREVfRU5WID0gXCJ0ZXN0XCJcclxuXHJcbi8vIOyghOyXrSDrqqjtgrkg7ISk7KCVXHJcbmdsb2JhbC5jb25zb2xlID0ge1xyXG4gIC4uLmNvbnNvbGUsXHJcbiAgLy8g7YWM7Iqk7Yq4IOykkSDrtojtlYTsmpTtlZwg66Gc6re4IOyIqOq5gFxyXG4gIGxvZzogamVzdC5mbigpLFxyXG4gIGRlYnVnOiBqZXN0LmZuKCksXHJcbiAgaW5mbzogamVzdC5mbigpLFxyXG4gIHdhcm46IGplc3QuZm4oKSxcclxuICBlcnJvcjogamVzdC5mbigpLFxyXG59XHJcblxyXG4vLyBNU1cg7ISk7KCVIChBUEkg66qo7YK5KSAtIOu4jOudvOyasOyggCDtmZjqsr3sl5DshJzrp4xcclxuaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgeyBzZXJ2ZXIgfSA9IHJlcXVpcmUoXCIuL3NoYXJlZC9tb2Nrcy9zZXJ2ZXJcIilcclxuICAgIGJlZm9yZUFsbCgoKSA9PiBzZXJ2ZXIubGlzdGVuKCkpXHJcbiAgICBhZnRlckVhY2goKCkgPT4gc2VydmVyLnJlc2V0SGFuZGxlcnMoKSlcclxuICAgIGFmdGVyQWxsKCgpID0+IHNlcnZlci5jbG9zZSgpKVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLndhcm4oXCJNU1cgc2VydmVyIG5vdCBhdmFpbGFibGUgZm9yIHRlc3RpbmdcIilcclxuICB9XHJcbn1cclxuXHJcbi8vIOyghOyXrSDthYzsiqTtirgg7Jyg7Yu466as7YuwXHJcbmdsb2JhbC50ZXN0VXRpbHMgPSB7XHJcbiAgLy8g7YWM7Iqk7Yq4IOuNsOydtO2EsCDsg53shLEg7Zes7Y28XHJcbiAgY3JlYXRlTW9ja1VzZXI6IChvdmVycmlkZXMgPSB7fSkgPT4gKHtcclxuICAgIGlkOiAxLFxyXG4gICAgZW1haWw6IFwidGVzdEBleGFtcGxlLmNvbVwiLFxyXG4gICAgbmlja25hbWU6IFwiVGVzdFVzZXJcIixcclxuICAgIGJpcnRoRGF0ZTogbmV3IERhdGUoXCIxOTkwLTAxLTAxXCIpLFxyXG4gICAgZ2VuZGVyOiBcIm1hbGVcIixcclxuICAgIHBob25lTnVtYmVyOiBcIjAxMC0xMjM0LTU2NzhcIixcclxuICAgIGxldmVsOiAxLFxyXG4gICAgZXhwOiAwLFxyXG4gICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxyXG4gICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLFxyXG4gICAgLi4ub3ZlcnJpZGVzLFxyXG4gIH0pLFxyXG5cclxuICAvLyBBUEkg7J2R64u1IOuqqO2CuSDtl6ztjbxcclxuICBjcmVhdGVNb2NrQXBpUmVzcG9uc2U6IChkYXRhOiBhbnksIHN1Y2Nlc3MgPSB0cnVlKSA9PiAoe1xyXG4gICAgc3VjY2VzcyxcclxuICAgIGRhdGEsXHJcbiAgICBtZXNzYWdlOiBzdWNjZXNzID8gXCJTdWNjZXNzXCIgOiBcIkVycm9yXCIsXHJcbiAgfSksXHJcblxyXG4gIC8vIOyXkOufrCDsnZHri7Ug66qo7YK5IO2XrO2NvFxyXG4gIGNyZWF0ZU1vY2tFcnJvclJlc3BvbnNlOiAobWVzc2FnZSA9IFwiRXJyb3Igb2NjdXJyZWRcIikgPT4gKHtcclxuICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgZGF0YTogbnVsbCxcclxuICAgIG1lc3NhZ2UsXHJcbiAgfSksXHJcbn1cclxuXHJcbi8vIO2DgOyehSDsoJXsnZhcclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gIG5hbWVzcGFjZSBqZXN0IHtcclxuICAgIGludGVyZmFjZSBNYXRjaGVyczxSPiB7XHJcbiAgICAgIHRvSGF2ZUJlZW5DYWxsZWRXaXRoVXNlcjogKGV4cGVjdGVkVXNlcjogYW55KSA9PiBSXHJcbiAgICAgIHRvSGF2ZUJlZW5DYWxsZWRXaXRoVG9rZW46IChleHBlY3RlZFRva2VuOiBzdHJpbmcpID0+IFJcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZhciB0ZXN0VXRpbHM6IHtcclxuICAgIGNyZWF0ZU1vY2tVc2VyOiAob3ZlcnJpZGVzPzogYW55KSA9PiBhbnlcclxuICAgIGNyZWF0ZU1vY2tBcGlSZXNwb25zZTogKGRhdGE6IGFueSwgc3VjY2Vzcz86IGJvb2xlYW4pID0+IGFueVxyXG4gICAgY3JlYXRlTW9ja0Vycm9yUmVzcG9uc2U6IChtZXNzYWdlPzogc3RyaW5nKSA9PiBhbnlcclxuICB9XHJcbn1cclxuXHJcbi8vIOy7pOyKpO2FgCDrp6Tsspgg7LaU6rCAXHJcbmV4cGVjdC5leHRlbmQoe1xyXG4gIHRvSGF2ZUJlZW5DYWxsZWRXaXRoVXNlcihyZWNlaXZlZCwgZXhwZWN0ZWRVc2VyKSB7XHJcbiAgICBjb25zdCBwYXNzID0gcmVjZWl2ZWQubW9jay5jYWxscy5zb21lKChjYWxsOiBhbnlbXSkgPT5cclxuICAgICAgY2FsbC5zb21lKFxyXG4gICAgICAgIChhcmc6IGFueSkgPT5cclxuICAgICAgICAgIGFyZyAmJiB0eXBlb2YgYXJnID09PSBcIm9iamVjdFwiICYmIGFyZy5pZCA9PT0gZXhwZWN0ZWRVc2VyLmlkXHJcbiAgICAgIClcclxuICAgIClcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBwYXNzLFxyXG4gICAgICBtZXNzYWdlOiAoKSA9PlxyXG4gICAgICAgIGBleHBlY3RlZCAke3JlY2VpdmVkLmdldE1vY2tOYW1lKCl9IHRvIGhhdmUgYmVlbiBjYWxsZWQgd2l0aCB1c2VyICR7SlNPTi5zdHJpbmdpZnkoZXhwZWN0ZWRVc2VyKX1gLFxyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIHRvSGF2ZUJlZW5DYWxsZWRXaXRoVG9rZW4ocmVjZWl2ZWQsIGV4cGVjdGVkVG9rZW4pIHtcclxuICAgIGNvbnN0IHBhc3MgPSByZWNlaXZlZC5tb2NrLmNhbGxzLnNvbWUoKGNhbGw6IGFueVtdKSA9PlxyXG4gICAgICBjYWxsLnNvbWUoKGFyZzogYW55KSA9PiBhcmcgPT09IGV4cGVjdGVkVG9rZW4pXHJcbiAgICApXHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcGFzcyxcclxuICAgICAgbWVzc2FnZTogKCkgPT5cclxuICAgICAgICBgZXhwZWN0ZWQgJHtyZWNlaXZlZC5nZXRNb2NrTmFtZSgpfSB0byBoYXZlIGJlZW4gY2FsbGVkIHdpdGggdG9rZW4gXCIke2V4cGVjdGVkVG9rZW59XCJgLFxyXG4gICAgfVxyXG4gIH0sXHJcbn0pXHJcbiJdLCJ2ZXJzaW9uIjozfQ==