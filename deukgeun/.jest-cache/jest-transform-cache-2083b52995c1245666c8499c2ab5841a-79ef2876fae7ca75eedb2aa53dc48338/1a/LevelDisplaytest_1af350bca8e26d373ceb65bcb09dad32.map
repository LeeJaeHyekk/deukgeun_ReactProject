{"file":"C:\\Users\\재코\\Documents\\GitHub\\deukgeun_ReactProject\\deukgeun\\src\\test\\frontend\\components\\LevelDisplay.test.tsx","mappings":"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","names":[],"sources":["C:\\Users\\재코\\Documents\\GitHub\\deukgeun_ReactProject\\deukgeun\\src\\test\\frontend\\components\\LevelDisplay.test.tsx"],"sourcesContent":["import React from \"react\"\r\nimport { render, screen } from \"@testing-library/react\"\r\nimport { LevelDisplay } from \"../../../frontend/shared/components/LevelDisplay\"\r\nimport { createMockUser } from \"../../../frontend/shared/utils/testUtils\"\r\n\r\n// UserLevel 타입을 위한 헬퍼 함수\r\nconst createMockUserLevel = (overrides = {}) => ({\r\n  id: 1,\r\n  userId: 1,\r\n  level: 1,\r\n  currentExp: 0,\r\n  totalExp: 0,\r\n  createdAt: new Date(),\r\n  updatedAt: new Date(),\r\n  ...overrides,\r\n})\r\n\r\ndescribe(\"LevelDisplay\", () => {\r\n  const defaultUser = createMockUser()\r\n\r\n  describe(\"렌더링\", () => {\r\n    it(\"should render level information correctly\", () => {\r\n      render(<LevelDisplay userLevel={createMockUserLevel()} />)\r\n\r\n      expect(screen.getByText(/Lv\\.1/)).toBeInTheDocument()\r\n      expect(screen.getByText(/초보자/)).toBeInTheDocument()\r\n      expect(screen.getByText(/0\\/100/)).toBeInTheDocument() // exp/required exp\r\n    })\r\n\r\n    it(\"should display correct level title based on level\", () => {\r\n      const highLevelUser = createMockUserLevel({ level: 25 })\r\n      render(<LevelDisplay userLevel={highLevelUser} />)\r\n\r\n      expect(screen.getByText(/Lv\\.25/)).toBeInTheDocument()\r\n      expect(screen.getByText(/중급자/)).toBeInTheDocument()\r\n    })\r\n\r\n    it(\"should show progress bar with correct percentage\", () => {\r\n      const userWithExp = createMockUserLevel({ level: 1, currentExp: 50 })\r\n      render(<LevelDisplay userLevel={userWithExp} />)\r\n\r\n      const progressBar = screen.getByRole(\"progressbar\")\r\n      expect(progressBar).toBeInTheDocument()\r\n      expect(progressBar).toHaveAttribute(\"aria-valuenow\", \"50\")\r\n      expect(progressBar).toHaveAttribute(\"aria-valuemax\", \"100\")\r\n    })\r\n\r\n    it(\"should display max level correctly\", () => {\r\n      const maxLevelUser = createMockUserLevel({ level: 50, currentExp: 5000 })\r\n      render(<LevelDisplay userLevel={maxLevelUser} />)\r\n\r\n      expect(screen.getByText(/Lv\\.50/)).toBeInTheDocument()\r\n      expect(screen.getByText(/전문가/)).toBeInTheDocument()\r\n      expect(screen.getByText(/MAX/)).toBeInTheDocument()\r\n    })\r\n  })\r\n\r\n  describe(\"레벨 제목\", () => {\r\n    it(\"should show 초보자 for levels 1-9\", () => {\r\n      for (let level = 1; level <= 9; level++) {\r\n        const user = createMockUserLevel({ level })\r\n        const { unmount } = render(<LevelDisplay userLevel={user} />)\r\n\r\n        expect(screen.getByText(/초보자/)).toBeInTheDocument()\r\n        unmount()\r\n      }\r\n    })\r\n\r\n    it(\"should show 초급자 for levels 10-19\", () => {\r\n      for (let level = 10; level <= 19; level++) {\r\n        const user = createMockUserLevel({ level })\r\n        const { unmount } = render(<LevelDisplay userLevel={user} />)\r\n\r\n        expect(screen.getByText(/초급자/)).toBeInTheDocument()\r\n        unmount()\r\n      }\r\n    })\r\n\r\n    it(\"should show 중급자 for levels 20-29\", () => {\r\n      for (let level = 20; level <= 29; level++) {\r\n        const user = createMockUserLevel({ level })\r\n        const { unmount } = render(<LevelDisplay userLevel={user} />)\r\n\r\n        expect(screen.getByText(/중급자/)).toBeInTheDocument()\r\n        unmount()\r\n      }\r\n    })\r\n\r\n    it(\"should show 고급자 for levels 30-39\", () => {\r\n      for (let level = 30; level <= 39; level++) {\r\n        const user = createMockUserLevel({ level })\r\n        const { unmount } = render(<LevelDisplay userLevel={user} />)\r\n\r\n        expect(screen.getByText(/고급자/)).toBeInTheDocument()\r\n        unmount()\r\n      }\r\n    })\r\n\r\n    it(\"should show 전문가 for levels 40+\", () => {\r\n      for (let level = 40; level <= 50; level++) {\r\n        const user = createMockUserLevel({ level })\r\n        const { unmount } = render(<LevelDisplay userLevel={user} />)\r\n\r\n        expect(screen.getByText(/전문가/)).toBeInTheDocument()\r\n        unmount()\r\n      }\r\n    })\r\n  })\r\n\r\n  describe(\"경험치 표시\", () => {\r\n    it(\"should show correct exp format\", () => {\r\n      const userWithExp = createMockUserLevel({ level: 1, currentExp: 75 })\r\n      render(<LevelDisplay userLevel={userWithExp} />)\r\n\r\n      expect(screen.getByText(/75\\/100/)).toBeInTheDocument()\r\n    })\r\n\r\n    it(\"should handle exp overflow correctly\", () => {\r\n      const userWithOverflow = createMockUserLevel({ level: 1, currentExp: 150 })\r\n      render(<LevelDisplay userLevel={userWithOverflow} />)\r\n\r\n      expect(screen.getByText(/100\\/100/)).toBeInTheDocument()\r\n    })\r\n\r\n    it(\"should show 0 exp for new user\", () => {\r\n      const newUser = createMockUserLevel({ level: 1, currentExp: 0 })\r\n      render(<LevelDisplay userLevel={newUser} />)\r\n\r\n      expect(screen.getByText(/0\\/100/)).toBeInTheDocument()\r\n    })\r\n  })\r\n\r\n  describe(\"프로그레스 바\", () => {\r\n    it(\"should have correct progress value\", () => {\r\n      const userWithExp = createMockUserLevel({ level: 1, currentExp: 30 })\r\n      render(<LevelDisplay userLevel={userWithExp} />)\r\n\r\n      const progressBar = screen.getByRole(\"progressbar\")\r\n      expect(progressBar).toHaveAttribute(\"aria-valuenow\", \"30\")\r\n      expect(progressBar).toHaveAttribute(\"aria-valuemax\", \"100\")\r\n    })\r\n\r\n    it(\"should show 100% progress for max level\", () => {\r\n      const maxLevelUser = createMockUserLevel({ level: 50, currentExp: 5000 })\r\n      render(<LevelDisplay userLevel={maxLevelUser} />)\r\n\r\n      const progressBar = screen.getByRole(\"progressbar\")\r\n      expect(progressBar).toHaveAttribute(\"aria-valuenow\", \"100\")\r\n      expect(progressBar).toHaveAttribute(\"aria-valuemax\", \"100\")\r\n    })\r\n\r\n    it(\"should have proper ARIA attributes\", () => {\r\n      render(<LevelDisplay userLevel={createMockUserLevel()} />)\r\n\r\n      const progressBar = screen.getByRole(\"progressbar\")\r\n      expect(progressBar).toHaveAttribute(\"aria-label\")\r\n      expect(progressBar).toHaveAttribute(\"aria-valuemin\", \"0\")\r\n    })\r\n  })\r\n\r\n  describe(\"접근성\", () => {\r\n    it(\"should have proper semantic structure\", () => {\r\n      render(<LevelDisplay userLevel={createMockUserLevel()} />)\r\n\r\n      // 레벨 정보가 적절한 태그로 구조화되어 있는지 확인\r\n      expect(screen.getByText(/Lv\\.1/)).toBeInTheDocument()\r\n      expect(screen.getByRole(\"progressbar\")).toBeInTheDocument()\r\n    })\r\n\r\n    it(\"should provide meaningful ARIA labels\", () => {\r\n      render(<LevelDisplay userLevel={createMockUserLevel()} />)\r\n\r\n      const progressBar = screen.getByRole(\"progressbar\")\r\n      const ariaLabel = progressBar.getAttribute(\"aria-label\")\r\n\r\n      expect(ariaLabel).toContain(\"경험치\")\r\n      expect(ariaLabel).toContain(\"0%\")\r\n    })\r\n\r\n    it(\"should be keyboard accessible\", () => {\r\n      render(<LevelDisplay userLevel={createMockUserLevel()} />)\r\n\r\n      // 모든 상호작용 요소가 키보드로 접근 가능한지 확인\r\n      const elements = screen.getAllByRole(\"generic\")\r\n      elements.forEach(element => {\r\n        expect(element).not.toHaveAttribute(\"tabindex\", \"-1\")\r\n      })\r\n    })\r\n  })\r\n\r\n  describe(\"스타일링\", () => {\r\n    it(\"should apply correct CSS classes\", () => {\r\n      render(<LevelDisplay userLevel={createMockUserLevel()} />)\r\n\r\n      const container = screen.getByTestId(\"level-display\")\r\n      expect(container).toHaveClass(\"levelDisplay\")\r\n    })\r\n\r\n    it(\"should show different colors for different levels\", () => {\r\n      const { rerender } = render(<LevelDisplay userLevel={createMockUserLevel()} />)\r\n\r\n      // 초보자 레벨\r\n      let levelTitle = screen.getByText(/초보자/)\r\n      expect(levelTitle).toHaveClass(\"beginner\")\r\n\r\n      // 중급자 레벨\r\n      const intermediateUser = createMockUserLevel({ level: 25 })\r\n      rerender(<LevelDisplay userLevel={intermediateUser} />)\r\n      levelTitle = screen.getByText(/중급자/)\r\n      expect(levelTitle).toHaveClass(\"intermediate\")\r\n\r\n      // 전문가 레벨\r\n      const expertUser = createMockUserLevel({ level: 45 })\r\n      rerender(<LevelDisplay userLevel={expertUser} />)\r\n      levelTitle = screen.getByText(/전문가/)\r\n      expect(levelTitle).toHaveClass(\"expert\")\r\n    })\r\n  })\r\n\r\n  describe(\"에러 처리\", () => {\r\n    it(\"should handle missing user data gracefully\", () => {\r\n      const userWithoutLevel = createMockUserLevel({ level: undefined })\r\n      render(<LevelDisplay userLevel={userWithoutLevel} />)\r\n\r\n      expect(screen.getByText(/Lv\\.1/)).toBeInTheDocument() // 기본값\r\n    })\r\n\r\n    it(\"should handle negative exp values\", () => {\r\n      const userWithNegativeExp = createMockUserLevel({ level: 1, currentExp: -10 })\r\n      render(<LevelDisplay userLevel={userWithNegativeExp} />)\r\n\r\n      expect(screen.getByText(/0\\/100/)).toBeInTheDocument()\r\n    })\r\n\r\n    it(\"should handle very high level values\", () => {\r\n      const userWithHighLevel = createMockUserLevel({ level: 999, currentExp: 99999 })\r\n      render(<LevelDisplay userLevel={userWithHighLevel} />)\r\n\r\n      expect(screen.getByText(/Lv\\.999/)).toBeInTheDocument()\r\n      expect(screen.getByText(/전문가/)).toBeInTheDocument()\r\n    })\r\n  })\r\n\r\n  describe(\"성능\", () => {\r\n    it(\"should not re-render unnecessarily\", () => {\r\n      const { rerender } = render(<LevelDisplay userLevel={createMockUserLevel()} />)\r\n\r\n      // 같은 props로 리렌더링\r\n      rerender(<LevelDisplay userLevel={createMockUserLevel()} />)\r\n\r\n      // 컴포넌트가 정상적으로 렌더링되는지 확인\r\n      expect(screen.getByText(/Lv\\.1/)).toBeInTheDocument()\r\n    })\r\n\r\n    it(\"should handle rapid prop changes\", () => {\r\n      const { rerender } = render(<LevelDisplay userLevel={createMockUserLevel()} />)\r\n\r\n      // 빠른 prop 변경\r\n      for (let i = 1; i <= 10; i++) {\r\n        const user = createMockUserLevel({ level: i, currentExp: i * 10 })\r\n        rerender(<LevelDisplay userLevel={user} />)\r\n      }\r\n\r\n      // 마지막 상태가 올바르게 표시되는지 확인\r\n      expect(screen.getByText(/Lv\\.10/)).toBeInTheDocument()\r\n    })\r\n  })\r\n\r\n  describe(\"반응형 디자인\", () => {\r\n    it(\"should be responsive on different screen sizes\", () => {\r\n      render(<LevelDisplay userLevel={createMockUserLevel()} />)\r\n\r\n      const container = screen.getByTestId(\"level-display\")\r\n\r\n      // 모바일 크기\r\n      Object.defineProperty(window, \"innerWidth\", {\r\n        writable: true,\r\n        configurable: true,\r\n        value: 375,\r\n      })\r\n      window.dispatchEvent(new Event(\"resize\"))\r\n\r\n      expect(container).toBeInTheDocument()\r\n\r\n      // 데스크톱 크기\r\n      Object.defineProperty(window, \"innerWidth\", {\r\n        writable: true,\r\n        configurable: true,\r\n        value: 1920,\r\n      })\r\n      window.dispatchEvent(new Event(\"resize\"))\r\n\r\n      expect(container).toBeInTheDocument()\r\n    })\r\n  })\r\n\r\n  describe(\"국제화\", () => {\r\n    it(\"should support different languages\", () => {\r\n      // 한국어 (기본)\r\n      render(<LevelDisplay userLevel={createMockUserLevel()} />)\r\n      expect(screen.getByText(/초보자/)).toBeInTheDocument()\r\n\r\n      // 다른 언어 지원이 있다면 여기에 테스트 추가\r\n      // 예: 영어, 일본어 등\r\n    })\r\n  })\r\n})\r\n"],"version":3}