aaa70ffc4bd42a7f303f1d835d5ff934
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// 통합 테스트 환경 설정
require("@testing-library/jest-dom");
// 환경 변수 설정
process.env.NODE_ENV = 'test';
// 전역 모킹 설정
global.console = {
    ...console,
    // 테스트 중 불필요한 로그 숨김
    log: jest.fn(),
    debug: jest.fn(),
    info: jest.fn(),
    warn: jest.fn(),
    error: jest.fn(),
};
// MSW 설정 (API 모킹)
if (typeof window !== 'undefined') {
    const { server } = require('./shared/mocks/server');
    beforeAll(() => server.listen());
    afterEach(() => server.resetHandlers());
    afterAll(() => server.close());
}
// 전역 테스트 유틸리티
global.testUtils = {
    // 테스트 데이터 생성 헬퍼
    createMockUser: (overrides = {}) => ({
        id: 1,
        email: 'test@example.com',
        nickname: 'TestUser',
        birthDate: new Date('1990-01-01'),
        gender: 'male',
        phoneNumber: '010-1234-5678',
        level: 1,
        exp: 0,
        createdAt: new Date(),
        updatedAt: new Date(),
        ...overrides,
    }),
    // API 응답 모킹 헬퍼
    createMockApiResponse: (data, success = true) => ({
        success,
        data,
        message: success ? 'Success' : 'Error',
    }),
    // 에러 응답 모킹 헬퍼
    createMockErrorResponse: (message = 'Error occurred') => ({
        success: false,
        data: null,
        message,
    }),
};
// 커스텀 매처 추가
expect.extend({
    toHaveBeenCalledWithUser(received, expectedUser) {
        const pass = received.mock.calls.some((call) => call.some((arg) => arg && typeof arg === 'object' && arg.id === expectedUser.id));
        return {
            pass,
            message: () => `expected ${received.getMockName()} to have been called with user ${JSON.stringify(expectedUser)}`,
        };
    },
    toHaveBeenCalledWithToken(received, expectedToken) {
        const pass = received.mock.calls.some((call) => call.some((arg) => arg === expectedToken));
        return {
            pass,
            message: () => `expected ${received.getMockName()} to have been called with token "${expectedToken}"`,
        };
    },
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFzsnqzsvZRcXERvY3VtZW50c1xcR2l0SHViXFxkZXVrZ2V1bl9SZWFjdFByb2plY3RcXGRldWtnZXVuXFxzcmNcXHRlc3RcXHNldHVwLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsZUFBZTtBQUNmLHFDQUFrQztBQUVsQyxXQUFXO0FBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFBO0FBRTdCLFdBQVc7QUFDWCxNQUFNLENBQUMsT0FBTyxHQUFHO0lBQ2YsR0FBRyxPQUFPO0lBQ1YsbUJBQW1CO0lBQ25CLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0lBQ2QsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDaEIsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtJQUNmLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0NBQ2pCLENBQUE7QUFFRCxrQkFBa0I7QUFDbEIsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLHVCQUF1QixDQUFDLENBQUE7SUFDbkQsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBO0lBQ2hDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQTtJQUN2QyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUE7QUFDaEMsQ0FBQztBQUVELGNBQWM7QUFDZCxNQUFNLENBQUMsU0FBUyxHQUFHO0lBQ2pCLGdCQUFnQjtJQUNoQixjQUFjLEVBQUUsQ0FBQyxTQUFTLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ25DLEVBQUUsRUFBRSxDQUFDO1FBQ0wsS0FBSyxFQUFFLGtCQUFrQjtRQUN6QixRQUFRLEVBQUUsVUFBVTtRQUNwQixTQUFTLEVBQUUsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQ2pDLE1BQU0sRUFBRSxNQUFNO1FBQ2QsV0FBVyxFQUFFLGVBQWU7UUFDNUIsS0FBSyxFQUFFLENBQUM7UUFDUixHQUFHLEVBQUUsQ0FBQztRQUNOLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRTtRQUNyQixTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUU7UUFDckIsR0FBRyxTQUFTO0tBQ2IsQ0FBQztJQUVGLGVBQWU7SUFDZixxQkFBcUIsRUFBRSxDQUFDLElBQVMsRUFBRSxPQUFPLEdBQUcsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3JELE9BQU87UUFDUCxJQUFJO1FBQ0osT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPO0tBQ3ZDLENBQUM7SUFFRixjQUFjO0lBQ2QsdUJBQXVCLEVBQUUsQ0FBQyxPQUFPLEdBQUcsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDeEQsT0FBTyxFQUFFLEtBQUs7UUFDZCxJQUFJLEVBQUUsSUFBSTtRQUNWLE9BQU87S0FDUixDQUFDO0NBQ0gsQ0FBQTtBQWtCRCxZQUFZO0FBQ1osTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNaLHdCQUF3QixDQUFDLFFBQVEsRUFBRSxZQUFZO1FBQzdDLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQVcsRUFBRSxFQUFFLENBQ3BELElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFRLEVBQUUsRUFBRSxDQUNyQixHQUFHLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssWUFBWSxDQUFDLEVBQUUsQ0FDN0QsQ0FDRixDQUFBO1FBRUQsT0FBTztZQUNMLElBQUk7WUFDSixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQ1osWUFBWSxRQUFRLENBQUMsV0FBVyxFQUFFLGtDQUFrQyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxFQUFFO1NBQ3JHLENBQUE7SUFDSCxDQUFDO0lBRUQseUJBQXlCLENBQUMsUUFBUSxFQUFFLGFBQWE7UUFDL0MsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBVyxFQUFFLEVBQUUsQ0FDcEQsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQVEsRUFBRSxFQUFFLENBQUMsR0FBRyxLQUFLLGFBQWEsQ0FBQyxDQUMvQyxDQUFBO1FBRUQsT0FBTztZQUNMLElBQUk7WUFDSixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQ1osWUFBWSxRQUFRLENBQUMsV0FBVyxFQUFFLG9DQUFvQyxhQUFhLEdBQUc7U0FDekYsQ0FBQTtJQUNILENBQUM7Q0FDRixDQUFDLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFzsnqzsvZRcXERvY3VtZW50c1xcR2l0SHViXFxkZXVrZ2V1bl9SZWFjdFByb2plY3RcXGRldWtnZXVuXFxzcmNcXHRlc3RcXHNldHVwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIO2Gte2VqSDthYzsiqTtirgg7ZmY6rK9IOyEpOyglVxyXG5pbXBvcnQgJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20nXHJcblxyXG4vLyDtmZjqsr0g67OA7IiYIOyEpOyglVxyXG5wcm9jZXNzLmVudi5OT0RFX0VOViA9ICd0ZXN0J1xyXG5cclxuLy8g7KCE7JetIOuqqO2CuSDshKTsoJVcclxuZ2xvYmFsLmNvbnNvbGUgPSB7XHJcbiAgLi4uY29uc29sZSxcclxuICAvLyDthYzsiqTtirgg7KSRIOu2iO2VhOyalO2VnCDroZzqt7gg7Iio6rmAXHJcbiAgbG9nOiBqZXN0LmZuKCksXHJcbiAgZGVidWc6IGplc3QuZm4oKSxcclxuICBpbmZvOiBqZXN0LmZuKCksXHJcbiAgd2FybjogamVzdC5mbigpLFxyXG4gIGVycm9yOiBqZXN0LmZuKCksXHJcbn1cclxuXHJcbi8vIE1TVyDshKTsoJUgKEFQSSDrqqjtgrkpXHJcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xyXG4gIGNvbnN0IHsgc2VydmVyIH0gPSByZXF1aXJlKCcuL3NoYXJlZC9tb2Nrcy9zZXJ2ZXInKVxyXG4gIGJlZm9yZUFsbCgoKSA9PiBzZXJ2ZXIubGlzdGVuKCkpXHJcbiAgYWZ0ZXJFYWNoKCgpID0+IHNlcnZlci5yZXNldEhhbmRsZXJzKCkpXHJcbiAgYWZ0ZXJBbGwoKCkgPT4gc2VydmVyLmNsb3NlKCkpXHJcbn1cclxuXHJcbi8vIOyghOyXrSDthYzsiqTtirgg7Jyg7Yu466as7YuwXHJcbmdsb2JhbC50ZXN0VXRpbHMgPSB7XHJcbiAgLy8g7YWM7Iqk7Yq4IOuNsOydtO2EsCDsg53shLEg7Zes7Y28XHJcbiAgY3JlYXRlTW9ja1VzZXI6IChvdmVycmlkZXMgPSB7fSkgPT4gKHtcclxuICAgIGlkOiAxLFxyXG4gICAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyxcclxuICAgIG5pY2tuYW1lOiAnVGVzdFVzZXInLFxyXG4gICAgYmlydGhEYXRlOiBuZXcgRGF0ZSgnMTk5MC0wMS0wMScpLFxyXG4gICAgZ2VuZGVyOiAnbWFsZScsXHJcbiAgICBwaG9uZU51bWJlcjogJzAxMC0xMjM0LTU2NzgnLFxyXG4gICAgbGV2ZWw6IDEsXHJcbiAgICBleHA6IDAsXHJcbiAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXHJcbiAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKCksXHJcbiAgICAuLi5vdmVycmlkZXMsXHJcbiAgfSksXHJcbiAgXHJcbiAgLy8gQVBJIOydkeuLtSDrqqjtgrkg7Zes7Y28XHJcbiAgY3JlYXRlTW9ja0FwaVJlc3BvbnNlOiAoZGF0YTogYW55LCBzdWNjZXNzID0gdHJ1ZSkgPT4gKHtcclxuICAgIHN1Y2Nlc3MsXHJcbiAgICBkYXRhLFxyXG4gICAgbWVzc2FnZTogc3VjY2VzcyA/ICdTdWNjZXNzJyA6ICdFcnJvcicsXHJcbiAgfSksXHJcbiAgXHJcbiAgLy8g7JeQ65+sIOydkeuLtSDrqqjtgrkg7Zes7Y28XHJcbiAgY3JlYXRlTW9ja0Vycm9yUmVzcG9uc2U6IChtZXNzYWdlID0gJ0Vycm9yIG9jY3VycmVkJykgPT4gKHtcclxuICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgZGF0YTogbnVsbCxcclxuICAgIG1lc3NhZ2UsXHJcbiAgfSksXHJcbn1cclxuXHJcbi8vIO2DgOyehSDsoJXsnZhcclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gIG5hbWVzcGFjZSBqZXN0IHtcclxuICAgIGludGVyZmFjZSBNYXRjaGVyczxSPiB7XHJcbiAgICAgIHRvSGF2ZUJlZW5DYWxsZWRXaXRoVXNlcjogKGV4cGVjdGVkVXNlcjogYW55KSA9PiBSXHJcbiAgICAgIHRvSGF2ZUJlZW5DYWxsZWRXaXRoVG9rZW46IChleHBlY3RlZFRva2VuOiBzdHJpbmcpID0+IFJcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgdmFyIHRlc3RVdGlsczoge1xyXG4gICAgY3JlYXRlTW9ja1VzZXI6IChvdmVycmlkZXM/OiBhbnkpID0+IGFueVxyXG4gICAgY3JlYXRlTW9ja0FwaVJlc3BvbnNlOiAoZGF0YTogYW55LCBzdWNjZXNzPzogYm9vbGVhbikgPT4gYW55XHJcbiAgICBjcmVhdGVNb2NrRXJyb3JSZXNwb25zZTogKG1lc3NhZ2U/OiBzdHJpbmcpID0+IGFueVxyXG4gIH1cclxufVxyXG5cclxuLy8g7Luk7Iqk7YWAIOunpOyymCDstpTqsIBcclxuZXhwZWN0LmV4dGVuZCh7XHJcbiAgdG9IYXZlQmVlbkNhbGxlZFdpdGhVc2VyKHJlY2VpdmVkLCBleHBlY3RlZFVzZXIpIHtcclxuICAgIGNvbnN0IHBhc3MgPSByZWNlaXZlZC5tb2NrLmNhbGxzLnNvbWUoKGNhbGw6IGFueVtdKSA9PlxyXG4gICAgICBjYWxsLnNvbWUoKGFyZzogYW55KSA9PiBcclxuICAgICAgICBhcmcgJiYgdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnLmlkID09PSBleHBlY3RlZFVzZXIuaWRcclxuICAgICAgKVxyXG4gICAgKVxyXG4gICAgXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBwYXNzLFxyXG4gICAgICBtZXNzYWdlOiAoKSA9PlxyXG4gICAgICAgIGBleHBlY3RlZCAke3JlY2VpdmVkLmdldE1vY2tOYW1lKCl9IHRvIGhhdmUgYmVlbiBjYWxsZWQgd2l0aCB1c2VyICR7SlNPTi5zdHJpbmdpZnkoZXhwZWN0ZWRVc2VyKX1gLFxyXG4gICAgfVxyXG4gIH0sXHJcbiAgXHJcbiAgdG9IYXZlQmVlbkNhbGxlZFdpdGhUb2tlbihyZWNlaXZlZCwgZXhwZWN0ZWRUb2tlbikge1xyXG4gICAgY29uc3QgcGFzcyA9IHJlY2VpdmVkLm1vY2suY2FsbHMuc29tZSgoY2FsbDogYW55W10pID0+XHJcbiAgICAgIGNhbGwuc29tZSgoYXJnOiBhbnkpID0+IGFyZyA9PT0gZXhwZWN0ZWRUb2tlbilcclxuICAgIClcclxuICAgIFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcGFzcyxcclxuICAgICAgbWVzc2FnZTogKCkgPT5cclxuICAgICAgICBgZXhwZWN0ZWQgJHtyZWNlaXZlZC5nZXRNb2NrTmFtZSgpfSB0byBoYXZlIGJlZW4gY2FsbGVkIHdpdGggdG9rZW4gXCIke2V4cGVjdGVkVG9rZW59XCJgLFxyXG4gICAgfVxyXG4gIH0sXHJcbn0pXHJcbiJdLCJ2ZXJzaW9uIjozfQ==