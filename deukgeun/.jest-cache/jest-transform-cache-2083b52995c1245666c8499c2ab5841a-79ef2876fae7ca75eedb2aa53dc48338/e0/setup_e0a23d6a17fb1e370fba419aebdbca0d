7e80491b8a9c5000ee89368e9f4f5890
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// 통합 테스트 환경 설정
require("@testing-library/jest-dom");
// 환경 변수 설정
process.env.NODE_ENV = 'test';
// 전역 모킹 설정
global.console = {
    ...console,
    // 테스트 중 불필요한 로그 숨김
    log: jest.fn(),
    debug: jest.fn(),
    info: jest.fn(),
    warn: jest.fn(),
    error: jest.fn(),
};
// MSW 설정 (API 모킹) - 브라우저 환경에서만
if (typeof window !== 'undefined') {
    try {
        const { server } = require('./shared/mocks/server');
        beforeAll(() => server.listen());
        afterEach(() => server.resetHandlers());
        afterAll(() => server.close());
    }
    catch (error) {
        console.warn('MSW server not available for testing');
    }
}
// 전역 테스트 유틸리티
global.testUtils = {
    // 테스트 데이터 생성 헬퍼
    createMockUser: (overrides = {}) => ({
        id: 1,
        email: 'test@example.com',
        nickname: 'TestUser',
        birthDate: new Date('1990-01-01'),
        gender: 'male',
        phoneNumber: '010-1234-5678',
        level: 1,
        exp: 0,
        createdAt: new Date(),
        updatedAt: new Date(),
        ...overrides,
    }),
    // API 응답 모킹 헬퍼
    createMockApiResponse: (data, success = true) => ({
        success,
        data,
        message: success ? 'Success' : 'Error',
    }),
    // 에러 응답 모킹 헬퍼
    createMockErrorResponse: (message = 'Error occurred') => ({
        success: false,
        data: null,
        message,
    }),
};
// 커스텀 매처 추가
expect.extend({
    toHaveBeenCalledWithUser(received, expectedUser) {
        const pass = received.mock.calls.some((call) => call.some((arg) => arg && typeof arg === 'object' && arg.id === expectedUser.id));
        return {
            pass,
            message: () => `expected ${received.getMockName()} to have been called with user ${JSON.stringify(expectedUser)}`,
        };
    },
    toHaveBeenCalledWithToken(received, expectedToken) {
        const pass = received.mock.calls.some((call) => call.some((arg) => arg === expectedToken));
        return {
            pass,
            message: () => `expected ${received.getMockName()} to have been called with token "${expectedToken}"`,
        };
    },
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFzsnqzsvZRcXERvY3VtZW50c1xcR2l0SHViXFxkZXVrZ2V1bl9SZWFjdFByb2plY3RcXGRldWtnZXVuXFxzcmNcXHRlc3RcXHNldHVwLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsZUFBZTtBQUNmLHFDQUFrQztBQUVsQyxXQUFXO0FBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFBO0FBRTdCLFdBQVc7QUFDWCxNQUFNLENBQUMsT0FBTyxHQUFHO0lBQ2YsR0FBRyxPQUFPO0lBQ1YsbUJBQW1CO0lBQ25CLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0lBQ2QsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDaEIsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtJQUNmLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0NBQ2pCLENBQUE7QUFFRCwrQkFBK0I7QUFDL0IsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxJQUFJLENBQUM7UUFDSCxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLHVCQUF1QixDQUFDLENBQUE7UUFDbkQsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBO1FBQ2hDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQTtRQUN2QyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUE7SUFDaEMsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDZixPQUFPLENBQUMsSUFBSSxDQUFDLHNDQUFzQyxDQUFDLENBQUE7SUFDdEQsQ0FBQztBQUNILENBQUM7QUFFRCxjQUFjO0FBQ2QsTUFBTSxDQUFDLFNBQVMsR0FBRztJQUNqQixnQkFBZ0I7SUFDaEIsY0FBYyxFQUFFLENBQUMsU0FBUyxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNuQyxFQUFFLEVBQUUsQ0FBQztRQUNMLEtBQUssRUFBRSxrQkFBa0I7UUFDekIsUUFBUSxFQUFFLFVBQVU7UUFDcEIsU0FBUyxFQUFFLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQztRQUNqQyxNQUFNLEVBQUUsTUFBTTtRQUNkLFdBQVcsRUFBRSxlQUFlO1FBQzVCLEtBQUssRUFBRSxDQUFDO1FBQ1IsR0FBRyxFQUFFLENBQUM7UUFDTixTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUU7UUFDckIsU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFO1FBQ3JCLEdBQUcsU0FBUztLQUNiLENBQUM7SUFFRixlQUFlO0lBQ2YscUJBQXFCLEVBQUUsQ0FBQyxJQUFTLEVBQUUsT0FBTyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNyRCxPQUFPO1FBQ1AsSUFBSTtRQUNKLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTztLQUN2QyxDQUFDO0lBRUYsY0FBYztJQUNkLHVCQUF1QixFQUFFLENBQUMsT0FBTyxHQUFHLGdCQUFnQixFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3hELE9BQU8sRUFBRSxLQUFLO1FBQ2QsSUFBSSxFQUFFLElBQUk7UUFDVixPQUFPO0tBQ1IsQ0FBQztDQUNILENBQUE7QUFrQkQsWUFBWTtBQUNaLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDWix3QkFBd0IsQ0FBQyxRQUFRLEVBQUUsWUFBWTtRQUM3QyxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFXLEVBQUUsRUFBRSxDQUNwRCxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBUSxFQUFFLEVBQUUsQ0FDckIsR0FBRyxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLFlBQVksQ0FBQyxFQUFFLENBQzdELENBQ0YsQ0FBQTtRQUVELE9BQU87WUFDTCxJQUFJO1lBQ0osT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUNaLFlBQVksUUFBUSxDQUFDLFdBQVcsRUFBRSxrQ0FBa0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsRUFBRTtTQUNyRyxDQUFBO0lBQ0gsQ0FBQztJQUVELHlCQUF5QixDQUFDLFFBQVEsRUFBRSxhQUFhO1FBQy9DLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQVcsRUFBRSxFQUFFLENBQ3BELElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFRLEVBQUUsRUFBRSxDQUFDLEdBQUcsS0FBSyxhQUFhLENBQUMsQ0FDL0MsQ0FBQTtRQUVELE9BQU87WUFDTCxJQUFJO1lBQ0osT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUNaLFlBQVksUUFBUSxDQUFDLFdBQVcsRUFBRSxvQ0FBb0MsYUFBYSxHQUFHO1NBQ3pGLENBQUE7SUFDSCxDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xc7J6s7L2UXFxEb2N1bWVudHNcXEdpdEh1YlxcZGV1a2dldW5fUmVhY3RQcm9qZWN0XFxkZXVrZ2V1blxcc3JjXFx0ZXN0XFxzZXR1cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyDthrXtlakg7YWM7Iqk7Yq4IO2ZmOqyvSDshKTsoJVcclxuaW1wb3J0ICdAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tJ1xyXG5cclxuLy8g7ZmY6rK9IOuzgOyImCDshKTsoJVcclxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgPSAndGVzdCdcclxuXHJcbi8vIOyghOyXrSDrqqjtgrkg7ISk7KCVXHJcbmdsb2JhbC5jb25zb2xlID0ge1xyXG4gIC4uLmNvbnNvbGUsXHJcbiAgLy8g7YWM7Iqk7Yq4IOykkSDrtojtlYTsmpTtlZwg66Gc6re4IOyIqOq5gFxyXG4gIGxvZzogamVzdC5mbigpLFxyXG4gIGRlYnVnOiBqZXN0LmZuKCksXHJcbiAgaW5mbzogamVzdC5mbigpLFxyXG4gIHdhcm46IGplc3QuZm4oKSxcclxuICBlcnJvcjogamVzdC5mbigpLFxyXG59XHJcblxyXG4vLyBNU1cg7ISk7KCVIChBUEkg66qo7YK5KSAtIOu4jOudvOyasOyggCDtmZjqsr3sl5DshJzrp4xcclxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHsgc2VydmVyIH0gPSByZXF1aXJlKCcuL3NoYXJlZC9tb2Nrcy9zZXJ2ZXInKVxyXG4gICAgYmVmb3JlQWxsKCgpID0+IHNlcnZlci5saXN0ZW4oKSlcclxuICAgIGFmdGVyRWFjaCgoKSA9PiBzZXJ2ZXIucmVzZXRIYW5kbGVycygpKVxyXG4gICAgYWZ0ZXJBbGwoKCkgPT4gc2VydmVyLmNsb3NlKCkpXHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUud2FybignTVNXIHNlcnZlciBub3QgYXZhaWxhYmxlIGZvciB0ZXN0aW5nJylcclxuICB9XHJcbn1cclxuXHJcbi8vIOyghOyXrSDthYzsiqTtirgg7Jyg7Yu466as7YuwXHJcbmdsb2JhbC50ZXN0VXRpbHMgPSB7XHJcbiAgLy8g7YWM7Iqk7Yq4IOuNsOydtO2EsCDsg53shLEg7Zes7Y28XHJcbiAgY3JlYXRlTW9ja1VzZXI6IChvdmVycmlkZXMgPSB7fSkgPT4gKHtcclxuICAgIGlkOiAxLFxyXG4gICAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyxcclxuICAgIG5pY2tuYW1lOiAnVGVzdFVzZXInLFxyXG4gICAgYmlydGhEYXRlOiBuZXcgRGF0ZSgnMTk5MC0wMS0wMScpLFxyXG4gICAgZ2VuZGVyOiAnbWFsZScsXHJcbiAgICBwaG9uZU51bWJlcjogJzAxMC0xMjM0LTU2NzgnLFxyXG4gICAgbGV2ZWw6IDEsXHJcbiAgICBleHA6IDAsXHJcbiAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXHJcbiAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKCksXHJcbiAgICAuLi5vdmVycmlkZXMsXHJcbiAgfSksXHJcbiAgXHJcbiAgLy8gQVBJIOydkeuLtSDrqqjtgrkg7Zes7Y28XHJcbiAgY3JlYXRlTW9ja0FwaVJlc3BvbnNlOiAoZGF0YTogYW55LCBzdWNjZXNzID0gdHJ1ZSkgPT4gKHtcclxuICAgIHN1Y2Nlc3MsXHJcbiAgICBkYXRhLFxyXG4gICAgbWVzc2FnZTogc3VjY2VzcyA/ICdTdWNjZXNzJyA6ICdFcnJvcicsXHJcbiAgfSksXHJcbiAgXHJcbiAgLy8g7JeQ65+sIOydkeuLtSDrqqjtgrkg7Zes7Y28XHJcbiAgY3JlYXRlTW9ja0Vycm9yUmVzcG9uc2U6IChtZXNzYWdlID0gJ0Vycm9yIG9jY3VycmVkJykgPT4gKHtcclxuICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgZGF0YTogbnVsbCxcclxuICAgIG1lc3NhZ2UsXHJcbiAgfSksXHJcbn1cclxuXHJcbi8vIO2DgOyehSDsoJXsnZhcclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gIG5hbWVzcGFjZSBqZXN0IHtcclxuICAgIGludGVyZmFjZSBNYXRjaGVyczxSPiB7XHJcbiAgICAgIHRvSGF2ZUJlZW5DYWxsZWRXaXRoVXNlcjogKGV4cGVjdGVkVXNlcjogYW55KSA9PiBSXHJcbiAgICAgIHRvSGF2ZUJlZW5DYWxsZWRXaXRoVG9rZW46IChleHBlY3RlZFRva2VuOiBzdHJpbmcpID0+IFJcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgdmFyIHRlc3RVdGlsczoge1xyXG4gICAgY3JlYXRlTW9ja1VzZXI6IChvdmVycmlkZXM/OiBhbnkpID0+IGFueVxyXG4gICAgY3JlYXRlTW9ja0FwaVJlc3BvbnNlOiAoZGF0YTogYW55LCBzdWNjZXNzPzogYm9vbGVhbikgPT4gYW55XHJcbiAgICBjcmVhdGVNb2NrRXJyb3JSZXNwb25zZTogKG1lc3NhZ2U/OiBzdHJpbmcpID0+IGFueVxyXG4gIH1cclxufVxyXG5cclxuLy8g7Luk7Iqk7YWAIOunpOyymCDstpTqsIBcclxuZXhwZWN0LmV4dGVuZCh7XHJcbiAgdG9IYXZlQmVlbkNhbGxlZFdpdGhVc2VyKHJlY2VpdmVkLCBleHBlY3RlZFVzZXIpIHtcclxuICAgIGNvbnN0IHBhc3MgPSByZWNlaXZlZC5tb2NrLmNhbGxzLnNvbWUoKGNhbGw6IGFueVtdKSA9PlxyXG4gICAgICBjYWxsLnNvbWUoKGFyZzogYW55KSA9PiBcclxuICAgICAgICBhcmcgJiYgdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnLmlkID09PSBleHBlY3RlZFVzZXIuaWRcclxuICAgICAgKVxyXG4gICAgKVxyXG4gICAgXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBwYXNzLFxyXG4gICAgICBtZXNzYWdlOiAoKSA9PlxyXG4gICAgICAgIGBleHBlY3RlZCAke3JlY2VpdmVkLmdldE1vY2tOYW1lKCl9IHRvIGhhdmUgYmVlbiBjYWxsZWQgd2l0aCB1c2VyICR7SlNPTi5zdHJpbmdpZnkoZXhwZWN0ZWRVc2VyKX1gLFxyXG4gICAgfVxyXG4gIH0sXHJcbiAgXHJcbiAgdG9IYXZlQmVlbkNhbGxlZFdpdGhUb2tlbihyZWNlaXZlZCwgZXhwZWN0ZWRUb2tlbikge1xyXG4gICAgY29uc3QgcGFzcyA9IHJlY2VpdmVkLm1vY2suY2FsbHMuc29tZSgoY2FsbDogYW55W10pID0+XHJcbiAgICAgIGNhbGwuc29tZSgoYXJnOiBhbnkpID0+IGFyZyA9PT0gZXhwZWN0ZWRUb2tlbilcclxuICAgIClcclxuICAgIFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcGFzcyxcclxuICAgICAgbWVzc2FnZTogKCkgPT5cclxuICAgICAgICBgZXhwZWN0ZWQgJHtyZWNlaXZlZC5nZXRNb2NrTmFtZSgpfSB0byBoYXZlIGJlZW4gY2FsbGVkIHdpdGggdG9rZW4gXCIke2V4cGVjdGVkVG9rZW59XCJgLFxyXG4gICAgfVxyXG4gIH0sXHJcbn0pXHJcbiJdLCJ2ZXJzaW9uIjozfQ==