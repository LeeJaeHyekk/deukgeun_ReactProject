{"file":"C:\\Users\\재코\\Documents\\GitHub\\deukgeun_ReactProject\\deukgeun\\src\\test\\setup.ts","mappings":"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","names":[],"sources":["C:\\Users\\재코\\Documents\\GitHub\\deukgeun_ReactProject\\deukgeun\\src\\test\\setup.ts"],"sourcesContent":["// 통합 테스트 환경 설정\r\nimport '@testing-library/jest-dom'\r\n\r\n// 환경 변수 설정\r\nprocess.env.NODE_ENV = 'test'\r\n\r\n// 전역 모킹 설정\r\nglobal.console = {\r\n  ...console,\r\n  // 테스트 중 불필요한 로그 숨김\r\n  log: jest.fn(),\r\n  debug: jest.fn(),\r\n  info: jest.fn(),\r\n  warn: jest.fn(),\r\n  error: jest.fn(),\r\n}\r\n\r\n// MSW 설정 (API 모킹) - 브라우저 환경에서만\r\nif (typeof window !== 'undefined') {\r\n  try {\r\n    const { server } = require('./shared/mocks/server')\r\n    beforeAll(() => server.listen())\r\n    afterEach(() => server.resetHandlers())\r\n    afterAll(() => server.close())\r\n  } catch (error) {\r\n    console.warn('MSW server not available for testing')\r\n  }\r\n}\r\n\r\n// 전역 테스트 유틸리티\r\nglobal.testUtils = {\r\n  // 테스트 데이터 생성 헬퍼\r\n  createMockUser: (overrides = {}) => ({\r\n    id: 1,\r\n    email: 'test@example.com',\r\n    nickname: 'TestUser',\r\n    birthDate: new Date('1990-01-01'),\r\n    gender: 'male',\r\n    phoneNumber: '010-1234-5678',\r\n    level: 1,\r\n    exp: 0,\r\n    createdAt: new Date(),\r\n    updatedAt: new Date(),\r\n    ...overrides,\r\n  }),\r\n  \r\n  // API 응답 모킹 헬퍼\r\n  createMockApiResponse: (data: any, success = true) => ({\r\n    success,\r\n    data,\r\n    message: success ? 'Success' : 'Error',\r\n  }),\r\n  \r\n  // 에러 응답 모킹 헬퍼\r\n  createMockErrorResponse: (message = 'Error occurred') => ({\r\n    success: false,\r\n    data: null,\r\n    message,\r\n  }),\r\n}\r\n\r\n// 타입 정의\r\ndeclare global {\r\n  namespace jest {\r\n    interface Matchers<R> {\r\n      toHaveBeenCalledWithUser: (expectedUser: any) => R\r\n      toHaveBeenCalledWithToken: (expectedToken: string) => R\r\n    }\r\n  }\r\n  \r\n  var testUtils: {\r\n    createMockUser: (overrides?: any) => any\r\n    createMockApiResponse: (data: any, success?: boolean) => any\r\n    createMockErrorResponse: (message?: string) => any\r\n  }\r\n}\r\n\r\n// 커스텀 매처 추가\r\nexpect.extend({\r\n  toHaveBeenCalledWithUser(received, expectedUser) {\r\n    const pass = received.mock.calls.some((call: any[]) =>\r\n      call.some((arg: any) => \r\n        arg && typeof arg === 'object' && arg.id === expectedUser.id\r\n      )\r\n    )\r\n    \r\n    return {\r\n      pass,\r\n      message: () =>\r\n        `expected ${received.getMockName()} to have been called with user ${JSON.stringify(expectedUser)}`,\r\n    }\r\n  },\r\n  \r\n  toHaveBeenCalledWithToken(received, expectedToken) {\r\n    const pass = received.mock.calls.some((call: any[]) =>\r\n      call.some((arg: any) => arg === expectedToken)\r\n    )\r\n    \r\n    return {\r\n      pass,\r\n      message: () =>\r\n        `expected ${received.getMockName()} to have been called with token \"${expectedToken}\"`,\r\n    }\r\n  },\r\n})\r\n"],"version":3}