{
  "project_migration": {
    "goal": "프론트엔드/백엔드 타입 통합, DTO 중심 구조 적용, 타입 중복 제거, Controller 리팩토링",
    "steps": [
      {
        "step": 1,
        "title": "타입 통합 및 중복 제거",
        "description": "src/types/ 및 src/shared/types/ 중복 타입 제거. 모든 엔티티 타입은 DTO로 통합.",
        "files": [
          "src/types/*",
          "src/shared/types/*",
          "src/shared/types/dto/*"
        ],
        "actions": [
          "중복된 엔티티 타입 제거",
          "DTO 기반 타입으로 모든 참조 코드 변경",
          "필요 시 기존 엔티티 필드에 맞춘 DTO 확장"
        ],
        "priority": "high"
      },
      {
        "step": 2,
        "title": "Controller DTO 적용",
        "description": "모든 Controller에서 엔티티 직접 반환 금지. Transformer를 이용하여 DTO 반환.",
        "files": ["src/backend/controllers/*.ts"],
        "actions": [
          "Controller에서 Repository 결과를 Transformer로 변환",
          "엔티티 대신 DTO 반환",
          "예시 코드 적용:",
          "import { toMachineDTO } from '../transformers/MachineTransformer';",
          "const machines = await machineRepository.find();",
          "return machines.map(toMachineDTO);"
        ],
        "priority": "high"
      },
      {
        "step": 3,
        "title": "Import 경로 표준화",
        "description": "절대 경로를 기반으로 DTO와 엔티티 참조 통일.",
        "files": ["src/frontend/**/*", "src/backend/**/*"],
        "actions": [
          "상대 경로 import 제거",
          "tsconfig.paths.json에 다음 추가:",
          "{ \"@shared/*\": [\"frontend/shared/*\"], \"@dto/*\": [\"frontend/shared/types/dto/*\"], \"@entities/*\": [\"backend/entities/*\"] }",
          "모든 import 문을 절대 경로로 변경"
        ],
        "priority": "high"
      },
      {
        "step": 4,
        "title": "Transformer 강화",
        "description": "DTO 변환 로직을 모든 엔티티에 적용하고, 연관 객체 Flatten/Nested 변환 처리",
        "files": ["src/backend/transformers/*.ts"],
        "actions": [
          "각 엔티티 ↔ DTO 매핑 강화",
          "중첩 관계(flattened/nested) 처리",
          "Controller와 서비스 코드에서 Transformer 사용 강제"
        ],
        "priority": "high"
      },
      {
        "step": 5,
        "title": "Frontend DTO 참조 적용",
        "description": "Frontend는 DTO 타입만 참조하도록 수정",
        "files": [
          "src/frontend/features/**/*.ts",
          "src/frontend/pages/**/*.tsx",
          "src/frontend/widgets/**/*.tsx"
        ],
        "actions": [
          "엔티티 타입 참조 제거",
          "DTO import로 교체",
          "컴포넌트 props와 상태 타입 일관성 유지"
        ],
        "priority": "high"
      },
      {
        "step": 6,
        "title": "테스트 및 검증",
        "description": "모든 Controller 및 Frontend 컴포넌트 정상 동작 확인",
        "files": ["src/test/**/*.ts", "src/frontend/**/*.test.tsx"],
        "actions": [
          "Unit, Integration 테스트 작성 및 실행",
          "API 반환 값이 DTO 구조인지 검증",
          "MSW를 활용한 Frontend API Mock 테스트"
        ],
        "priority": "high"
      },
      {
        "step": 7,
        "title": "자동화 적용",
        "description": "Mix 시스템 기반 DTO/Transformer/Validation 자동 생성 적용",
        "files": [
          "mix.json",
          "src/shared/types/dto/*.ts",
          "src/backend/transformers/*.ts"
        ],
        "actions": [
          "새 엔티티 추가 시 DTO, Transformer, Validation 자동 생성",
          "자동 생성된 코드 확인 및 Controller 적용"
        ],
        "priority": "medium"
      }
    ],
    "summary": {
      "before": "엔티티 직접 반환, 타입 중복, 상대경로 혼재, DTO 미적용",
      "after": "DTO 중심 통합 구조, 타입 중복 제거, 절대 경로 import, Transformer를 통한 DTO 반환, Frontend 일관성 확보"
    }
  }
}
