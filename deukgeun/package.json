{
  "name": "deukgeun",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "concurrently \"npm run dev:backend\" \"npm run dev:frontend\" --kill-others-on-fail",
    "dev:frontend": "vite",
    "build": "npx tsx scripts/build-optimized.ts",
    "preview": "vite preview",
    "lint": "eslint . --report-unused-disable-directives --max-warnings 0",
    "lint:fix": "eslint . --fix",
    "type-check": "tsc --noEmit",
    "validate-env": "npx tsx -e \"import('./src/shared/utils/envValidator.js').then(m => m.runEnvironmentValidation())\"",
    "type-safety": "npx tsx scripts/type-safety-checker.ts",
    "type-safety:report": "npm run type-safety && cat type-safety-report.json",
    "format": "prettier --write \"src/**/*.{ts,tsx,js,jsx,json,css,md}\"",
    "format:check": "prettier --check \"src/**/*.{ts,tsx,js,jsx,json,css,md}\"",
    "dev:backend": "cd src/backend && npm run dev",
    "dev:backend:full": "cd src/backend && npx tsx index.ts",
    "dev:simple": "npx tsx src/backend/scripts/start-simple-direct.ts",
    "dev:simple:robust": "npx tsx src/backend/scripts/start-simple-robust.ts",
    "dev:simple:fallback": "npx tsx src/backend/scripts/start-simple.ts",
    "dev:full": "concurrently \"npx tsx src/backend/simple-full-server.ts\" \"wait-on http://localhost:5000 && npm run dev\" --kill-others-on-fail",
    "build:backend": "cd src/backend && npm run build",
    "build:backend:watch": "cd src/backend && npm run build:watch",
    "build:production": "set NODE_ENV=production && npx tsx scripts/build-optimized.ts --verbose",
    "build:safe": "tsc -p tsconfig.scripts.json && cp dist/scripts/build-safety-manager.js dist/scripts/build-safety-manager.cjs && node dist/scripts/build-safety-manager.cjs",
    "convert:guard": "npx tsx scripts/conversion-guard.ts",
    "convert:js-to-cjs": "npx tsx scripts/js-to-cjs-converter-fixed.ts",
    "deploy:ec2": "bash scripts/ec2-integrated-deploy.sh",
    "deploy:ec2:ts": "tsc -p tsconfig.scripts.json && cp dist/scripts/ec2-integrated-runner.js dist/scripts/ec2-integrated-runner.cjs && node dist/scripts/ec2-integrated-runner.cjs",
    "db:sync": "cd src/backend && npx ts-node scripts/syncDatabase.ts",
    "db:seed": "cd src/backend && npx ts-node scripts/seedInitialData.ts",
    "db:reset": "cd src/backend && npx ts-node scripts/seedInitialData.ts",
    "setup:level-tables": "cd src/backend && npx ts-node scripts/createLevelTables.ts",
    "setup:account-recovery": "cd src/backend && npx ts-node scripts/createAccountRecoveryTables.ts",
    "pm2:start": "npm run build:backend && pm2 start ecosystem.config.cjs",
    "pm2:stop": "pm2 stop ecosystem.config.cjs",
    "pm2:restart": "npm run build:backend && pm2 restart ecosystem.config.cjs",
    "pm2:delete": "pm2 delete ecosystem.config.cjs",
    "pm2:status": "pm2 status",
    "pm2:logs": "pm2 logs",
    "pm2:monitor": "pm2 monit",
    "pm2:reload": "npm run build:backend && pm2 reload ecosystem.config.cjs",
    "script:runner": "npx ts-node scripts/script-runner.ts",
    "script:build": "npx tsx scripts/build-optimized.ts",
    "script:build:legacy": "npx ts-node scripts/build.ts",
    "script:deploy": "npx ts-node scripts/deploy.ts",
    "script:health": "npx ts-node scripts/health.ts",
    "script:pm2": "npx ts-node scripts/pm2.ts",
    "script:env": "npx ts-node scripts/env.ts",
    "script:data": "npx ts-node scripts/data.ts",
    "script:safety": "npx ts-node scripts/safety.ts",
    "script:nginx": "npx ts-node scripts/nginx-manager.ts",
    "script:nginx:deploy": "npx ts-node scripts/nginx-deploy.ts",
    "script:nginx:domain": "npx ts-node scripts/domain-nginx-setup.ts",
    "setup:local": "npx ts-node scripts/setup-local-dev.ts",
    "script:auto": "npx ts-node scripts/auto-compile-runner.ts",
    "script:auto:multiple": "npx ts-node scripts/auto-compile-runner.ts --multiple",
    "script:auto:js-to-cjs": "npx ts-node --transpile-only scripts/auto-compile-runner.ts js-to-cjs-converter.ts",
    "script:auto:build": "npx ts-node scripts/auto-compile-runner.ts build.ts",
    "script:auto:deploy": "npx ts-node scripts/auto-compile-runner.ts deploy-script.ts",
    "script:auto:health": "npx ts-node scripts/auto-compile-runner.ts health-script.ts",
    "script:auto:pm2": "npx ts-node scripts/auto-compile-runner.ts pm2-script.ts",
    "script:auto:env": "npx ts-node scripts/auto-compile-runner.ts env-script.ts",
    "script:auto:data": "npx ts-node scripts/auto-compile-runner.ts data-script.ts",
    "script:auto:safety": "npx ts-node scripts/auto-compile-runner.ts safety-script.ts",
    "script:auto:nginx": "npx ts-node scripts/auto-compile-runner.ts nginx-manager.ts",
    "script:auto:nginx:deploy": "npx ts-node scripts/auto-compile-runner.ts optimized-nginx-deploy.ts",
    "script:auto:nginx:domain": "npx ts-node scripts/auto-compile-runner.ts domain-nginx-setup.ts",
    "script:auto:js-to-cjs:full": "npx ts-node --transpile-only scripts/auto-js-to-cjs-converter.ts",
    "script:auto:js-to-cjs:build": "npx ts-node --transpile-only scripts/auto-js-to-cjs-converter.ts --build",
    "script:auto:js-to-cjs:deploy": "npx ts-node --transpile-only scripts/auto-js-to-cjs-converter.ts --deploy",
    "script:auto:js-to-cjs:all": "npx ts-node --transpile-only scripts/auto-js-to-cjs-converter.ts --build --deploy",
    "script:auto:js-to-cjs:debug": "npx ts-node --transpile-only --inspect scripts/auto-js-to-cjs-converter.ts",
    "script:auto:js-to-cjs:direct": "node --loader ts-node/esm scripts/auto-js-to-cjs-converter.ts",
    "unified": "npx tsx scripts/unified-runner.ts",
    "unified:prod": "npx tsx scripts/unified-runner.ts --environment production --verbose",
    "unified:dev": "npx tsx scripts/unified-runner.ts --environment development --verbose",
    "unified:build": "npx tsx scripts/unified-runner.ts --phases convert,build --verbose",
    "unified:deploy": "npx tsx scripts/unified-runner.ts --phases deploy,pm2,health --verbose",
    "unified:dry": "npx tsx scripts/unified-runner.ts --dry-run --verbose",
    "quick:compile": "tsc -p tsconfig.scripts.json && node dist/scripts/quick-compile.js",
    "quick:compile:all": "tsc -p tsconfig.scripts.json && node dist/scripts/quick-compile.js --all",
    "quick:js-to-cjs": "npm run quick:compile && npx ts-node scripts/js-to-cjs-converter.ts",
    "simple:compile": "npx ts-node scripts/simple-compile.ts",
    "simple:compile:run": "npx ts-node scripts/simple-compile.ts --run",
    "build:local": "npx ts-node scripts/local-build.ts",
    "build:local:watch": "npx ts-node scripts/local-build.ts --watch",
    "build:local:prod": "npx ts-node scripts/local-build.ts --production",
    "nginx:config": "npx ts-node -e \"import('./scripts/modules/nginx-functions.js').then(m => m.saveNginxConfig('./nginx.conf', m.defaultNginxConfig))\"",
    "nginx:config:dev": "npx ts-node -e \"import('./scripts/modules/nginx-functions.js').then(m => m.saveNginxConfig('./nginx.conf', m.generateDevelopmentConfig()))\"",
    "nginx:config:prod": "npx ts-node -e \"import('./scripts/modules/nginx-functions.js').then(m => m.saveNginxConfig('./nginx.conf', m.generateProductionConfig()))\"",
    "nginx:start": "npx ts-node -e \"import('./scripts/modules/nginx-functions.js').then(m => m.startNginx())\"",
    "nginx:stop": "npx ts-node -e \"import('./scripts/modules/nginx-functions.js').then(m => m.stopNginx())\"",
    "nginx:restart": "npx ts-node -e \"import('./scripts/modules/nginx-functions.js').then(m => m.restartNginx())\"",
    "nginx:status": "npx ts-node -e \"import('./scripts/modules/nginx-functions.js').then(m => m.checkNginxStatus())\"",
    "nginx:logs": "npx ts-node -e \"import('./scripts/modules/nginx-functions.js').then(m => m.checkNginxLogs())\"",
    "nginx:monitor": "npx ts-node -e \"import('./scripts/modules/nginx-functions.js').then(m => m.monitorNginxPerformance())\"",
    "health:check": "tsc -p tsconfig.scripts.json && cp dist/scripts/health-monitor.js dist/scripts/health-monitor.cjs && node dist/scripts/health-monitor.cjs check",
    "health:monitor": "tsc -p tsconfig.scripts.json && cp dist/scripts/health-monitor.js dist/scripts/health-monitor.cjs && node dist/scripts/health-monitor.cjs monitor",
    "build:optimized": "npx tsx scripts/build-optimized.ts",
    "build:optimized:verbose": "npx tsx scripts/build-optimized.ts --verbose",
    "build:optimized:dry": "npx tsx scripts/build-optimized.ts --dry-run",
    "build:full": "npm run build:backend && npm run build",
    "build:full:production": "set NODE_ENV=production && npm run build:full",
    "build:enhanced": "npx tsx scripts/enhanced-build-optimized.ts",
    "build:enhanced:verbose": "npx tsx scripts/enhanced-build-optimized.ts --verbose",
    "build:enhanced:dry": "npx tsx scripts/enhanced-build-optimized.ts --dry-run",
    "convert:fixed": "npx tsx scripts/js-to-cjs-converter-fixed.ts",
    "convert:fixed:verbose": "npx tsx scripts/js-to-cjs-converter-fixed.ts --verbose",
    "convert:fixed:dry": "npx tsx scripts/js-to-cjs-converter-fixed.ts --dry-run",
    "convert:enhanced": "npx tsx scripts/enhanced-js-to-cjs-converter.ts",
    "convert:enhanced:verbose": "npx tsx scripts/enhanced-js-to-cjs-converter.ts --verbose",
    "convert:enhanced:dry": "npx tsx scripts/enhanced-js-to-cjs-converter.ts --dry-run",
    "test:crawling-api": "npx tsx scripts/test-crawling-api.ts",
    "test:crawling-api:bash": "chmod +x scripts/test-crawling-api.sh && ./scripts/test-crawling-api.sh",
    "test:server-and-api": "node scripts/start-server-and-test.js",
    "debug:env": "npx tsx src/backend/scripts/debug-environment.ts",
    "debug:db": "npx tsx src/backend/scripts/debug-database.ts",
    "debug:server": "npx tsx src/backend/scripts/debug-server.ts",
    "debug:minimal": "npx tsx src/backend/scripts/minimal-reproduction.ts",
    "debug:all": "npm run debug:env && npm run debug:db && npm run debug:server",
    "check:db": "npx tsx src/backend/scripts/debug-database.ts",
    "check:env": "npx tsx src/backend/scripts/debug-environment.ts",
    "test:simple": "npx tsx src/backend/scripts/test-simple-server.ts",
    "test:simple-db": "npx tsx src/backend/config/database-simple.ts",
    "security:check": "npx tsx src/backend/scripts/validate-env.ts",
    "security:generate": "npx tsx src/backend/scripts/validate-env.ts --generate-secrets"
  },
  "dependencies": {
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-dropdown-menu": "^2.1.15",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-tabs": "^1.1.12",
    "@radix-ui/react-toast": "^1.2.14",
    "@reduxjs/toolkit": "^2.9.1",
    "@types/css-modules": "^1.0.5",
    "@types/react-datepicker": "^7.0.0",
    "aws-sdk": "^2.1692.0",
    "cheerio": "^1.1.2",
    "compression": "^1.8.1",
    "cookie-parser": "^1.4.6",
    "cors": "^2.8.5",
    "cron": "^4.3.3",
    "dotenv": "^17.2.1",
    "helmet": "^7.1.0",
    "lucide-react": "^0.294.0",
    "morgan": "^1.10.0",
    "nodemailer": "^6.9.7",
    "react": "^18.2.0",
    "react-datepicker": "^8.4.0",
    "react-dom": "^18.2.0",
    "react-google-recaptcha": "^3.1.0",
    "react-icons": "^4.12.0",
    "react-redux": "^9.2.0",
    "react-router-dom": "^6.20.1",
    "tailwind-merge": "^3.3.1",
    "winston": "^3.11.0",
    "zod": "^3.25.76",
    "zustand": "^4.4.7"
  },
  "devDependencies": {
    "@tailwindcss/aspect-ratio": "^0.4.2",
    "@tailwindcss/forms": "^0.5.7",
    "@tailwindcss/typography": "^0.5.10",
    "@types/bcrypt": "^6.0.0",
    "@types/cheerio": "^0.22.31",
    "@types/cookie-parser": "^1.4.6",
    "@types/cors": "^2.8.17",
    "@types/express": "^5.0.3",
    "@types/jsonwebtoken": "^9.0.10",
    "@types/morgan": "^1.9.9",
    "@types/node": "^24.7.0",
    "@types/nodemailer": "^6.4.14",
    "@types/react": "^18.2.37",
    "@types/react-dom": "^18.2.15",
    "@types/react-google-recaptcha": "^2.1.9",
    "@typescript-eslint/eslint-plugin": "^6.10.0",
    "@typescript-eslint/parser": "^6.10.0",
    "@vitejs/plugin-react-swc": "^4.0.0",
    "autoprefixer": "^10.4.21",
    "bcrypt": "^6.0.0",
    "concurrently": "^8.2.2",
    "eslint": "^8.53.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.4",
    "express": "^5.1.0",
    "jsonwebtoken": "^9.0.2",
    "prettier": "^3.6.2",
    "tailwindcss": "^3.4.0",
    "terser": "^5.43.1",
    "tsconfig-paths": "^4.2.0",
    "typeorm": "^0.3.26",
    "typescript": "^5.2.2",
    "vite": "^5.0.0",
    "wait-on": "^7.2.0"
  }
}
