{
  "name": "deukgeun",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "build:production": "set NODE_ENV=production && tsc && vite build --mode production",
    "build:analyze": "tsc && vite build --mode analyze",
    "preview": "vite preview",
    "lint": "eslint . --report-unused-disable-directives --max-warnings 0",
    "lint:fix": "eslint . --fix",
    "type-check": "tsc --noEmit",
    "format": "prettier --write \"src/**/*.{ts,tsx,js,jsx,json,css,md}\"",
    "setup:env": "node -e \"const fs=require('fs'); fs.copyFileSync('env.example', '.env'); fs.copyFileSync('src/backend/env.sample', 'src/backend/.env'); console.log('환경 변수 파일이 생성되었습니다. .env 파일을 수정하세요.');\"",
    "dev:backend": "node scripts/start-backend.js",
    "build:backend": "tsc -p src/backend/tsconfig.json",
    "build:backend:production": "set NODE_ENV=production && tsc -p src/backend/tsconfig.json",
    "start:backend": "node dist/backend/index.js",
    "start:backend:production": "set NODE_ENV=production && node dist/backend/index.js",
    "typeorm:migrate": "ts-node -r tsconfig-paths/register -r reflect-metadata src/backend/scripts/typeorm.migrate.ts",
    "backend:dev": "cd src/backend && npm run dev",
    "backend:build": "cd src/backend && npm run build",
    "backend:start": "cd src/backend && npm start",
    "setup:test-user": "cd src/backend && npx ts-node scripts/setupTestUser.ts",
    "setup:level-tables": "cd src/backend && npx ts-node scripts/createLevelTables.ts",
    "db:seed": "cd src/backend && npx ts-node scripts/seedInitialData.ts",
    "db:reset": "cd src/backend && npx ts-node scripts/seedInitialData.ts",
    "db:sync": "cd src/backend && npx ts-node scripts/syncDatabase.ts",
    "db:safe-reset": "cd src/backend && npx ts-node scripts/safeDatabaseReset.ts",
    "db:direct-reset": "cd src/backend && npx ts-node scripts/directDatabaseReset.ts",
    "update:machines": "cd src/backend && npx ts-node scripts/updateMachinesFromJson.ts",
    "dev:full": "concurrently \"npm run backend:dev\" \"wait-on http://localhost:5000 && npm run dev\" --kill-others-on-fail",
    "build:full:production": "npm run build:backend:production && npm run build:production",
    "pm2:start": "pm2 start ecosystem.config.js",
    "pm2:stop": "pm2 stop ecosystem.config.js",
    "pm2:restart": "pm2 restart ecosystem.config.js",
    "pm2:delete": "pm2 delete ecosystem.config.js",
    "pm2:logs": "pm2 logs",
    "pm2:status": "pm2 status",
    "generate:code": "ts-node scripts/generateFromMix.ts",
    "generate:code:v2": "node scripts/generateFromMixV2.js",
    "generate:watch": "nodemon --watch mix.json --exec \"npm run generate:code:v2\"",
    "validate:mix": "ts-node scripts/validateMixConfig.ts",
    "mix:setup": "npm run validate:mix && npm run generate:code:v2",
    "mix:dev": "npm run generate:watch",
    "mix:optimize": "npm run generate:code:v2 && npm run type-check",
    "deploy:ec2": "npm run build:full:production && npm run pm2:start",
    "deploy:ec2:restart": "npm run pm2:restart",
    "deploy:ec2:stop": "npm run pm2:stop",
    "deploy:ec2:logs": "npm run pm2:logs",
    "test": "vitest",
    "test:ui": "vitest --ui",
    "test:run": "vitest run",
    "test:coverage": "vitest run --coverage",
    "test:watch": "vitest --watch",
    "test:unit": "vitest run --reporter=verbose src/frontend/**/*.test.{ts,tsx}",
    "test:integration": "vitest run --reporter=verbose src/frontend/**/*.integration.test.{ts,tsx}",
    "test:e2e": "vitest run --reporter=verbose src/frontend/**/*.e2e.test.{ts,tsx}",
    "test:all": "npm run test:unit && npm run test:integration && npm run test:e2e",
    "test:setup": "node scripts/test-setup.js setup",
    "test:runner": "node scripts/test-runner.js",
    "test:watch-script": "node scripts/test-watch.js watch",
    "test:report": "node scripts/test-runner.js all && open test-reports/test-report.html"
  },
  "dependencies": {
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-dropdown-menu": "^2.1.15",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-tabs": "^1.1.12",
    "@radix-ui/react-toast": "^1.2.14",
    "@types/css-modules": "^1.0.5",
    "@types/react-datepicker": "^7.0.0",
    "dotenv": "^17.2.1",
    "lucide-react": "^0.294.0",
    "react": "^18.2.0",
    "react-datepicker": "^8.4.0",
    "react-dom": "^18.2.0",
    "react-google-recaptcha": "^3.1.0",
    "react-icons": "^4.12.0",
    "react-router-dom": "^6.20.1",
    "tailwind-merge": "^3.3.1",
    "zod": "^4.0.17",
    "zustand": "^4.4.7"
  },
  "devDependencies": {
    "@types/bcrypt": "^6.0.0",
    "@types/express": "^5.0.3",
    "@types/jsonwebtoken": "^9.0.10",
    "@types/node": "^24.3.0",
    "@types/react": "^18.2.37",
    "@types/react-dom": "^18.2.15",
    "@types/react-google-recaptcha": "^2.1.9",
    "@typescript-eslint/eslint-plugin": "^6.10.0",
    "@typescript-eslint/parser": "^6.10.0",
    "@vitejs/plugin-react-swc": "^4.0.0",
    "@vitest/coverage-v8": "^1.0.0",
    "@testing-library/jest-dom": "^6.1.0",
    "@testing-library/react": "^14.1.0",
    "@testing-library/user-event": "^14.5.0",
    "autoprefixer": "^10.4.21",
    "bcrypt": "^6.0.0",
    "concurrently": "^8.2.2",
    "eslint": "^8.53.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.4",
    "express": "^5.1.0",
    "jsonwebtoken": "^9.0.2",
    "jsdom": "^23.0.0",
    "prettier": "^3.6.2",
    "tailwindcss": "^3.4.0",
    "@tailwindcss/forms": "^0.5.7",
    "@tailwindcss/typography": "^0.5.10",
    "@tailwindcss/aspect-ratio": "^0.4.2",
    "terser": "^5.43.1",
    "tsconfig-paths": "^4.2.0",
    "typeorm": "^0.3.26",
    "typescript": "^5.2.2",
    "vite": "^5.0.0",
    "vitest": "^1.0.0",
    "wait-on": "^7.2.0"
  }
}
