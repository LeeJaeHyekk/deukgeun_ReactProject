// Workout 관련 타입들을 여기에 정의
export interface WorkoutStats {
  totalSessions: number
  totalDuration: number
  totalExercises: number
  averageDuration: number
  completionRate: number
}

export interface ChartData {
  date: string
  duration: number
  sessions: number
  exercises: number
}

export type ChartType = "weekly" | "monthly" | "yearly"
export type TimeRange = "7days" | "30days" | "90days" | "1year"

// 탭 타입 정의 (중앙화)
export type TabType = "overview" | "plans" | "sessions" | "goals" | "progress"

// 세션 상태 타입
export type SessionStatus =
  | "not_started"
  | "in_progress"
  | "paused"
  | "completed"

// 목표 타입
export type GoalType = "weight" | "reps" | "duration" | "frequency"

// 모달 상태 타입
export interface ModalState {
  isOpen: boolean
  data: any | null
}

// 전역 상태 타입
export interface WorkoutJournalState {
  activeTab: TabType
  modalState: {
    plan: ModalState
    session: ModalState
    goal: ModalState
    section: ModalState
  }
  isLoading: boolean
  globalError: string | null
}

// API 응답 타입
export interface ApiResponse<T> {
  success: boolean
  data: T
  message?: string
  error?: string
}

// 탭 설정 타입
export interface TabConfig {
  id: TabType
  label: string
  icon: string
}

// 새로운 섹션 시스템 타입들
export interface SectionTimerState {
  sectionId: number
  isRunning: boolean
  elapsedTime: number
  totalTime: number
  isPaused: boolean
}

export interface GoalSectionConfig {
  goalType: GoalType
  muscleGroup: string
  intensity: "beginner" | "intermediate" | "advanced" | "expert"
  targetValue: number
  currentValue: number
  unit: string
}

export interface AutoGeneratedSection {
  id: number
  goalId: number
  exerciseName: string
  machineId: number
  sets: number
  reps: number
  weight?: number
  restTime: number
  order: number
  isCompleted: boolean
  progress: number
}

export interface SectionGenerationParams {
  goalType: GoalType
  muscleGroup: string
  targetValue: number
  currentValue: number
  userLevel: "beginner" | "intermediate" | "advanced" | "expert"
}

export interface CentralizedTimerState {
  sessionId: number
  isActive: boolean
  totalElapsedTime: number
  sectionTimers: SectionTimerState[]
  currentSectionId: number | null
  isPaused: boolean
}

// 컴포넌트 Props 타입들
export interface TabNavigationProps {
  activeTab: TabType
  onTabChange: (tab: TabType) => void
}

export interface TabContentProps {
  activeTab: TabType
  isLoading: boolean
  dashboardData: any | null
  plans: any[]
  sessions: any[]
  goals: any[]
  plansLoading: boolean
  sessionsLoading: boolean
  goalsLoading: boolean
  onPlanClick: (planId: number) => void
  onSessionClick: (sessionId: number) => void
  onGoalClick: (goalId: number) => void
  onCreatePlan: () => void
  onEditPlan: (planId: number) => void
  onStartSession: (planId: number) => void
  onCreateSession: () => void
  onEditSession: (sessionId: number) => void
  onViewSession: (sessionId: number) => void
  onCreateGoal: () => void
  onEditGoal: (goalId: number) => void
  onDeletePlan: () => void
  onDeleteSession: () => void
  onDeleteGoal: () => void
}

// 카드 컴포넌트 Props 표준화
export interface CardProps {
  data: any
  onEdit?: () => void
  onDelete?: () => void
  onView?: () => void
  onStartSession?: () => void
}

// WorkoutPlanCard Props
export interface WorkoutPlanCardProps {
  plan: any
  onEdit?: () => void
  onDelete?: () => void
  onStartSession?: () => void
  onClick?: () => void
  compact?: boolean
  className?: string
}

// SessionCard Props
export interface SessionCardProps {
  session: any
  isActive?: boolean
  onView?: () => void
  onEdit?: () => void
  onDelete?: () => void
  onStart?: () => void
  onPause?: () => void
  onComplete?: () => void
  onClick?: () => void
  compact?: boolean
}

// GoalProgressBar Props
export interface GoalProgressBarProps {
  goal: any
  onEdit?: () => void
  onDelete?: () => void
  onClick?: () => void
  compact?: boolean
}

// 새로운 섹션 관련 Props
export interface SectionTimerProps {
  section: AutoGeneratedSection
  timerState: SectionTimerState
  onStart: (sectionId: number) => void
  onPause: (sectionId: number) => void
  onComplete: (sectionId: number) => void
}

export interface GoalSectionDisplayProps {
  goal: any
  sections: AutoGeneratedSection[]
  onSectionComplete: (sectionId: number) => void
  onSectionEdit: (sectionId: number) => void
}

export interface SectionGenerationServiceProps {
  goalConfig: GoalSectionConfig
  onSectionsGenerated: (sections: AutoGeneratedSection[]) => void
  onError: (error: string) => void
}
