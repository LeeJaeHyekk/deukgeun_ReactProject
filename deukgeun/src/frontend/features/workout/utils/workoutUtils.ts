// ============================================================================
// Workout 관련 유틸리티 함수들
// ============================================================================

import { ChartData, WorkoutStats, SessionStatus } from "../types"
import { ERROR_MESSAGES, SUCCESS_MESSAGES } from "../constants"
import type {
  GoalType,
  AutoGeneratedSection,
  GoalSectionConfig,
} from "../types"

/**
 * 목표 타입별 설정 반환
 */
export function getGoalTypeConfig(goalType: GoalType) {
  const configs = {
    weight: {
      label: "무게",
      unit: "kg",
      minValue: 0,
      maxValue: 500,
      step: 2.5,
      description: "목표 무게를 설정하세요",
    },
    reps: {
      label: "반복 횟수",
      unit: "회",
      minValue: 1,
      maxValue: 100,
      step: 1,
      description: "목표 반복 횟수를 설정하세요",
    },
    duration: {
      label: "운동 시간",
      unit: "분",
      minValue: 1,
      maxValue: 180,
      step: 5,
      description: "목표 운동 시간을 설정하세요",
    },
    frequency: {
      label: "운동 빈도",
      unit: "회/주",
      minValue: 1,
      maxValue: 7,
      step: 1,
      description: "주간 운동 빈도를 설정하세요",
    },
    streak: {
      label: "연속 운동",
      unit: "일",
      minValue: 1,
      maxValue: 365,
      step: 1,
      description: "목표 연속 운동 일수를 설정하세요",
    },
  }

  return configs[goalType] || configs.weight
}

/**
 * 목표 진행률 계산 (섹션 기반)
 */
export function calculateGoalProgressFromSections(
  goalConfig: GoalSectionConfig,
  completedSections: AutoGeneratedSection[]
): number {
  if (completedSections.length === 0) return 0

  const completedCount = completedSections.filter(
    section => section.isCompleted
  ).length
  const totalSections = completedSections.length

  return Math.round((completedCount / totalSections) * 100)
}

/**
 * 목표 달성 여부 확인 (섹션 기반)
 */
export function isGoalAchievedFromSections(
  goalConfig: GoalSectionConfig,
  completedSections: AutoGeneratedSection[]
): boolean {
  const { goalType, targetValue, currentValue } = goalConfig

  if (!targetValue || !currentValue) return false

  switch (goalType) {
    case "weight":
      return currentValue >= targetValue
    case "reps":
      return currentValue >= targetValue
    case "duration":
      return currentValue >= targetValue
    case "frequency":
      return completedSections.length >= targetValue
    default:
      return false
  }
}

/**
 * 섹션 완료 시 목표 값 업데이트
 */
export function updateGoalValue(
  goalConfig: GoalSectionConfig,
  completedSection: AutoGeneratedSection
): number {
  const { goalType, currentValue } = goalConfig
  const safeCurrentValue = currentValue || 0

  switch (goalType) {
    case "weight":
      // 무게 목표는 섹션 완료 시 증가
      return safeCurrentValue + (completedSection.weight || 0)
    case "reps":
      // 반복 횟수는 섹션의 총 반복 횟수 추가
      return (
        safeCurrentValue +
        (completedSection.sets || 0) * (completedSection.reps || 0)
      )
    case "duration":
      // 운동 시간은 섹션 완료 시간 추가
      return safeCurrentValue + (completedSection.restTime || 0)
    case "frequency":
      // 빈도는 완료된 섹션 수
      return safeCurrentValue + 1
    default:
      return safeCurrentValue
  }
}

/**
 * 섹션별 예상 완료 시간 계산
 */
export function calculateSectionDuration(
  section: AutoGeneratedSection
): number {
  const { sets, reps, restTime } = section
  const safeSets = sets || 0
  const safeReps = reps || 0
  const safeRestTime = restTime || 0

  // 각 세트당 평균 운동 시간 (초)
  const exerciseTimePerSet = safeReps * 3 // 1회당 3초 가정

  // 총 운동 시간 + 휴식 시간
  const totalExerciseTime = safeSets * exerciseTimePerSet
  const totalRestTime = (safeSets - 1) * safeRestTime // 마지막 세트 후에는 휴식 없음

  return totalExerciseTime + totalRestTime
}

/**
 * 섹션 난이도 평가
 */
export function evaluateSectionDifficulty(
  section: AutoGeneratedSection
): "easy" | "medium" | "hard" {
  const { sets, reps, weight } = section

  // 난이도 점수 계산 (간단한 알고리즘)
  let score = 0

  // 세트 수에 따른 점수
  const safeSets = sets || 0
  if (safeSets <= 2) score += 1
  else if (safeSets <= 3) score += 2
  else score += 3

  // 반복 횟수에 따른 점수
  const safeReps = reps || 0
  if (safeReps <= 8) score += 1
  else if (safeReps <= 12) score += 2
  else score += 3

  // 무게에 따른 점수 (상대적)
  if (weight && weight > 0) {
    if (weight <= 20) score += 1
    else if (weight <= 50) score += 2
    else score += 3
  }

  // 총점에 따른 난이도 반환
  if (score <= 3) return "easy"
  else if (score <= 6) return "medium"
  else return "hard"
}

/**
 * 섹션 완료 시 경험치 계산
 */
export function calculateSectionExperience(
  section: AutoGeneratedSection
): number {
  const difficulty = evaluateSectionDifficulty(section)
  const baseExp = (section.sets || 0) * (section.reps || 0)

  const difficultyMultiplier = {
    easy: 1,
    medium: 1.5,
    hard: 2,
  }

  return Math.round(baseExp * difficultyMultiplier[difficulty])
}

/**
 * 섹션 순서 최적화 (난이도 순)
 */
export function optimizeSectionOrder(
  sections: AutoGeneratedSection[]
): AutoGeneratedSection[] {
  return [...sections].sort((a, b) => {
    const difficultyA = evaluateSectionDifficulty(a)
    const difficultyB = evaluateSectionDifficulty(b)

    const difficultyOrder = { easy: 1, medium: 2, hard: 3 }

    return difficultyOrder[difficultyA] - difficultyOrder[difficultyB]
  })
}

/**
 * 섹션 그룹화 (근육 그룹별)
 */
export function groupSectionsByMuscleGroup(
  sections: AutoGeneratedSection[]
): Record<string, AutoGeneratedSection[]> {
  return sections.reduce(
    (groups, section) => {
      // 운동 이름에서 근육 그룹 추출 (간단한 매핑)
      const muscleGroup = extractMuscleGroupFromExercise(
        section.exerciseName || ""
      )

      if (!groups[muscleGroup]) {
        groups[muscleGroup] = []
      }

      groups[muscleGroup].push(section)
      return groups
    },
    {} as Record<string, AutoGeneratedSection[]>
  )
}

/**
 * 운동 이름에서 근육 그룹 추출
 */
function extractMuscleGroupFromExercise(exerciseName: string): string {
  const muscleGroupMapping: Record<string, string[]> = {
    chest: ["벤치", "프레스", "푸시업", "플라이"],
    back: ["로우", "풀업", "데드리프트", "페이스풀"],
    shoulders: ["밀리터리", "레터럴", "프론트", "업라이트"],
    arms: ["컬", "트라이셉스", "해머", "익스텐션"],
    abs: ["크런치", "플랭크", "레그레이즈", "시트업"],
    legs: ["스쿼트", "런지", "레그프레스", "글루트"],
  }

  const lowerExerciseName = exerciseName.toLowerCase()

  for (const [muscleGroup, keywords] of Object.entries(muscleGroupMapping)) {
    if (
      keywords.some(keyword =>
        lowerExerciseName.includes(keyword.toLowerCase())
      )
    ) {
      return muscleGroup
    }
  }

  return "full_body" // 기본값
}

/**
 * 섹션 완료 통계 계산
 */
export function calculateSectionStats(sections: AutoGeneratedSection[]) {
  const completedSections = sections.filter(s => s.isCompleted)
  const totalSections = sections.length

  return {
    totalSections,
    completedSections: completedSections.length,
    completionRate:
      totalSections > 0
        ? Math.round((completedSections.length / totalSections) * 100)
        : 0,
    totalSets: completedSections.reduce((sum, s) => sum + (s.sets || 0), 0),
    totalReps: completedSections.reduce(
      (sum, s) => sum + (s.sets || 0) * (s.reps || 0),
      0
    ),
    totalWeight: completedSections.reduce((sum, s) => sum + (s.weight || 0), 0),
    averageProgress:
      completedSections.length > 0
        ? Math.round(
            completedSections.reduce((sum, s) => sum + (s.progress || 0), 0) /
              completedSections.length
          )
        : 0,
  }
}

// 차트 데이터 계산 유틸리티
export const calculateChartData = (
  sessions: any[],
  timeRange: string,
  chartType: string
): ChartData[] => {
  if (!sessions || sessions.length === 0) return []

  const now = new Date()
  const filteredSessions = sessions.filter(session => {
    const sessionDate = new Date(session.createdAt)
    const diffTime = now.getTime() - sessionDate.getTime()
    const diffDays = diffTime / (1000 * 60 * 60 * 24)

    switch (timeRange) {
      case "7days":
        return diffDays <= 7
      case "30days":
        return diffDays <= 30
      case "90days":
        return diffDays <= 90
      case "1year":
        return diffDays <= 365
      default:
        return true
    }
  })

  // 날짜별로 그룹화
  const groupedData = filteredSessions.reduce(
    (acc, session) => {
      const date = new Date(session.createdAt).toLocaleDateString()
      if (!acc[date]) {
        acc[date] = {
          date,
          duration: 0,
          sessions: 0,
          exercises: 0,
        }
      }
      acc[date].duration += session.duration || 0
      acc[date].sessions += 1
      acc[date].exercises += session.exerciseSets?.length || 0
      return acc
    },
    {} as Record<string, ChartData>
  )

  const chartDataArray = Object.values(groupedData) as ChartData[]
  return chartDataArray.sort((a, b) => {
    if (!a.date || !b.date) return 0
    return new Date(a.date).getTime() - new Date(b.date).getTime()
  })
}

// 통계 계산 유틸리티
export const calculateWorkoutStats = (sessions: any[]): WorkoutStats => {
  if (!sessions || sessions.length === 0) {
    return {
      totalWorkouts: 0,
      totalSessions: 0,
      totalDuration: 0,
      totalExercises: 0,
      averageDuration: 0,
      completionRate: 0,
      favoriteExercises: [],
      weeklyProgress: [],
      monthlyProgress: [],
    }
  }

  const completedSessions = sessions.filter(s => s.status === "completed")
  const totalDuration = sessions.reduce((sum, s) => sum + (s.duration || 0), 0)
  const totalExercises = sessions.reduce(
    (sum, s) => sum + (s.exerciseSets?.length || 0),
    0
  )

  return {
    totalWorkouts: sessions.length,
    totalSessions: sessions.length,
    totalDuration,
    totalExercises,
    averageDuration:
      sessions.length > 0 ? Math.round(totalDuration / sessions.length) : 0,
    completionRate:
      sessions.length > 0
        ? Math.round((completedSessions.length / sessions.length) * 100)
        : 0,
    favoriteExercises: [],
    weeklyProgress: [],
    monthlyProgress: [],
  }
}

// 목표 진행률 계산 유틸리티
export const calculateGoalProgress = (goal: any): number => {
  if (!goal || !goal.targetValue) return 0
  const progress = (goal.currentValue / goal.targetValue) * 100
  return Math.min(Math.max(progress, 0), 100)
}

// 목표 달성 여부 확인
export const isGoalAchieved = (goal: any): boolean => {
  return goal.currentValue >= goal.targetValue
}

// 세션 상태 유효성 검사
export const isValidSessionStatus = (
  status: string
): status is SessionStatus => {
  return ["not_started", "in_progress", "paused", "completed"].includes(status)
}

// 에러 처리 유틸리티
export const handleApiError = (error: any): string => {
  if (error.response?.status === 401) {
    return ERROR_MESSAGES.AUTH_REQUIRED
  }
  if (error.response?.status >= 500) {
    return ERROR_MESSAGES.NETWORK_ERROR
  }
  if (error.message) {
    return error.message
  }
  return ERROR_MESSAGES.UNKNOWN_ERROR
}

// 성공 메시지 생성
export const getSuccessMessage = (action: string, type: string): string => {
  const key =
    `${type.toUpperCase()}_${action.toUpperCase()}` as keyof typeof SUCCESS_MESSAGES
  return SUCCESS_MESSAGES[key] || "작업이 완료되었습니다"
}

// 로딩 상태 관리 유틸리티
export const createLoadingState = (isLoading: boolean, message?: string) => ({
  isLoading,
  message: message || "로딩 중...",
})

// 데이터 검증 유틸리티
export const validateWorkoutPlan = (plan: any): boolean => {
  return plan && plan.name && plan.name.trim().length > 0
}

export const validateWorkoutSession = (session: any): boolean => {
  return session && session.name && session.name.trim().length > 0
}

export const validateWorkoutGoal = (goal: any): boolean => {
  return (
    goal && goal.title && goal.title.trim().length > 0 && goal.targetValue > 0
  )
}

// 날짜 포맷팅 유틸리티
export const formatDate = (date: string | Date): string => {
  return new Date(date).toLocaleDateString("ko-KR")
}

export const formatDateTime = (date: string | Date): string => {
  return new Date(date).toLocaleString("ko-KR")
}

// 시간 포맷팅 유틸리티
export const formatDuration = (minutes: number): string => {
  const hours = Math.floor(minutes / 60)
  const mins = minutes % 60

  if (hours > 0) {
    return `${hours}시간 ${mins}분`
  }
  return `${mins}분`
}

// 퍼센트 포맷팅 유틸리티
export const formatPercentage = (value: number): string => {
  return `${Math.round(value)}%`
}

// 시간 포맷팅 유틸리티 (초 단위)
export const formatTime = (seconds: number): string => {
  const hours = Math.floor(seconds / 3600)
  const minutes = Math.floor((seconds % 3600) / 60)
  const secs = seconds % 60

  if (hours > 0) {
    return `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}:${secs.toString().padStart(2, "0")}`
  }
  return `${minutes.toString().padStart(2, "0")}:${secs.toString().padStart(2, "0")}`
}

// 난이도 색상 반환
export const getDifficultyColor = (difficulty: string): string => {
  const colors = {
    beginner: "#4CAF50",
    intermediate: "#FF9800",
    advanced: "#F44336",
    expert: "#9C27B0",
  }
  return colors[difficulty as keyof typeof colors] || "#9E9E9E"
}

// 난이도 텍스트 반환
export const getDifficultyText = (difficulty: string): string => {
  const texts = {
    beginner: "초급",
    intermediate: "중급",
    advanced: "고급",
    expert: "전문가",
  }
  return texts[difficulty as keyof typeof texts] || "미정"
}

// 운동 개수 계산
export const getExerciseCount = (plan: any): number => {
  if (!plan || !plan.exercises) return 0
  return Array.isArray(plan.exercises) ? plan.exercises.length : 0
}

// 타겟 근육 그룹 추출
export const getTargetMuscleGroups = (plan: any): string[] => {
  if (!plan || !plan.exercises) return []

  const muscleGroups = new Set<string>()

  if (Array.isArray(plan.exercises)) {
    plan.exercises.forEach((exercise: any) => {
      if (exercise.muscleGroup) {
        muscleGroups.add(exercise.muscleGroup)
      }
    })
  }

  return Array.from(muscleGroups)
}
