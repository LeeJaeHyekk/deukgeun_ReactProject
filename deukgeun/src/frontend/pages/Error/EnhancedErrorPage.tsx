import React, { useState, useEffect, useCallback } from 'react'
import { useNavigate, useLocation } from 'react-router-dom'
import { ROUTES, MENU_ITEMS } from '@frontend/shared/constants/routes'
import { useAuthContext } from '@frontend/shared/contexts/AuthContext'
import { useUserStore } from '@frontend/shared/store/userStore'
import Button from '@frontend/shared/components/Button'
import ErrorNavigation from './ErrorNavigation'
import ErrorAnalytics from './ErrorAnalytics'
import './EnhancedErrorPage.css'

// ÏóêÎü¨ ÌÉÄÏûÖ Ï†ïÏùò
interface ErrorInfo {
  statusCode: number
  title: string
  message: string
  description: string
  icon: string
  color: string
  gradient: string
  suggestions: string[]
  actions: ErrorAction[]
  isRetryable: boolean
  isAuthRequired: boolean
  video?: string
}

interface ErrorAction {
  label: string
  action: () => void
  variant: 'primary' | 'secondary' | 'danger' | 'ghost' | 'success'
  icon?: string
}

interface EnhancedErrorPageProps {
  statusCode?: number
  title?: string
  message?: string
  description?: string
  suggestions?: string[]
  onRetry?: () => void
  showHomeButton?: boolean
  showRetryButton?: boolean
  customActions?: ErrorAction[]
}

export default function EnhancedErrorPage({
  statusCode = 404,
  title,
  message,
  description,
  suggestions,
  onRetry,
  showHomeButton = true,
  showRetryButton = false,
  customActions = [],
}: EnhancedErrorPageProps) {
  const navigate = useNavigate()
  const location = useLocation()
  const { isAuthenticated, user } = useAuthContext()
  const userStore = useUserStore()
  
  const [isVideoLoaded, setIsVideoLoaded] = useState(false)
  const [errorInfo, setErrorInfo] = useState<ErrorInfo | null>(null)
  const [isRetrying, setIsRetrying] = useState(false)
  const [showSuggestions, setShowSuggestions] = useState(false)

  // URL ÌååÎùºÎØ∏ÌÑ∞ÏóêÏÑú ÏóêÎü¨ Ï†ïÎ≥¥ Ï∂îÏ∂ú
  useEffect(() => {
    const searchParams = new URLSearchParams(location.search)
    const urlStatusCode = searchParams.get('code')
    const urlTitle = searchParams.get('title')
    const urlMessage = searchParams.get('message')
    const urlDescription = searchParams.get('description')

    const finalStatusCode = urlStatusCode ? parseInt(urlStatusCode, 10) : statusCode
    const finalTitle = urlTitle ? decodeURIComponent(urlTitle) : title
    const finalMessage = urlMessage ? decodeURIComponent(urlMessage) : message
    const finalDescription = urlDescription ? decodeURIComponent(urlDescription) : description

    setErrorInfo(getErrorInfo(finalStatusCode, finalTitle, finalMessage, finalDescription))
  }, [location, statusCode, title, message, description])

  // ÏóêÎü¨ Ï†ïÎ≥¥ ÏÉùÏÑ± Ìï®Ïàò
  const getErrorInfo = useCallback((
    code: number,
    customTitle?: string,
    customMessage?: string,
    customDescription?: string
  ): ErrorInfo => {
    const baseErrorInfo = {
      statusCode: code,
      title: customTitle || '',
      message: customMessage || '',
      description: customDescription || '',
      icon: '',
      color: '',
      gradient: '',
      suggestions: [],
      actions: [],
      isRetryable: false,
      isAuthRequired: false,
    }

    switch (code) {
      case 400:
        return {
          ...baseErrorInfo,
          title: customTitle || 'ÏûòÎ™ªÎêú ÏöîÏ≤≠',
          message: customMessage || 'ÏöîÏ≤≠ÌïòÏã† Ï†ïÎ≥¥Í∞Ä Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.',
          description: customDescription || 'ÏûÖÎ†•Ìïú Ï†ïÎ≥¥Î•º Îã§Ïãú ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.',
          icon: '‚ö†Ô∏è',
          color: '#f59e0b',
          gradient: 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)',
          suggestions: [
            'ÏûÖÎ†•Ìïú URLÏù¥ÎÇò ÌååÎùºÎØ∏ÌÑ∞Î•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî',
            'Î∏åÎùºÏö∞Ï†Ä Ï∫êÏãúÎ•º ÏÇ≠Ï†úÌï¥Î≥¥ÏÑ∏Ïöî',
            'Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî',
          ],
          isRetryable: true,
        }

      case 401:
        return {
          ...baseErrorInfo,
          title: customTitle || 'Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§',
          message: customMessage || 'Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌïú ÏÑúÎπÑÏä§ÏûÖÎãàÎã§.',
          description: customDescription || 'Î°úÍ∑∏Ïù∏ ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.',
          icon: 'üîê',
          color: '#3b82f6',
          gradient: 'linear-gradient(135deg, #3b82f6 0%, #2563eb 100%)',
          suggestions: [
            'Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌï¥Ï£ºÏÑ∏Ïöî',
            'Í≥ÑÏ†ï Ï†ïÎ≥¥Î•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî',
            'ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Ïû¨ÏÑ§Ï†ïÌï¥Î≥¥ÏÑ∏Ïöî',
          ],
          isAuthRequired: true,
        }

      case 403:
        return {
          ...baseErrorInfo,
          title: customTitle || 'Ï†ëÍ∑ºÏù¥ Í±∞Î∂ÄÎêòÏóàÏäµÎãàÎã§',
          message: customMessage || 'Ïù¥ ÌéòÏù¥ÏßÄÏóê Ï†ëÍ∑ºÌï† Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§.',
          description: customDescription || 'Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Î¨∏ÏùòÌïòÍ±∞ÎÇò Îã§Î•∏ Í≥ÑÏ†ïÏúºÎ°ú Î°úÍ∑∏Ïù∏Ìï¥Î≥¥ÏÑ∏Ïöî.',
          icon: 'üö´',
          color: '#ef4444',
          gradient: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',
          suggestions: [
            'Í≥ÑÏ†ï Í∂åÌïúÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî',
            'Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Î¨∏ÏùòÌï¥Ï£ºÏÑ∏Ïöî',
            'Îã§Î•∏ Í≥ÑÏ†ïÏúºÎ°ú Î°úÍ∑∏Ïù∏Ìï¥Î≥¥ÏÑ∏Ïöî',
          ],
          isAuthRequired: true,
        }

      case 404:
        return {
          ...baseErrorInfo,
          title: customTitle || 'ÌéòÏù¥ÏßÄÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏñ¥Ïöî',
          message: customMessage || 'ÏöîÏ≤≠ÌïòÏã† ÌéòÏù¥ÏßÄÍ∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§.',
          description: customDescription || 'ÌéòÏù¥ÏßÄÍ∞Ä Ïù¥ÎèôÎêòÏóàÍ±∞ÎÇò ÏÇ≠Ï†úÎêòÏóàÏùÑ Ïàò ÏûàÏñ¥Ïöî.',
          icon: 'üîç',
          color: '#f59e0b',
          gradient: 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)',
          suggestions: [
            'URLÏùÑ Îã§Ïãú ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî',
            'ÌôàÌéòÏù¥ÏßÄÏóêÏÑú ÏõêÌïòÎäî ÌéòÏù¥ÏßÄÎ•º Ï∞æÏïÑÎ≥¥ÏÑ∏Ïöî',
            'Í≤ÄÏÉâ Í∏∞Îä•ÏùÑ Ïù¥Ïö©Ìï¥Î≥¥ÏÑ∏Ïöî',
          ],
          video: '/video/404Error.mp4',
        }

      case 500:
        return {
          ...baseErrorInfo,
          title: customTitle || 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§',
          message: customMessage || 'ÏùºÏãúÏ†ÅÏù∏ ÏÑúÎ≤Ñ Ïò§Î•òÏûÖÎãàÎã§.',
          description: customDescription || 'Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.',
          icon: 'üñ•Ô∏è',
          color: '#ef4444',
          gradient: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',
          suggestions: [
            'Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî',
            'Î∏åÎùºÏö∞Ï†ÄÎ•º ÏÉàÎ°úÍ≥†Ïπ®Ìï¥Î≥¥ÏÑ∏Ïöî',
            'Î¨∏Ï†úÍ∞Ä ÏßÄÏÜçÎêòÎ©¥ Í≥†Í∞ùÏÑºÌÑ∞Ïóê Î¨∏ÏùòÌï¥Ï£ºÏÑ∏Ïöî',
          ],
          isRetryable: true,
          video: '/video/500Error.mp4',
        }

      case 503:
        return {
          ...baseErrorInfo,
          title: customTitle || 'ÏÑúÎπÑÏä§Í∞Ä ÏùºÏãúÏ†ÅÏúºÎ°ú ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§',
          message: customMessage || 'ÏÑúÎ≤Ñ Ï†êÍ≤Ä Ï§ëÏûÖÎãàÎã§.',
          description: customDescription || 'Ï†êÍ≤ÄÏù¥ ÏôÑÎ£åÎêòÎ©¥ Îã§Ïãú Ïù¥Ïö©ÌïòÏã§ Ïàò ÏûàÏäµÎãàÎã§.',
          icon: 'üîß',
          color: '#f59e0b',
          gradient: 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)',
          suggestions: [
            'Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî',
            'Í≥µÏßÄÏÇ¨Ìï≠ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî',
            'Ï†êÍ≤Ä ÏãúÍ∞ÑÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî',
          ],
          isRetryable: true,
          video: '/video/503Error.mp4',
        }

      case 999:
        return {
          ...baseErrorInfo,
          title: customTitle || 'ÌòÑÏû¨ Ï§ÄÎπÑÏ§ëÏóê ÏûàÏäµÎãàÎã§',
          message: customMessage || 'Ìï¥Îãπ Í∏∞Îä•ÏùÄ ÌòÑÏû¨ Í∞úÎ∞ú Ï§ëÏûÖÎãàÎã§.',
          description: customDescription || 'Ï°∞Í∏àÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî! Í≥ß ÎßåÎÇòÎ≥¥Ïã§ Ïàò ÏûàÏñ¥Ïöî.',
          icon: 'üöÄ',
          color: '#8b5cf6',
          gradient: 'linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%)',
          suggestions: [
            'Îã§Î•∏ Í∏∞Îä•ÏùÑ Î®ºÏ†Ä Ïù¥Ïö©Ìï¥Î≥¥ÏÑ∏Ïöî',
            'Í≥µÏßÄÏÇ¨Ìï≠ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî',
            'Ïù¥Î©îÏùº ÏïåÎ¶ºÏùÑ Ïã†Ï≤≠Ìï¥Î≥¥ÏÑ∏Ïöî',
          ],
          video: '/video/loading.mp4',
        }

      default:
        return {
          ...baseErrorInfo,
          title: customTitle || 'Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§',
          message: customMessage || 'ÏòàÏÉÅÏπò Î™ªÌïú Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
          description: customDescription || 'Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.',
          icon: '‚ùå',
          color: '#ef4444',
          gradient: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',
          suggestions: [
            'ÌéòÏù¥ÏßÄÎ•º ÏÉàÎ°úÍ≥†Ïπ®Ìï¥Î≥¥ÏÑ∏Ïöî',
            'Î∏åÎùºÏö∞Ï†ÄÎ•º Ïû¨ÏãúÏûëÌï¥Î≥¥ÏÑ∏Ïöî',
            'Î¨∏Ï†úÍ∞Ä ÏßÄÏÜçÎêòÎ©¥ Í≥†Í∞ùÏÑºÌÑ∞Ïóê Î¨∏ÏùòÌï¥Ï£ºÏÑ∏Ïöî',
          ],
          isRetryable: true,
        }
    }
  }, [])

  // Ïï°ÏÖò Ìï∏Îì§Îü¨Îì§
  const handleRetry = useCallback(async () => {
    if (!errorInfo?.isRetryable) return
    
    setIsRetrying(true)
    try {
      if (onRetry) {
        await onRetry()
      } else {
        window.location.reload()
      }
    } catch (error) {
      console.error('Retry failed:', error)
    } finally {
      setIsRetrying(false)
    }
  }, [errorInfo?.isRetryable, onRetry])

  const handleHome = useCallback(() => {
    navigate(ROUTES.HOME, { replace: true })
  }, [navigate])

  const handleBack = useCallback(() => {
    if (window.history.length > 1) {
      navigate(-1)
    } else {
      navigate(ROUTES.HOME)
    }
  }, [navigate])

  const handleLogin = useCallback(() => {
    navigate(ROUTES.LOGIN, { replace: true })
  }, [navigate])

  const handleContact = useCallback(() => {
    // Í≥†Í∞ùÏÑºÌÑ∞ Ïó∞ÎùΩÏ≤òÎÇò Î¨∏Ïùò ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
    window.open('mailto:support@deukgeun.com', '_blank')
  }, [])

  // Í∏∞Î≥∏ Ïï°ÏÖòÎì§ ÏÉùÏÑ±
  const getDefaultActions = useCallback((): ErrorAction[] => {
    const actions: ErrorAction[] = []

    if (errorInfo?.isRetryable && showRetryButton) {
      actions.push({
        label: 'Îã§Ïãú ÏãúÎèÑ',
        action: handleRetry,
        variant: 'primary',
        icon: 'üîÑ',
      })
    }

    if (errorInfo?.isAuthRequired && !isAuthenticated) {
      actions.push({
        label: 'Î°úÍ∑∏Ïù∏',
        action: handleLogin,
        variant: 'primary',
        icon: 'üîê',
      })
    }

    actions.push({
      label: 'Ïù¥Ï†Ñ ÌéòÏù¥ÏßÄ',
      action: handleBack,
      variant: 'secondary',
      icon: '‚¨ÖÔ∏è',
    })

    if (showHomeButton) {
      actions.push({
        label: 'ÌôàÏúºÎ°ú',
        action: handleHome,
        variant: 'success',
        icon: 'üè†',
      })
    }

    actions.push({
      label: 'Í≥†Í∞ùÏÑºÌÑ∞',
      action: handleContact,
      variant: 'ghost',
      icon: 'üìû',
    })

    return actions
  }, [errorInfo, showRetryButton, showHomeButton, isAuthenticated, handleRetry, handleLogin, handleBack, handleHome, handleContact])

  // ÏµúÏ¢Ö Ïï°ÏÖòÎì§ Í≤∞Ï†ï
  const finalActions = customActions.length > 0 ? customActions : getDefaultActions()

  if (!errorInfo) {
    return <div className="error-loading">ÏóêÎü¨ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</div>
  }

  return (
    <div className="enhanced-error-page">
      {/* Î∞∞Í≤Ω Ïï†ÎãàÎ©îÏù¥ÏÖò */}
      <div className="error-background">
        <div className="floating-shape shape-1"></div>
        <div className="floating-shape shape-2"></div>
        <div className="floating-shape shape-3"></div>
      </div>

      <div className="error-container">
        {/* Î©îÏù∏ ÏΩòÌÖêÏ∏† */}
        <div className="error-content">
          {/* ÏïÑÏù¥ÏΩò Î∞è ÎπÑÎîîÏò§ ÏÑπÏÖò */}
          <div className="error-media">
            {errorInfo.video && (
              <div className="error-video-container">
                <video
                  src={errorInfo.video}
                  loop
                  autoPlay
                  muted
                  className="error-video"
                  onLoadedData={() => setIsVideoLoaded(true)}
                  onError={() => setIsVideoLoaded(false)}
                />
                {!isVideoLoaded && (
                  <div className="video-fallback">
                    <div className="fallback-icon">{errorInfo.icon}</div>
                  </div>
                )}
              </div>
            )}
            
            {!errorInfo.video && (
              <div className="error-icon-container">
                <div 
                  className="error-icon"
                  style={{ 
                    background: errorInfo.gradient,
                    color: 'white'
                  }}
                >
                  {errorInfo.icon}
                </div>
              </div>
            )}
          </div>

          {/* ÏóêÎü¨ Ï†ïÎ≥¥ */}
          <div className="error-info">
            <div className="error-header">
              <h1 
                className="error-title"
                style={{ 
                  background: errorInfo.gradient,
                  WebkitBackgroundClip: 'text',
                  WebkitTextFillColor: 'transparent',
                  backgroundClip: 'text'
                }}
              >
                {errorInfo.title}
              </h1>
              <div className="error-code">Ïò§Î•ò ÏΩîÎìú: {errorInfo.statusCode}</div>
            </div>

            <p className="error-message">{errorInfo.message}</p>
            <p className="error-description">{errorInfo.description}</p>

            {/* Ïï°ÏÖò Î≤ÑÌäºÎì§ */}
            <div className="error-actions">
              {finalActions.map((action, index) => (
                <Button
                  key={index}
                  variant={action.variant}
                  size="lg"
                  onClick={action.action}
                  disabled={isRetrying && action.label === 'Îã§Ïãú ÏãúÎèÑ'}
                  loading={isRetrying && action.label === 'Îã§Ïãú ÏãúÎèÑ'}
                  className="error-action-button"
                >
                  {action.icon && <span className="button-icon">{action.icon}</span>}
                  {action.label}
                </Button>
              ))}
            </div>

            {/* Ï†úÏïàÏÇ¨Ìï≠ */}
            {errorInfo.suggestions.length > 0 && (
              <div className="error-suggestions">
                <button
                  className="suggestions-toggle"
                  onClick={() => setShowSuggestions(!showSuggestions)}
                >
                  <span className="toggle-icon">
                    {showSuggestions ? '‚ñº' : '‚ñ∂'}
                  </span>
                  Ìï¥Í≤∞ Î∞©Î≤ï Î≥¥Í∏∞
                </button>
                
                {showSuggestions && (
                  <div className="suggestions-list">
                    {errorInfo.suggestions.map((suggestion, index) => (
                      <div key={index} className="suggestion-item">
                        <span className="suggestion-number">{index + 1}</span>
                        <span className="suggestion-text">{suggestion}</span>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            )}
          </div>
        </div>

        {/* Ï∂îÍ∞Ä Ï†ïÎ≥¥ */}
        <div className="error-footer">
          <div className="error-meta">
            <div className="meta-item">
              <span className="meta-label">Î∞úÏÉù ÏãúÍ∞Ñ:</span>
              <span className="meta-value">{new Date().toLocaleString('ko-KR')}</span>
            </div>
            <div className="meta-item">
              <span className="meta-label">ÏÇ¨Ïö©Ïûê:</span>
              <span className="meta-value">
                {isAuthenticated && user ? (user.nickname || user.username || user.email) : 'ÎπÑÎ°úÍ∑∏Ïù∏'}
              </span>
            </div>
            <div className="meta-item">
              <span className="meta-label">ÌéòÏù¥ÏßÄ:</span>
              <span className="meta-value">{location.pathname}</span>
            </div>
          </div>

          {/* Îπ†Î•∏ ÎßÅÌÅ¨ */}
          <div className="quick-links">
            <h4>Îπ†Î•∏ ÎßÅÌÅ¨</h4>
            <div className="links-grid">
              {MENU_ITEMS.slice(0, 4).map((item) => (
                <button
                  key={item.path}
                  className="quick-link"
                  onClick={() => navigate(item.path)}
                >
                  <span className="link-icon">{item.icon}</span>
                  <span className="link-label">{item.label}</span>
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* Ìñ•ÏÉÅÎêú ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò */}
        <ErrorNavigation 
          currentErrorCode={errorInfo.statusCode}
          onNavigate={(path) => navigate(path, { replace: true })}
        />

        {/* ÏóêÎü¨ Î∂ÑÏÑù */}
        <ErrorAnalytics
          errorCode={errorInfo.statusCode}
          errorTitle={errorInfo.title}
          errorMessage={errorInfo.message}
        />
      </div>
    </div>
  )
}
