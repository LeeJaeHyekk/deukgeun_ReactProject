import { useState, useEffect, useMemo } from "react"
import styles from "./GymFinderPage.module.css"
import { Navigation } from "@widgets/Navigation/Navigation"
import { SearchBar } from "./components/Map/SearchBar"
import { FilterTag } from "./components/FilterTag/FilterTag"
import { GymList } from "./components/Map/GymList"
import { GymCard } from "./components/Map/GymCard"
import { fetchGymsByKeyword } from "./API/kakao"
import { Gym, FilterOption, SortOption, SortDirection } from "./types"
import { useAuth } from "@frontend/shared/hooks/useAuth"
import { useNavigate } from "react-router-dom"
import { processGyms } from "./utils/gymFilters"
import gymsData from "../../../data/gyms_raw.json"


const filters: FilterOption[] = ["PT", "GX", "24ÏãúÍ∞Ñ", "Ï£ºÏ∞®", "ÏÉ§Ïõå"]

export default function GymFinderPage() {
  const [gyms, setGyms] = useState<Gym[]>([])
  const [allGyms, setAllGyms] = useState<Gym[]>([])
  const [nearbyGyms, setNearbyGyms] = useState<Gym[]>([])
  const [position, setPosition] = useState<{ lat: number; lng: number } | null>(
    null
  )
  const [currentSearchQuery, setCurrentSearchQuery] = useState<string>("")
  const [activeFilters, setActiveFilters] = useState<FilterOption[]>([])
  const [sortBy, setSortBy] = useState<SortOption>("distance")
  const [sortDirection, setSortDirection] = useState<SortDirection>("asc")
  const [maxDistance, setMaxDistance] = useState<number>(5) // Í∏∞Î≥∏ 5km
  const [isLoading, setIsLoading] = useState(false)
  const [viewMode, setViewMode] = useState<'list' | 'grid'>('grid')
  
  // ÏÉÅÏÑ∏Î≥¥Í∏∞ Í¥ÄÎ†® ÏÉÅÌÉú
  const [selectedGym, setSelectedGym] = useState<Gym | null>(null)
  const [isDetailView, setIsDetailView] = useState(false)
  
  const navigate = useNavigate()
  const { isLoggedIn } = useAuth()

  console.log("üß™ GymFinderPage Î†åÎçîÎßÅ")
  console.log("üß™ ÌòÑÏû¨ gyms ÏÉÅÌÉú:", gyms.length, "Í∞ú")
  console.log("üß™ ÌòÑÏû¨ position:", position)

  // Ï¢åÌëú Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Ìï®Ïàò
  const isValidCoordinate = (lat: number, lng: number): boolean => {
    // ÏÑúÏö∏ ÏßÄÏó≠ Ï¢åÌëú Î≤îÏúÑ Ï≤¥ÌÅ¨ (ÎåÄÎûµÏ†ÅÏù∏ Î≤îÏúÑ)
    return lat >= 37.4 && lat <= 37.7 && lng >= 126.7 && lng <= 127.2
  }

  // gyms_raw.json Îç∞Ïù¥ÌÑ∞Î•º Gym ÌÉÄÏûÖÏúºÎ°ú Î≥ÄÌôòÌïòÎäî Ìï®Ïàò
  const transformGymData = (rawGym: any): Gym => {
    // Ï¢åÌëú Îç∞Ïù¥ÌÑ∞ Í≤ÄÏ¶ù Î∞è ÏàòÏ†ï
    let latitude = rawGym.latitude
    let longitude = rawGym.longitude

    // ÏûòÎ™ªÎêú Ï¢åÌëúÏù∏ Í≤ΩÏö∞ ÏÑúÏö∏ ÏãúÏ≤≠ Í∑ºÏ≤ò ÎûúÎç§ Ï¢åÌëúÎ°ú ÎåÄÏ≤¥
    if (!isValidCoordinate(latitude, longitude)) {
      // ÏÑúÏö∏ ÏãúÏ≤≠(37.5665, 126.978) Í∏∞Ï§ÄÏúºÎ°ú ¬±0.1ÎèÑ Î≤îÏúÑ ÎÇ¥ ÎûúÎç§ Ï¢åÌëú ÏÉùÏÑ±
      latitude = 37.5665 + (Math.random() - 0.5) * 0.2
      longitude = 126.978 + (Math.random() - 0.5) * 0.2
    }

    return {
      id: rawGym.id,
      name: rawGym.name,
      type: rawGym.type,
      address: rawGym.address,
      phone: rawGym.phone,
      latitude,
      longitude,
      is24Hours: rawGym.is24Hours,
      hasParking: rawGym.hasParking,
      hasShower: rawGym.hasShower,
      // Ï∂îÍ∞Ä ÌïÑÎìúÎì§ÏùÄ Í∏∞Î≥∏Í∞íÏúºÎ°ú ÏÑ§Ï†ï
      rating: Math.random() * 2 + 3, // ÏûÑÏãú ÌèâÏ†ê (3-5)
      reviewCount: Math.floor(Math.random() * 100) + 10, // ÏûÑÏãú Î¶¨Î∑∞ Ïàò
      hasPT: Math.random() > 0.5,
      hasGX: Math.random() > 0.5,
      price: `${Math.floor(Math.random() * 20 + 10)}ÎßåÏõê`,
    }
  }

  // Í±∞Î¶¨ Í≥ÑÏÇ∞ Ìï®Ïàò (ÌïòÎ≤ÑÏÇ¨Ïù∏ Í≥µÏãù)
  const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
    const R = 6371 // ÏßÄÍµ¨Ïùò Î∞òÏßÄÎ¶Ñ (km)
    const dLat = (lat2 - lat1) * Math.PI / 180
    const dLon = (lon2 - lon1) * Math.PI / 180
    const a = 
      Math.sin(dLat/2) * Math.sin(dLat/2) +
      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
      Math.sin(dLon/2) * Math.sin(dLon/2)
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a))
    return R * c
  }

  // gyms_raw.json Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  useEffect(() => {
    console.log("üß™ gyms_raw.json Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏãúÏûë")
    try {
      if (!gymsData || !Array.isArray(gymsData)) {
        throw new Error("Ìó¨Ïä§Ïû• Îç∞Ïù¥ÌÑ∞Í∞Ä Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.")
      }

      const transformedGyms = gymsData.map(transformGymData)
      
      // Îç∞Ïù¥ÌÑ∞ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
      if (transformedGyms.length === 0) {
        throw new Error("Î≥ÄÌôòÎêú Ìó¨Ïä§Ïû• Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")
      }

      setAllGyms(transformedGyms)
      console.log("üß™ Î°úÎìúÎêú Ìó¨Ïä§Ïû• Îç∞Ïù¥ÌÑ∞:", transformedGyms.length, "Í∞ú")
      
      // Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏÑ±Í≥µ Ïãú Î°úÍ∑∏
      const validCoords = transformedGyms.filter(gym => 
        isValidCoordinate(gym.latitude, gym.longitude)
      )
      console.log("üß™ Ïú†Ìö®Ìïú Ï¢åÌëúÎ•º Í∞ÄÏßÑ Ìó¨Ïä§Ïû•:", validCoords.length, "Í∞ú")
      
    } catch (error) {
      console.error("‚ùå gyms_raw.json Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:", error)
      
      // Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå® Ïãú Í∏∞Î≥∏ Ìó¨Ïä§Ïû• Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
      const fallbackGyms: Gym[] = [
        {
          id: "fallback-1",
          name: "ÏÑúÏö∏ÏãúÏ≤≠ Ìó¨Ïä§Ïû•",
          type: "Ïßê",
          address: "ÏÑúÏö∏ÌäπÎ≥ÑÏãú Ï§ëÍµ¨ ÏÑ∏Ï¢ÖÎåÄÎ°ú 110",
          phone: "02-120",
          latitude: 37.5665,
          longitude: 126.978,
          is24Hours: true,
          hasParking: true,
          hasShower: true,
          rating: 4.5,
          reviewCount: 50,
          hasPT: true,
          hasGX: true,
          price: "15ÎßåÏõê"
        },
        {
          id: "fallback-2", 
          name: "Î™ÖÎèô ÌîºÌä∏ÎãàÏä§",
          type: "ÌîºÌä∏ÎãàÏä§",
          address: "ÏÑúÏö∏ÌäπÎ≥ÑÏãú Ï§ëÍµ¨ Î™ÖÎèô",
          phone: "02-123-4567",
          latitude: 37.5636,
          longitude: 126.9826,
          is24Hours: false,
          hasParking: false,
          hasShower: true,
          rating: 4.2,
          reviewCount: 30,
          hasPT: true,
          hasGX: false,
          price: "12ÎßåÏõê"
        },
        {
          id: "fallback-3",
          name: "ÎèôÎåÄÎ¨∏ Ïä§Ìè¨Ï∏†ÏÑºÌÑ∞",
          type: "ÌÅ¨Î°úÏä§Ìïè", 
          address: "ÏÑúÏö∏ÌäπÎ≥ÑÏãú Ï§ëÍµ¨ ÎèôÎåÄÎ¨∏",
          phone: "02-987-6543",
          latitude: 37.5683,
          longitude: 126.9778,
          is24Hours: true,
          hasParking: true,
          hasShower: true,
          rating: 4.0,
          reviewCount: 25,
          hasPT: false,
          hasGX: true,
          price: "10ÎßåÏõê"
        }
      ]
      
      setAllGyms(fallbackGyms)
      console.log("üß™ Í∏∞Î≥∏ Ìó¨Ïä§Ïû• Îç∞Ïù¥ÌÑ∞Î°ú ÎåÄÏ≤¥:", fallbackGyms.length, "Í∞ú")
    }
  }, [])

  // Ï¢åÌëú ÏÑ§Ï†ï Ìï®Ïàò (Ïö∞ÏÑ†ÏàúÏúÑ: ÌòÑÏû¨ Ï¢åÌëú > Í≤ÄÏÉâÏñ¥ Í∏∞Î∞ò > ÏÑúÏö∏ ÏãúÏ≤≠)
  const getCoordinateWithPriority = (searchQuery?: string) => {
    console.log("üß™ Ï¢åÌëú Í≤∞Ï†ï ÏãúÏûë, Í≤ÄÏÉâÏñ¥:", searchQuery)
    
    // 1. ÌòÑÏû¨ Ï¢åÌëúÍ∞Ä ÏûàÎäî Í≤ΩÏö∞ - ÌòÑÏû¨ Ï¢åÌëú ÏÇ¨Ïö©
    if (position) {
      console.log("üß™ ÌòÑÏû¨ Ï¢åÌëú ÏÇ¨Ïö©:", position)
      return position
    }
    
    // 2. ÌòÑÏû¨ Ï¢åÌëúÍ∞Ä ÏóÜÏßÄÎßå Í≤ÄÏÉâÏñ¥Í∞Ä ÏûàÎäî Í≤ΩÏö∞ - ÏÑúÏö∏ ÏãúÏ≤≠ Ï¢åÌëú ÏÇ¨Ïö©
    if (searchQuery && searchQuery.trim() !== '') {
      console.log("üß™ Í≤ÄÏÉâÏñ¥ Í∏∞Î∞òÏúºÎ°ú ÏÑúÏö∏ ÏãúÏ≤≠ Ï¢åÌëú ÏÇ¨Ïö©")
      return { lat: 37.5665, lng: 126.9780 }
    }
    
    // 3. ÌòÑÏû¨ Ï¢åÌëúÎèÑ ÏóÜÍ≥† Í≤ÄÏÉâÎèÑ ÏóÜÎäî Í≤ΩÏö∞ - ÏÑúÏö∏ ÏãúÏ≤≠ Ï¢åÌëú ÏÇ¨Ïö©
    console.log("üß™ Í∏∞Î≥∏ ÏÑúÏö∏ ÏãúÏ≤≠ Ï¢åÌëú ÏÇ¨Ïö©")
    return { lat: 37.5665, lng: 126.9780 }
  }

  // Ï¢åÌëú ÏÑ§Ï†ï Ìï®Ïàò (ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏Ïö©)
  const setCoordinateWithPriority = (searchQuery?: string) => {
    const targetCoordinate = getCoordinateWithPriority(searchQuery)
    
    // positionÏù¥ ÏóÜÏùÑ ÎïåÎßå ÏÑ§Ï†ï (Î¨¥Ìïú Î£®ÌîÑ Î∞©ÏßÄ)
    if (!position) {
      console.log("üß™ Ï¢åÌëú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏:", targetCoordinate)
      setPosition(targetCoordinate)
    }
    
    return targetCoordinate
  }

  // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÌôïÏù∏ Î∞è ÌòÑÏû¨ ÏúÑÏπò Í∞ÄÏ†∏Ïò§Í∏∞
  useEffect(() => {
    console.log("üß™ ÏúÑÏπò Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞ ÏãúÏûë")
    if (!isLoggedIn) {
      console.log("üß™ Î°úÍ∑∏Ïù∏ÎêòÏßÄ ÏïäÏùå, Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô")
      navigate("/login")
      return
    }

    // Î∏åÎùºÏö∞Ï†ÄÍ∞Ä geolocationÏùÑ ÏßÄÏõêÌïòÏßÄ ÏïäÎäî Í≤ΩÏö∞
    if (!navigator.geolocation) {
      console.error("GeolocationÏùÑ ÏßÄÏõêÌïòÏßÄ ÏïäÎäî Î∏åÎùºÏö∞Ï†ÄÏûÖÎãàÎã§.")
      setCoordinateWithPriority()
      return
    }

    // ÌòÑÏû¨ ÏúÑÏπò Í∞ÄÏ†∏Ïò§Í∏∞ ÏãúÎèÑ
    navigator.geolocation.getCurrentPosition(
      pos => {
        const currentPos = {
          lat: pos.coords.latitude,
          lng: pos.coords.longitude,
        }
        console.log("üß™ ÏúÑÏπò Ï†ïÎ≥¥ ÌöçÎìù:", currentPos)
        setPosition(currentPos)
      },
      error => {
        console.error("ÏúÑÏπò Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§.", error)
        
        // ÏúÑÏπò Ï†ïÎ≥¥ Í±∞Î∂Ä Ïãú ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÏïåÎ¶º
        if (error.code === 1) {
          console.log("üß™ ÏúÑÏπò Ï†ïÎ≥¥ Ï†ëÍ∑º Í±∞Î∂ÄÎê®")
        } else if (error.code === 2) {
          console.log("üß™ ÏúÑÏπò Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏùå")
        } else if (error.code === 3) {
          console.log("üß™ ÏúÑÏπò Ï†ïÎ≥¥ ÏöîÏ≤≠ ÏãúÍ∞Ñ Ï¥àÍ≥º")
        }
        
        // ÏúÑÏπò Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÎäî Í≤ΩÏö∞ Í∏∞Î≥∏ Ï¢åÌëú ÏÑ§Ï†ï
        setCoordinateWithPriority()
      },
      {
        enableHighAccuracy: true,
        timeout: 10000,
        maximumAge: 300000 // 5Î∂Ñ
      }
    )
  }, [isLoggedIn, navigate])

  // Îç∞Ïù¥ÌÑ∞Í∞Ä Î°úÎìúÎêòÎ©¥ Ï£ºÎ≥Ä Ìó¨Ïä§Ïû• Ï∞æÍ∏∞
  useEffect(() => {
    if (allGyms.length > 0) {
      console.log("üß™ Îç∞Ïù¥ÌÑ∞ Î°úÎìúÎê®, Ï£ºÎ≥Ä Ìó¨Ïä§Ïû• Ï∞æÍ∏∞ ÏãúÏûë")
      findNearbyGyms()
    }
  }, [allGyms])

  // Í±∞Î¶¨ Î≥ÄÍ≤Ω Ïãú Ï≤òÎ¶¨
  useEffect(() => {
    if (allGyms.length > 0) {
      console.log("üß™ Í±∞Î¶¨ Î≥ÄÍ≤ΩÎê®:", maxDistance, "km")
      
      // Ïù¥Ï†Ñ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎäî Í≤ΩÏö∞ Ìï¥Îãπ Îç∞Ïù¥ÌÑ∞Î•º Í±∞Î¶¨ Í∏∞Ï§ÄÏúºÎ°ú ÌïÑÌÑ∞ÎßÅ
      if (gyms.length > 0) {
        console.log("üß™ Ïù¥Ï†Ñ Í≤ÄÏÉâ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏùå, Í±∞Î¶¨ Í∏∞Ï§ÄÏúºÎ°ú ÌïÑÌÑ∞ÎßÅ")
        const currentPosition = getCoordinateWithPriority(currentSearchQuery)
        if (currentPosition) {
          const filteredGyms = gyms
            .map(gym => {
              const distance = calculateDistance(
                currentPosition.lat,
                currentPosition.lng,
                gym.latitude,
                gym.longitude
              )
              return { ...gym, distance }
            })
            .filter(gym => gym.distance <= maxDistance)
            .sort((a, b) => a.distance - b.distance)
          
          setGyms(filteredGyms)
        }
      } else {
        // Ïù¥Ï†Ñ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÎäî Í≤ΩÏö∞ ÏÑúÏö∏ ÏãúÏ≤≠ Í∏∞Ï§ÄÏúºÎ°ú ÏÉàÎ°ú Í≤ÄÏÉâ
        console.log("üß™ Ïù¥Ï†Ñ Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå, ÏÑúÏö∏ ÏãúÏ≤≠ Í∏∞Ï§ÄÏúºÎ°ú ÏÉàÎ°ú Í≤ÄÏÉâ")
        findNearbyGyms()
      }
    }
  }, [maxDistance])

  // Í≤ÄÏÉâÏñ¥Í∞Ä Î≥ÄÍ≤ΩÎêòÎ©¥ Í≤ÄÏÉâ Í≤∞Í≥º ÏóÖÎç∞Ïù¥Ìä∏ (Î¨¥Ìïú Î£®ÌîÑ Î∞©ÏßÄÎ•º ÏúÑÌï¥ ÏùòÏ°¥ÏÑ± Ï†úÍ±∞)
  useEffect(() => {
    if (currentSearchQuery.trim() !== '' && allGyms.length > 0) {
      console.log("üß™ Í≤ÄÏÉâÏñ¥ Î≥ÄÍ≤ΩÎê®, Í≤ÄÏÉâ Ïã§Ìñâ:", currentSearchQuery)
      // handleSearch Ìï®ÏàòÎ•º ÏßÅÏ†ë Ìò∏Ï∂úÌïòÏßÄ ÏïäÍ≥† ÎÇ¥Î∂Ä Î°úÏßÅÎßå Ïã§Ìñâ
      const executeSearch = async () => {
        const currentPosition = getCoordinateWithPriority(currentSearchQuery)
        if (!currentPosition) return

        setIsLoading(true)
        try {
          const searchResults = allGyms.filter(gym => 
            gym.name.toLowerCase().includes(currentSearchQuery.toLowerCase()) ||
            gym.address.toLowerCase().includes(currentSearchQuery.toLowerCase()) ||
            gym.type.toLowerCase().includes(currentSearchQuery.toLowerCase())
          )

          const resultsWithDistance = searchResults
            .map(gym => {
              const distance = calculateDistance(
                currentPosition.lat,
                currentPosition.lng,
                gym.latitude,
                gym.longitude
              )
              return { ...gym, distance }
            })
            .sort((a, b) => a.distance - b.distance)

          let filteredResults = resultsWithDistance.filter(gym => gym.distance <= maxDistance)
          
          if (filteredResults.length < 3) {
            let expandedDistance = maxDistance
            while (filteredResults.length < 3 && expandedDistance < 50) {
              expandedDistance += 5
              filteredResults = resultsWithDistance.filter(gym => gym.distance <= expandedDistance)
            }
            
            if (filteredResults.length < 3) {
              filteredResults = resultsWithDistance.slice(0, 3)
            }
          }

          setGyms(filteredResults)
        } catch (error) {
          console.error("üß™ Í≤ÄÏÉâ Ïã§Ìå®:", error)
        } finally {
          setIsLoading(false)
        }
      }
      
      executeSearch()
    }
  }, [currentSearchQuery, allGyms, maxDistance])

  // Ï£ºÎ≥Ä Ìó¨Ïä§Ïû• Ï∞æÍ∏∞ Ìï®Ïàò (ÏµúÏÜå 3Í∞ú Î≥¥Ïû•)
  const findNearbyGyms = () => {
    if (allGyms.length === 0) return

    console.log("üß™ Ï£ºÎ≥Ä Ìó¨Ïä§Ïû• Ï∞æÍ∏∞ ÏãúÏûë")
    
    // Ï¢åÌëú Í≤∞Ï†ï (Í≤ÄÏÉâÏñ¥Í∞Ä ÏûàÏúºÎ©¥ Í≤ÄÏÉâÏñ¥ Í∏∞Î∞ò, ÏóÜÏúºÎ©¥ ÌòÑÏû¨ Ï¢åÌëú)
    const currentPosition = getCoordinateWithPriority(currentSearchQuery)
    
    if (!currentPosition) {
      console.warn("‚ö†Ô∏è Ï¢åÌëú Í≤∞Ï†ï Ïã§Ìå®")
      return
    }
    
    // Í±∞Î¶¨ Í≥ÑÏÇ∞ Î∞è Ï†ïÎ†¨
    const gymsWithDistance = allGyms
      .map(gym => {
        const distance = calculateDistance(
          currentPosition.lat,
          currentPosition.lng,
          gym.latitude,
          gym.longitude
        )
        return { ...gym, distance }
      })
      .sort((a, b) => a.distance - b.distance)

    // ÌòÑÏû¨ Í±∞Î¶¨ ÎÇ¥ÏóêÏÑú Ìó¨Ïä§Ïû• Ï∞æÍ∏∞
    let nearby = gymsWithDistance.filter(gym => gym.distance <= maxDistance)
    
    // ÏµúÏÜå 3Í∞úÍ∞Ä ÏóÜÏúºÎ©¥ Í≤ÄÏÉâ Î≤îÏúÑÎ•º Ï†êÏßÑÏ†ÅÏúºÎ°ú ÌôïÏû•
    if (nearby.length < 3) {
      console.log("üß™ ÌòÑÏû¨ Î≤îÏúÑ ÎÇ¥ Ìó¨Ïä§Ïû• Î∂ÄÏ°±, Í≤ÄÏÉâ Î≤îÏúÑ ÌôïÏû• Ï§ë...")
      
      let expandedDistance = maxDistance
      while (nearby.length < 3 && expandedDistance < 50) { // ÏµúÎåÄ 50kmÍπåÏßÄ ÌôïÏû•
        expandedDistance += 5 // 5kmÏî© ÌôïÏû•
        nearby = gymsWithDistance.filter(gym => gym.distance <= expandedDistance)
        console.log(`üß™ ${expandedDistance}km Î≤îÏúÑÏóêÏÑú ${nearby.length}Í∞ú Ìó¨Ïä§Ïû• Î∞úÍ≤¨`)
      }
      
      // Ïó¨Ï†ÑÌûà 3Í∞ú ÎØ∏ÎßåÏù¥Î©¥ Í∞ÄÏû• Í∞ÄÍπåÏö¥ 3Í∞ú ÏÑ†ÌÉù
      if (nearby.length < 3) {
        nearby = gymsWithDistance.slice(0, 3)
        console.log("üß™ ÏµúÎåÄ Î≤îÏúÑ ÌôïÏû• ÌõÑÏóêÎèÑ Î∂ÄÏ°±, Í∞ÄÏû• Í∞ÄÍπåÏö¥ 3Í∞ú ÏÑ†ÌÉù")
      }
    }

    // ÏµúÎåÄ 6Í∞úÎ°ú Ï†úÌïú
    nearby = nearby.slice(0, 6)
    
    console.log("üß™ ÏµúÏ¢Ö ÏÑ†ÌÉùÎêú Ìó¨Ïä§Ïû•:", nearby.length, "Í∞ú")
    setNearbyGyms(nearby)
  }

  // Map API Í¥ÄÎ†® ÏΩîÎìú Ï†úÍ±∞Îê®

  // Map API Í¥ÄÎ†® Ìï®ÏàòÎì§ Ï†úÍ±∞Îê®

  // Í≤ÄÏÉâ Ï≤òÎ¶¨ (gyms_raw.json Îç∞Ïù¥ÌÑ∞ÏóêÏÑú Í≤ÄÏÉâ, ÏµúÏÜå 3Í∞ú Î≥¥Ïû•)
  const handleSearch = async (query: string) => {
    console.log("üß™ Í≤ÄÏÉâ ÏãúÏûë:", query)
    
    // Í≤ÄÏÉâÏñ¥Í∞Ä ÎπÑÏñ¥ÏûàÏúºÎ©¥ Ï£ºÎ≥Ä Ìó¨Ïä§Ïû•ÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
    if (!query || query.trim() === '') {
      console.log("üß™ Í≤ÄÏÉâÏñ¥ ÎπÑÏñ¥ÏûàÏùå, Ï£ºÎ≥Ä Ìó¨Ïä§Ïû•ÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞")
      setCurrentSearchQuery("")
      setGyms([])
      return
    }
    
    setCurrentSearchQuery(query)
    
    // Ï¢åÌëú Í≤∞Ï†ï (Í≤ÄÏÉâÏñ¥Í∞Ä ÏûàÏúºÎ©¥ ÏÑúÏö∏ ÏãúÏ≤≠ Í∏∞Ï§Ä)
    const currentPosition = getCoordinateWithPriority(query)
    
    if (!currentPosition) {
      console.warn("‚ö†Ô∏è Ï¢åÌëú Í≤∞Ï†ï Ïã§Ìå®")
      return
    }

    setIsLoading(true)
    try {
      // gyms_raw.json Îç∞Ïù¥ÌÑ∞ÏóêÏÑú Í≤ÄÏÉâ
      const searchResults = allGyms.filter(gym => 
        gym.name.toLowerCase().includes(query.toLowerCase()) ||
        gym.address.toLowerCase().includes(query.toLowerCase()) ||
        gym.type.toLowerCase().includes(query.toLowerCase())
      )

      // Í±∞Î¶¨ Í≥ÑÏÇ∞ Î∞è Ï†ïÎ†¨
      const resultsWithDistance = searchResults
        .map(gym => {
          const distance = calculateDistance(
            currentPosition.lat,
            currentPosition.lng,
            gym.latitude,
            gym.longitude
          )
          return { ...gym, distance }
        })
        .sort((a, b) => a.distance - b.distance)

      // ÌòÑÏû¨ Í±∞Î¶¨ ÎÇ¥ÏóêÏÑú Í≤∞Í≥º ÌïÑÌÑ∞ÎßÅ
      let filteredResults = resultsWithDistance.filter(gym => gym.distance <= maxDistance)
      
      // ÏµúÏÜå 3Í∞úÍ∞Ä ÏóÜÏúºÎ©¥ Í≤ÄÏÉâ Î≤îÏúÑÎ•º Ï†êÏßÑÏ†ÅÏúºÎ°ú ÌôïÏû•
      if (filteredResults.length < 3) {
        console.log("üß™ Í≤ÄÏÉâ Í≤∞Í≥º Î∂ÄÏ°±, Í≤ÄÏÉâ Î≤îÏúÑ ÌôïÏû• Ï§ë...")
        
        let expandedDistance = maxDistance
        while (filteredResults.length < 3 && expandedDistance < 50) {
          expandedDistance += 5
          filteredResults = resultsWithDistance.filter(gym => gym.distance <= expandedDistance)
        }
        
        // Ïó¨Ï†ÑÌûà 3Í∞ú ÎØ∏ÎßåÏù¥Î©¥ Í∞ÄÏû• Í∞ÄÍπåÏö¥ 3Í∞ú ÏÑ†ÌÉù
        if (filteredResults.length < 3) {
          filteredResults = resultsWithDistance.slice(0, 3)
        }
      }

      console.log("üß™ ÏµúÏ¢Ö Í≤ÄÏÉâ Í≤∞Í≥º:", filteredResults.length, "Í∞ú")
      setGyms(filteredResults)
    } catch (error) {
      console.error("üß™ Í≤ÄÏÉâ Ïã§Ìå®:", error)
    } finally {
      setIsLoading(false)
    }
  }

  // ÌïÑÌÑ∞ ÌÜ†Í∏Ä
  const toggleFilter = (filter: FilterOption) => {
    setActiveFilters(prev =>
      prev.includes(filter) ? prev.filter(f => f !== filter) : [...prev, filter]
    )
  }

  // Ï†ïÎ†¨ Î≥ÄÍ≤Ω
  const handleSortChange = (
    newSortBy: SortOption,
    newDirection: SortDirection
  ) => {
    setSortBy(newSortBy)
    setSortDirection(newDirection)
  }

  // Ìó¨Ïä§Ïû• ÌÅ¥Î¶≠ Ï≤òÎ¶¨ (ÏÉÅÏÑ∏Î≥¥Í∏∞Î°ú Ï†ÑÌôò)
  const handleGymClick = (gym: Gym) => {
    console.log("Ìó¨Ïä§Ïû• ÌÅ¥Î¶≠:", gym)
    setSelectedGym(gym)
    setIsDetailView(true)
  }

  // ÏÉàÎ°úÍ≥†Ïπ®/Ï¥àÍ∏∞Ìôî Í∏∞Îä•
  const handleRefresh = () => {
    console.log("üß™ ÏÉàÎ°úÍ≥†Ïπ® Î≤ÑÌäº ÌÅ¥Î¶≠")
    
    // ÏÉÅÏÑ∏Î≥¥Í∏∞ Î™®Îìú Ìï¥Ï†ú
    setIsDetailView(false)
    setSelectedGym(null)
    
    // Í≤ÄÏÉâÏñ¥Í∞Ä ÏûàÎäî Í≤ΩÏö∞ Í≤ÄÏÉâÏñ¥ Í∏∞Ï§ÄÏúºÎ°ú Ïû¨ÏÑ§Ï†ï
    if (currentSearchQuery.trim() !== '') {
      console.log("üß™ Í≤ÄÏÉâÏñ¥ Í∏∞Ï§ÄÏúºÎ°ú Ïû¨ÏÑ§Ï†ï:", currentSearchQuery)
      handleSearch(currentSearchQuery)
    } else {
      // Í≤ÄÏÉâÏñ¥Í∞Ä ÏóÜÎäî Í≤ΩÏö∞ ÌòÑÏû¨ ÏúÑÏπò ÎòêÎäî ÏÑúÏö∏ ÏãúÏ≤≠ Í∏∞Ï§ÄÏúºÎ°ú Ïû¨ÏÑ§Ï†ï
      console.log("üß™ ÏúÑÏπò Í∏∞Ï§ÄÏúºÎ°ú Ïû¨ÏÑ§Ï†ï")
      setGyms([])
      findNearbyGyms()
    }
  }

  // ÌïÑÌÑ∞ÎßÅ Î∞è Ï†ïÎ†¨Îêú Ìó¨Ïä§Ïû• Î™©Î°ù
  const processedGyms = useMemo(() => {
    console.log("üß™ Ìó¨Ïä§Ïû• Ï≤òÎ¶¨ Ï§ë:", gyms.length, "Í∞ú")
    const result = processGyms(gyms, {
      activeFilters,
      sortBy,
      sortDirection,
      maxDistance,
      currentPosition: position,
    })
    console.log("üß™ Ï≤òÎ¶¨Îêú Ìó¨Ïä§Ïû•:", result.length, "Í∞ú")
    return result
  }, [gyms, activeFilters, sortBy, sortDirection, maxDistance, position])

  return (
    <div className={styles.page}>
      <Navigation />

      <header className={styles.header}>
        <h1>ÎÇ¥ Ï£ºÎ≥Ä Ìó¨Ïä§Ïû• Ï∞æÍ∏∞</h1>
      </header>

      <section className={styles.searchSection}>
        <SearchBar onSearch={handleSearch} />
        <div className={styles.filterGroup}>
          {filters.map(filter => (
            <FilterTag
              key={filter}
              label={filter}
              active={activeFilters.includes(filter)}
              onClick={() => toggleFilter(filter)}
            />
          ))}
        </div>
        <div className={styles.distanceFilter}>
          <label htmlFor="distance-range">Í≤ÄÏÉâ Î∞òÍ≤Ω: {maxDistance}km</label>
          <input
            id="distance-range"
            type="range"
            min="1"
            max="20"
            value={maxDistance}
            onChange={e => setMaxDistance(Number(e.target.value))}
            className={styles.rangeSlider}
          />
        </div>
      </section>

      <main className={styles.main}>
        <div className={styles.mapListWrapper}>
          <section className={styles.mapSection}>
            <div className={styles.mapHeader}>
              <h2>ÎÇ¥ Ï£ºÎ≥Ä Ìó¨Ïä§Ïû•</h2>
              <button 
                className={styles.refreshButton}
                onClick={handleRefresh}
                title="ÏÉàÎ°úÍ≥†Ïπ®"
              >
                üîÑ
              </button>
              <span className={styles.locationInfo}>
                üìç {position ? 'ÌòÑÏû¨ ÏúÑÏπò' : 'ÏÑúÏö∏ ÏãúÏ≤≠'} Í∏∞Ï§Ä {maxDistance}km ÎÇ¥
                {currentSearchQuery && (
                  <span className={styles.searchInfo}>
                    (Í≤ÄÏÉâÏñ¥: "{currentSearchQuery}")
                  </span>
                )}
              </span>
            </div>
            <div className={styles.nearbyGyms}>
              {isDetailView && selectedGym ? (
                // ÏÉÅÏÑ∏Î≥¥Í∏∞ Î™®Îìú - Îã®Ïùº Ïπ¥Îìú
                <div className={styles.detailView}>
                  <div className={styles.detailCard}>
                    <div className={styles.detailHeader}>
                      <h3>{selectedGym.name}</h3>
                      <button 
                        className={styles.backButton}
                        onClick={() => {
                          setIsDetailView(false)
                          setSelectedGym(null)
                        }}
                        title="Îí§Î°úÍ∞ÄÍ∏∞"
                      >
                        ‚Üê
                      </button>
                    </div>
                    <div className={styles.detailContent}>
                      <div className={styles.detailInfo}>
                        <p><strong>Ï£ºÏÜå:</strong> {selectedGym.address}</p>
                        <p><strong>Ï†ÑÌôîÎ≤àÌò∏:</strong> {selectedGym.phone}</p>
                        <p><strong>ÌÉÄÏûÖ:</strong> {selectedGym.type}</p>
                        <p><strong>ÌèâÏ†ê:</strong> ‚≠ê {selectedGym.rating?.toFixed(1) || 'N/A'} ({selectedGym.reviewCount || 0}Í∞ú Î¶¨Î∑∞)</p>
                        <p><strong>Í∞ÄÍ≤©:</strong> {selectedGym.price}</p>
                        <p><strong>Í±∞Î¶¨:</strong> {selectedGym.distance ? `${selectedGym.distance.toFixed(2)}km` : 'Í≥ÑÏÇ∞ Ï§ë...'}</p>
                      </div>
                      <div className={styles.detailFeatures}>
                        <h4>ÏãúÏÑ§ Ï†ïÎ≥¥</h4>
                        <div className={styles.featureList}>
                          {selectedGym.is24Hours && <span className={styles.featureTag}>24ÏãúÍ∞Ñ</span>}
                          {selectedGym.hasParking && <span className={styles.featureTag}>Ï£ºÏ∞®</span>}
                          {selectedGym.hasShower && <span className={styles.featureTag}>ÏÉ§Ïõå</span>}
                          {selectedGym.hasPT && <span className={styles.featureTag}>PT</span>}
                          {selectedGym.hasGX && <span className={styles.featureTag}>GX</span>}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ) : nearbyGyms.length > 0 ? (
                // ÏùºÎ∞ò Î™®Îìú - Í∑∏Î¶¨Îìú
                <div className={styles.gymGrid}>
                  {nearbyGyms.map(gym => (
                    <GymCard 
                      key={gym.id} 
                      gym={gym} 
                      onClick={handleGymClick}
                    />
                  ))}
                </div>
              ) : (
                <div className={styles.emptyState}>
                  <p>üìç Ï£ºÎ≥ÄÏóê Ìó¨Ïä§Ïû•ÏùÑ Ï∞æÎäî Ï§ë...</p>
                  <p>Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî.</p>
                  {allGyms.length === 0 && (
                    <p className={styles.errorText}>
                      ‚ö†Ô∏è Ìó¨Ïä§Ïû• Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ëÏûÖÎãàÎã§.
                    </p>
                  )}
                </div>
              )}
            </div>
          </section>

          <section className={styles.listSection}>
            <div className={styles.listHeader}>
              <h2>Í≤ÄÏÉâ Í≤∞Í≥º</h2>
              <div className={styles.headerControls}>
                <div className={styles.viewToggle}>
                  <button
                    className={`${styles.toggleButton} ${viewMode === 'list' ? styles.active : ''}`}
                    onClick={() => setViewMode('list')}
                    title="Î¶¨Ïä§Ìä∏ Î≥¥Í∏∞"
                  >
                    üìã
                  </button>
                  <button
                    className={`${styles.toggleButton} ${viewMode === 'grid' ? styles.active : ''}`}
                    onClick={() => setViewMode('grid')}
                    title="Í∑∏Î¶¨Îìú Î≥¥Í∏∞"
                  >
                    ‚äû
                  </button>
                </div>
                {isLoading && <span>Í≤ÄÏÉâ Ï§ë...</span>}
              </div>
            </div>
            <div className={styles.gymList}>
              <GymList
                gyms={processedGyms}
                sortBy={sortBy}
                sortDirection={sortDirection}
                onSortChange={handleSortChange}
                onGymClick={handleGymClick}
                layout={viewMode}
              />
            </div>
          </section>
        </div>
      </main>

      <footer className={styles.footer}>
        <p>&copy; 2025 ÎÇ¥ Ï£ºÎ≥Ä Ìó¨Ïä§Ïû• Ï∞æÍ∏∞. All rights reserved.</p>
      </footer>
    </div>
  )
}
