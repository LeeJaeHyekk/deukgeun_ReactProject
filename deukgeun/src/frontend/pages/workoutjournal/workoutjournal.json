{
  "workout_journal_system": {
    "system_components": [
      "user_management",
      "goal_management",
      "activity_logging",
      "proof_and_verification_system",
      "experience_and_level_system",
      "reward_and_milestone_management",
      "notification_system",
      "security_and_integrity",
      "scalability_and_performance",
      "analytics_and_reporting"
    ],
    "database_schema": {
      "Users": {
        "user_id": "PRIMARY KEY",
        "username": "STRING UNIQUE",
        "email": "STRING UNIQUE",
        "hashed_password": "STRING",
        "profile_image_url": "STRING NULLABLE",
        "current_level": "INTEGER DEFAULT 1",
        "total_experience": "BIGINT DEFAULT 0",
        "season_experience": "BIGINT DEFAULT 0",
        "created_at": "DATETIME",
        "updated_at": "DATETIME"
      },
      "UserStats": {
        "user_id": "PRIMARY KEY -> Users",
        "total_workouts": "INTEGER DEFAULT 0",
        "total_goals_completed": "INTEGER DEFAULT 0",
        "longest_streak_days": "INTEGER DEFAULT 0",
        "current_login_streak": "INTEGER DEFAULT 0",
        "current_workout_streak": "INTEGER DEFAULT 0",
        "updated_at": "DATETIME"
      },
      "GoalTypes": {
        "goal_type_id": "PRIMARY KEY",
        "name": "STRING UNIQUE",
        "description": "TEXT",
        "base_exp_on_completion": "INTEGER",
        "difficulty_multiplier": "DECIMAL(5, 2) DEFAULT 1.0",
        "verification_required": "BOOLEAN DEFAULT FALSE",
        "required_proof_type": "ENUM('photo', 'video', 'gps_data', 'sensor_data') NULLABLE"
      },
      "Goals": {
        "goal_id": "PRIMARY KEY",
        "user_id": "FOREIGN KEY -> Users",
        "goal_type_id": "FOREIGN KEY -> GoalTypes",
        "target_value": "DECIMAL(10, 2)",
        "current_value": "DECIMAL(10, 2) DEFAULT 0",
        "unit": "STRING",
        "start_date": "DATE",
        "end_date": "DATE",
        "status": "ENUM('in_progress', 'completed', 'failed', 'pending_proof')",
        "created_at": "DATETIME",
        "updated_at": "DATETIME"
      },
      "ActivityTypes": {
        "activity_type_id": "PRIMARY KEY",
        "name": "STRING UNIQUE",
        "description": "TEXT",
        "exp_on_log": "INTEGER"
      },
      "Activities": {
        "activity_id": "PRIMARY KEY",
        "user_id": "FOREIGN KEY -> Users",
        "activity_type_id": "FOREIGN KEY -> ActivityTypes",
        "value": "DECIMAL(10, 2)",
        "unit": "STRING",
        "duration_minutes": "INTEGER",
        "record_date": "DATETIME",
        "related_goal_id": "FOREIGN KEY -> Goals NULLABLE",
        "verification_status": "ENUM('pending', 'approved', 'rejected') DEFAULT 'pending'",
        "created_at": "DATETIME",
        "updated_at": "DATETIME"
      },
      "Proofs": {
        "proof_id": "PRIMARY KEY",
        "user_id": "FOREIGN KEY -> Users",
        "goal_id": "FOREIGN KEY -> Goals",
        "activity_id": "FOREIGN KEY -> Activities NULLABLE",
        "media_url": "STRING",
        "media_metadata": "JSON NULLABLE",
        "description": "TEXT",
        "status": "ENUM('pending', 'approved', 'rejected') DEFAULT 'pending'",
        "rejection_reason": "TEXT NULLABLE",
        "submitted_at": "DATETIME",
        "verified_at": "DATETIME NULLABLE"
      },
      "VerificationLogs": {
        "log_id": "PRIMARY KEY",
        "activity_id": "FOREIGN KEY -> Activities NULLABLE",
        "proof_id": "FOREIGN KEY -> Proofs NULLABLE",
        "verification_method": "ENUM('EXTERNAL_API', 'METADATA_CHECK', 'AI_ANALYSIS', 'MANUAL')",
        "result": "BOOLEAN",
        "result_code": "STRING NULLABLE",
        "log_timestamp": "DATETIME",
        "details": "JSON"
      },
      "ExperienceLogs": {
        "log_id": "PRIMARY KEY",
        "user_id": "FOREIGN KEY -> Users",
        "action_type": "STRING",
        "exp_gained": "INTEGER",
        "source_entity_type": "STRING",
        "source_entity_id": "BIGINT",
        "idempotency_key": "UUID",
        "metadata": "JSON NULLABLE",
        "created_at": "DATETIME"
      },
      "UserStreaks": {
        "user_id": "PRIMARY KEY -> Users",
        "streak_type": "ENUM('login', 'workout')",
        "current_count": "INTEGER DEFAULT 0",
        "last_activity_date": "DATE",
        "updated_at": "DATETIME"
      },
      "Milestones": {
        "milestone_id": "PRIMARY KEY",
        "user_id": "FOREIGN KEY -> Users",
        "type": "ENUM('level_up', 'streak_record', 'total_exp_achieved', 'special_achievement')",
        "reference_id": "STRING NULLABLE",
        "achieved_at": "DATETIME",
        "reward_granted": "BOOLEAN DEFAULT FALSE"
      },
      "Rewards": {
        "reward_id": "PRIMARY KEY",
        "user_id": "FOREIGN KEY -> Users",
        "reward_type": "ENUM('points', 'badge', 'item', 'feature_unlock', 'exp_boost')",
        "reward_identifier": "STRING",
        "claimed_at": "DATETIME NULLABLE",
        "expires_at": "DATETIME NULLABLE",
        "metadata": "JSON NULLABLE",
        "created_at": "DATETIME"
      },
      "AuditLogs": {
        "audit_id": "PRIMARY KEY",
        "entity": "STRING",
        "entity_id": "BIGINT",
        "action": "STRING",
        "old_value": "JSON NULLABLE",
        "new_value": "JSON NULLABLE",
        "performed_by_user_id": "FOREIGN KEY -> Users NULLABLE",
        "performed_by_system": "STRING NULLABLE",
        "performed_at": "DATETIME"
      }
    },
    "experience_and_level_system": {
      "exp_rules": {
        "daily_exp_cap": 500,
        "catch_up_bonus": {
          "enabled": true,
          "max_level": 10,
          "multiplier": 1.5
        },
        "action_rules": [
          {
            "action_type": "workout_log",
            "base_exp": 15,
            "min_duration_minutes": 10,
            "cooldown_sec": 3600
          },
          {
            "action_type": "proof_approval",
            "base_exp": 20
          },
          {
            "action_type": "goal_completion",
            "exp_calculation_formula": "goal_type.base_exp_on_completion * goal_type.difficulty_multiplier"
          }
        ],
        "seasonal_reset": {
          "enabled": true,
          "interval": "quarterly",
          "leaderboard_rewards": true
        }
      },
      "level_curve": {
        "formula": "required_exp = floor(100 * pow(level, 1.5))",
        "max_level": 100
      },
      "integration": {
        "auto_exp_award": true,
        "linked_entities": ["Activities", "Proofs", "Goals"],
        "server_side_calculation": true,
        "idempotency_key_required": true
      }
    },
    "proof_and_verification_flow": {
      "submission_endpoint": "POST /api/proofs",
      "verification_pipeline": {
        "type": "Asynchronous, event-driven",
        "message_queue": "verification_queue",
        "dead_letter_queue": "verification_failures_queue",
        "methods": [
          "EXTERNAL_API (e.g., Strava, Google Fit)",
          "METADATA_CHECK (Exif data on images)",
          "AI_ANALYSIS (for image/video content)",
          "MANUAL (for a subset of submissions)"
        ],
        "workflow": [
          "Proof submitted -> initial validation (metadata, duplicate check)",
          "Passed validation -> event published to message queue",
          "Verification service worker consumes event",
          "Runs multiple verification methods based on proof type and assigns a confidence score",
          "Updates Proofs table status and logs results to VerificationLogs",
          "Publishes proof_approved_event or proof_rejected_event"
        ],
        "confidence_thresholds": {
          "auto_approve": 0.9,
          "manual_review_min": 0.6
        }
      }
    },
    "reward_and_milestone_management": {
      "prevent_duplicate_rewards": true,
      "milestone_check_frequency": "on_relevant_action",
      "dynamic_schedule": true,
      "reward_locking": true,
      "reward_expiration_policy": {
        "enabled": true,
        "default_expiration_days": 180
      }
    },
    "notification_system": {
      "type": "WebSocket and Push Notifications",
      "advanced_features": {
        "user_preferences": true,
        "retry_policy": {
          "max_retries": 3,
          "backoff_strategy": "exponential"
        },
        "priority_handling": true,
        "grouping": true
      }
    },
    "security_and_integrity": {
      "input_validation": {
        "enabled": true,
        "server_side_validation": "Strict",
        "ai_based_malicious_input_detection": true
      },
      "authentication": "JWT with role-based access control",
      "rate_limiting": "Endpoint-level strictness defined in API Gateway",
      "server_side_exp_calculation": true,
      "anomaly_detection": {
        "enabled": true,
        "methods": [
          "pattern_analysis",
          "rate_limiting",
          "data_integrity_checks"
        ],
        "auto_action": ["temporary_suspension", "captcha_challenge"],
        "event_trigger": "async_fraud_analysis_service"
      },
      "audit_logging": "Database triggers on sensitive tables (`Users`, `ExperienceLogs`, `Rewards`, `Goals`)"
    },
    "scalability_and_performance": {
      "message_queue": {
        "enabled": true,
        "platform": "RabbitMQ or Kafka",
        "failure_handling": "dead_letter_queue_and_retries",
        "idempotency_key_enforced": true
      },
      "caching": {
        "enabled": true,
        "platform": "Redis",
        "cached_data": ["user_level_data", "level_curve_config", "exp_rules"],
        "invalidation_strategy": "TTL + Pub/Sub on updates"
      },
      "database_sharding": {
        "enabled": "future_proofing",
        "strategy": "hash_by_user_id"
      },
      "concurrency_control": {
        "optimistic_locking_on_UserStats_and_Users": true,
        "distributed_transactions": "Saga pattern or 2PC for critical operations"
      }
    },
    "api_endpoints": {
      "detailed_specification": "OpenAPI/Swagger documentation required",
      "authentication": "JWT with role-based access",
      "rate_limiting": "endpoint-level",
      "versioning": "supported (e.g., /v1/api)",
      "error_handling": "Standardized, with detailed error codes and messages"
    }
  }
}
