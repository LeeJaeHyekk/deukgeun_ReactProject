import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'
import { screen } from '@testing-library/react'
import { render } from '@frontend/shared/utils/testUtils'
import LevelDisplay from './LevelDisplay'
import type { UserLevel } from '../../../shared/types/dto'

// Mock useLevel hook
vi.mock('../hooks/useLevel', () => ({
  useLevel: vi.fn(() => ({
    levelProgress: {
      level: 5,
      currentExp: 750,
      expToNextLevel: 250,
      totalExp: 1250,
      progressPercentage: 75,
    },
    rewards: [],
    cooldownInfo: null,
    dailyLimitInfo: null,
    isLoading: false,
    error: null,
  })),
}))

describe('LevelDisplay', () => {
  const mockUserLevel: UserLevel = {
    id: 1,
    userId: 1,
    level: 5,
    currentExp: 750,
    totalExp: 1250,
    seasonExp: 750,
    totalLevelUps: 4,
    lastLevelUpAt: new Date('2024-01-01'),
    currentSeason: 1,
    seasonStartDate: new Date('2024-01-01'),
    seasonEndDate: new Date('2024-12-31'),
    createdAt: new Date('2024-01-01'),
    updatedAt: new Date('2024-01-01'),
  }

  beforeEach(() => {
    vi.clearAllMocks()
  })

  afterEach(() => {
    vi.clearAllMocks()
  })

  describe('Î†åÎçîÎßÅ', () => {
    it('Î†àÎ≤® Ï†ïÎ≥¥Í∞Ä Ïò¨Î∞îÎ•¥Í≤å Î†åÎçîÎßÅÎêúÎã§', () => {
      render(<LevelDisplay userLevel={mockUserLevel} />)

      expect(screen.getByText('Lv.5')).toBeInTheDocument()
      expect(screen.getByText('750')).toBeInTheDocument()
    })

    it('Í≤ΩÌóòÏπò ÏßÑÌñâÎ•† Î∞îÍ∞Ä Ïò¨Î∞îÎ•¥Í≤å Î†åÎçîÎßÅÎêúÎã§', () => {
      render(<LevelDisplay userLevel={mockUserLevel} />)

      const progressBar = screen.getByRole('progressbar')
      expect(progressBar).toBeInTheDocument()
    })

    it('Í≤ΩÌóòÏπò Ï†ïÎ≥¥Í∞Ä ÌëúÏãúÎêúÎã§', () => {
      render(<LevelDisplay userLevel={mockUserLevel} />)

      expect(screen.getByText('750')).toBeInTheDocument()
      expect(screen.getByText('EXP')).toBeInTheDocument()
    })
  })

  describe('Îã§ÏñëÌïú Î†àÎ≤® ÏÉÅÌÉú', () => {
    it('Î†àÎ≤® 1 ÏÉÅÌÉúÍ∞Ä Ïò¨Î∞îÎ•¥Í≤å ÌëúÏãúÎêúÎã§', () => {
      const level1UserLevel: UserLevel = {
        ...mockUserLevel,
        level: 1,
        currentExp: 0,
        totalExp: 0,
      }

      render(<LevelDisplay userLevel={level1UserLevel} />)

      expect(screen.getByText('Lv.1')).toBeInTheDocument()
      expect(screen.getByText('0')).toBeInTheDocument()
    })

    it('ÎÜíÏùÄ Î†àÎ≤® ÏÉÅÌÉúÍ∞Ä Ïò¨Î∞îÎ•¥Í≤å ÌëúÏãúÎêúÎã§', () => {
      const highLevelUserLevel: UserLevel = {
        ...mockUserLevel,
        level: 50,
        currentExp: 5000,
        totalExp: 50000,
      }

      render(<LevelDisplay userLevel={highLevelUserLevel} />)

      expect(screen.getByText('Lv.50')).toBeInTheDocument()
      expect(screen.getByText('5000')).toBeInTheDocument()
    })
  })

  describe('ÏòµÏÖò props', () => {
    it('showProgressÍ∞Ä falseÏùº Îïå ÏßÑÌñâÎ•†Ïù¥ ÌëúÏãúÎêòÏßÄ ÏïäÎäîÎã§', () => {
      render(<LevelDisplay userLevel={mockUserLevel} showProgress={false} />)

      expect(screen.getByText('Lv.5')).toBeInTheDocument()
      expect(screen.queryByText('750')).not.toBeInTheDocument()
    })

    it('showRewardsÍ∞Ä trueÏùº Îïå Î≥¥ÏÉÅ ÏÑπÏÖòÏù¥ ÌëúÏãúÎêúÎã§', () => {
      const { useLevel } = require('../hooks/useLevel')
      useLevel.mockReturnValue({
        levelProgress: {
          level: 5,
          currentExp: 750,
          expToNextLevel: 250,
          totalExp: 1250,
          progressPercentage: 75,
        },
        rewards: [
          {
            id: 1,
            rewardId: 'test-reward',
            metadata: { description: 'Test Reward', icon: 'üèÜ' },
          },
        ],
        cooldownInfo: null,
        dailyLimitInfo: null,
        isLoading: false,
        error: null,
      })

      render(<LevelDisplay userLevel={mockUserLevel} showRewards={true} />)

      expect(screen.getByText('ÌöçÎìùÌïú Î≥¥ÏÉÅ')).toBeInTheDocument()
      expect(screen.getByText('Test Reward')).toBeInTheDocument()
    })

    it('showCooldownÏù¥ trueÏùº Îïå Ïø®Îã§Ïö¥ Ï†ïÎ≥¥Í∞Ä ÌëúÏãúÎêúÎã§', () => {
      const { useLevel } = require('../hooks/useLevel')
      useLevel.mockReturnValue({
        levelProgress: {
          level: 5,
          currentExp: 750,
          expToNextLevel: 250,
          totalExp: 1250,
          progressPercentage: 75,
        },
        rewards: [],
        cooldownInfo: {
          isOnCooldown: true,
          remainingTime: 5000,
        },
        dailyLimitInfo: null,
        isLoading: false,
        error: null,
      })

      render(<LevelDisplay userLevel={mockUserLevel} showCooldown={true} />)

      expect(screen.getByText('Ïø®Îã§Ïö¥: 5Ï¥à ÎÇ®Ïùå')).toBeInTheDocument()
    })

    it('showDailyLimitÏù¥ trueÏùº Îïå ÏùºÏùº ÌïúÎèÑ Ï†ïÎ≥¥Í∞Ä ÌëúÏãúÎêúÎã§', () => {
      const { useLevel } = require('../hooks/useLevel')
      useLevel.mockReturnValue({
        levelProgress: {
          level: 5,
          currentExp: 750,
          expToNextLevel: 250,
          totalExp: 1250,
          progressPercentage: 75,
        },
        rewards: [],
        cooldownInfo: null,
        dailyLimitInfo: {
          dailyExp: 800,
          limit: 1000,
        },
        isLoading: false,
        error: null,
      })

      render(<LevelDisplay userLevel={mockUserLevel} showDailyLimit={true} />)

      expect(screen.getByText('ÏùºÏùº Í≤ΩÌóòÏπò: 800/1000')).toBeInTheDocument()
    })
  })

  describe('Î°úÎî© Î∞è ÏóêÎü¨ ÏÉÅÌÉú', () => {
    it('Î°úÎî© Ï§ëÏùº Îïå Î°úÎî© Î©îÏãúÏßÄÍ∞Ä ÌëúÏãúÎêúÎã§', () => {
      const { useLevel } = require('../hooks/useLevel')
      useLevel.mockReturnValue({
        levelProgress: null,
        rewards: [],
        cooldownInfo: null,
        dailyLimitInfo: null,
        isLoading: true,
        error: null,
      })

      render(<LevelDisplay />)

      expect(screen.getByText('Î†àÎ≤® Ï†ïÎ≥¥ Î°úÎî© Ï§ë...')).toBeInTheDocument()
    })

    it('ÏóêÎü¨Í∞Ä Î∞úÏÉùÌñàÏùÑ Îïå ÏóêÎü¨ Î©îÏãúÏßÄÍ∞Ä ÌëúÏãúÎêúÎã§', () => {
      const { useLevel } = require('../hooks/useLevel')
      useLevel.mockReturnValue({
        levelProgress: null,
        rewards: [],
        cooldownInfo: null,
        dailyLimitInfo: null,
        isLoading: false,
        error: 'Î†àÎ≤® Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.',
      })

      render(<LevelDisplay />)

      expect(
        screen.getByText('Î†àÎ≤® Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.')
      ).toBeInTheDocument()
    })

    it('userLevelÏù¥ Ï†úÍ≥µÎêòÎ©¥ Î°úÎî© ÏÉÅÌÉúÎ•º Î¨¥ÏãúÌïúÎã§', () => {
      const { useLevel } = require('../hooks/useLevel')
      useLevel.mockReturnValue({
        levelProgress: null,
        rewards: [],
        cooldownInfo: null,
        dailyLimitInfo: null,
        isLoading: true,
        error: 'ÏóêÎü¨ Î∞úÏÉù',
      })

      render(<LevelDisplay userLevel={mockUserLevel} />)

      expect(screen.getByText('Lv.5')).toBeInTheDocument()
      expect(screen.queryByText('Î†àÎ≤® Ï†ïÎ≥¥ Î°úÎî© Ï§ë...')).not.toBeInTheDocument()
      expect(screen.queryByText('ÏóêÎü¨ Î∞úÏÉù')).not.toBeInTheDocument()
    })
  })

  describe('Ïä§ÌÉÄÏùºÎßÅ', () => {
    it('Ïª§Ïä§ÌÖÄ classNameÏù¥ Ï†ÅÏö©ÎêúÎã§', () => {
      const { container } = render(
        <LevelDisplay userLevel={mockUserLevel} className="custom-class" />
      )

      expect(container.firstChild).toHaveClass('custom-class')
    })

    it('Í∏∞Î≥∏ Ïä§ÌÉÄÏùºÏù¥ Ï†ÅÏö©ÎêúÎã§', () => {
      const { container } = render(<LevelDisplay userLevel={mockUserLevel} />)

      expect(container.firstChild).toHaveClass('levelDisplay')
    })
  })

  describe('Ï†ëÍ∑ºÏÑ±', () => {
    it('Ï†ÅÏ†àÌïú ARIA ÏÜçÏÑ±Ïù¥ ÏÑ§Ï†ïÎêúÎã§', () => {
      render(<LevelDisplay userLevel={mockUserLevel} />)

      const progressBar = screen.getByRole('progressbar')
      expect(progressBar).toBeInTheDocument()
    })

    it('Î†àÎ≤® Ï†ïÎ≥¥Í∞Ä Ïä§ÌÅ¨Î¶∞ Î¶¨ÎçîÏóêÏÑú ÏùΩÏùÑ Ïàò ÏûàÎã§', () => {
      render(<LevelDisplay userLevel={mockUserLevel} />)

      expect(screen.getByText('Lv.5')).toBeInTheDocument()
      expect(screen.getByText('750')).toBeInTheDocument()
    })
  })
})
