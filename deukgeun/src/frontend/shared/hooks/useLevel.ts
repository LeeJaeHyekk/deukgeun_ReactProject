const { useState, useEffect, useCallback, useRef  } = require('react')
const { useAuth  } = require('./useAuth')
const { levelApiWrapper, levelApiManager  } = require('../api/levelApiWrapper')
const { LevelProgress, UserReward  } = require('../api/levelApi')
const { showToast  } = require('../lib')

// ============================================================================
// Constants
// ============================================================================

const FETCH_COOLDOWN = 30000 // 30Ï¥à Ïø®Îã§Ïö¥

// ============================================================================
// Default Values
// ============================================================================

const DEFAULT_LEVEL_PROGRESS: LevelProgress = {
  level: 1,
  currentExp: 0,
  totalExp: 0,
  seasonExp: 0,
  expToNextLevel: 100,
  progressPercentage: 0,
}

// ============================================================================
// Hook
// ============================================================================

function useLevel() {
  const { user, isLoggedIn } = useAuth()
  const [levelProgress, setLevelProgress] = useState<LevelProgress | null>(null)
  const [rewards, setRewards] = useState<UserReward[]>([])
  const [cooldownInfo, setCooldownInfo] = useState<{
    isOnCooldown: boolean
    remainingTime: number
  } | null>(null)
  const [dailyLimitInfo, setDailyLimitInfo] = useState<{
    withinLimit: boolean
    dailyExp: number
    limit: number
  } | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  // API Ìò∏Ï∂ú Ï†úÌïúÏùÑ ÏúÑÌïú ref
  const lastFetchTime = useRef<number>(0)

  // ============================================================================
  // API Ìò∏Ï∂ú Ìï®ÏàòÎì§
  // ============================================================================

  const fetchLevelProgress = useCallback(async () => {
    if (!isLoggedIn || !user) {
      setLevelProgress(DEFAULT_LEVEL_PROGRESS)
      return
    }

    // API Ìò∏Ï∂ú Ï†úÌïú ÌôïÏù∏
    const now = Date.now()
    if (now - lastFetchTime.current < FETCH_COOLDOWN) {
      console.log("API Ìò∏Ï∂ú Ï†úÌïú: Ïø®Îã§Ïö¥ Ï§ë")
      return
    }

    try {
      setIsLoading(true)
      setError(null)
      lastFetchTime.current = now

      const progress = await levelApiWrapper.getUserProgress(user.id)
      // progressÍ∞Ä Ïú†Ìö®ÌïúÏßÄ ÌôïÏù∏ÌïòÍ≥† Í∏∞Î≥∏Í∞íÍ≥º Î≥ëÌï©
      const safeProgress = {
        ...DEFAULT_LEVEL_PROGRESS,
        ...progress,
        progressPercentage: progress?.progressPercentage ?? 0,
      }
      setLevelProgress(safeProgress)
    } catch (err: any) {
      console.error("Î†àÎ≤® ÏßÑÌñâÎ•† Ï°∞Ìöå Ïã§Ìå®:", err)
      setError("Î†àÎ≤® Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.")
      setLevelProgress(DEFAULT_LEVEL_PROGRESS)
    } finally {
      setIsLoading(false)
    }
  }, [isLoggedIn, user])

  const fetchRewards = useCallback(async () => {
    if (!isLoggedIn || !user) {
      setRewards([])
      return
    }

    // API Ìò∏Ï∂ú Ï†úÌïú ÌôïÏù∏
    const now = Date.now()
    if (now - lastFetchTime.current < FETCH_COOLDOWN) {
      console.log("API Ìò∏Ï∂ú Ï†úÌïú: Ïø®Îã§Ïö¥ Ï§ë")
      return
    }

    try {
      setIsLoading(true)
      setError(null)
      lastFetchTime.current = now

      const userRewards = await levelApiWrapper.getUserRewards(user.id)
      setRewards(userRewards)
    } catch (err: any) {
      console.error("Î≥¥ÏÉÅ Î™©Î°ù Ï°∞Ìöå Ïã§Ìå®:", err)
      setError("Î≥¥ÏÉÅ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.")
      setRewards([])
    } finally {
      setIsLoading(false)
    }
  }, [isLoggedIn, user])

  // ============================================================================
  // Í≤ΩÌóòÏπò Î∂ÄÏó¨ Ìï®Ïàò
  // ============================================================================

  const grantExp = useCallback(
    async (actionType: string, source: string, metadata?: any) => {
      if (!isLoggedIn || !user) {
        console.log("Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÏïÑÎãò")
        return null
      }

      try {
        const result = await levelApiWrapper.grantExp({
          actionType,
          source,
          metadata,
        })

        if (result) {
          // Ïø®Îã§Ïö¥ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
          if (result.cooldownInfo) {
            setCooldownInfo(result.cooldownInfo)
          }

          // ÏùºÏùº ÌïúÎèÑ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
          if (result.dailyLimitInfo) {
            setDailyLimitInfo(result.dailyLimitInfo)
          }

          // Î†àÎ≤®ÏóÖ Ïãú ÏïåÎ¶º
          if (result.levelUp) {
            showToast("üéâ Î†àÎ≤®ÏóÖ! Ï∂ïÌïòÌï©ÎãàÎã§!", "success")
          }

          // Î≥¥ÏÉÅ ÌöçÎìù Ïãú ÏïåÎ¶º
          if (result.rewards && result.rewards.length > 0) {
            result.rewards.forEach((reward: any) => {
              showToast(
                `üéÅ ${reward.metadata?.name || "Î≥¥ÏÉÅ"} ÌöçÎìù!`,
                "success"
              )
            })
          }

          // ÏßÑÌñâÎ•† ÏÉàÎ°úÍ≥†Ïπ®
          await fetchLevelProgress()
          await fetchRewards()

          return result
        } else {
          showToast("Í≤ΩÌóòÏπò Î∂ÄÏó¨Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.", "error")
          return null
        }
      } catch (err: any) {
        console.error("Í≤ΩÌóòÏπò Î∂ÄÏó¨ Ïã§Ìå®:", err)
        showToast("Í≤ΩÌóòÏπò Î∂ÄÏó¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.", "error")
        return null
      }
    },
    [isLoggedIn, user, fetchLevelProgress, fetchRewards]
  )

  // ============================================================================
  // Ï¥àÍ∏∞Ìôî Î∞è Î¶¨ÏÖã Ìï®ÏàòÎì§
  // ============================================================================

  const resetLevelData = useCallback(() => {
    setLevelProgress(DEFAULT_LEVEL_PROGRESS)
    setRewards([])
    setCooldownInfo(null)
    setDailyLimitInfo(null)
    setError(null)
  }, [])

  const enableLevelApi = useCallback(() => {
    levelApiManager.enable()
    console.log("Î†àÎ≤® API ÌôúÏÑ±ÌôîÎê®")
  }, [])

  const disableLevelApi = useCallback(() => {
    levelApiManager.disable()
    resetLevelData()
    console.log("Î†àÎ≤® API ÎπÑÌôúÏÑ±ÌôîÎê®")
  }, [resetLevelData])

  // ============================================================================
  // Effects
  // ============================================================================

  useEffect(() => {
    if (isLoggedIn && user) {
      fetchLevelProgress()
      fetchRewards()
    } else {
      // Î°úÍ∑∏ÏïÑÏõÉ Ïãú Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
      setLevelProgress(DEFAULT_LEVEL_PROGRESS)
      setRewards([])
      setCooldownInfo(null)
      setDailyLimitInfo(null)
      setError(null)
    }
  }, [isLoggedIn, user, fetchLevelProgress, fetchRewards])

  // ============================================================================
  // Return Values
  // ============================================================================

  return {
    // ÏÉÅÌÉú
    levelProgress: levelProgress ?? DEFAULT_LEVEL_PROGRESS,
    rewards,
    cooldownInfo,
    dailyLimitInfo,
    isLoading,
    error,
    isLevelApiEnabled: levelApiManager.isEnabled(),

    // Ïï°ÏÖò
    fetchLevelProgress,
    fetchRewards,
    grantExp,
    resetLevelData,
    enableLevelApi,
    disableLevelApi,

    // Ïú†Ìã∏Î¶¨Ìã∞
    hasLevelData: levelProgress !== null,
    canGrantExp:
      levelApiManager.isEnabled() && isLoggedIn && !cooldownInfo?.isOnCooldown,
  }
}
