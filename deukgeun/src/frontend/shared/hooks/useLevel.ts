import { useState, useEffect, useCallback } from "react"
import { useAuth } from "./useAuth"
import { levelApi, LevelProgress, UserReward } from "../api/levelApi"
import { showToast } from "../lib"

export function useLevel() {
  const { user, isLoggedIn } = useAuth()
  const [levelProgress, setLevelProgress] = useState<LevelProgress | null>(null)
  const [rewards, setRewards] = useState<UserReward[]>([])
  const [cooldownInfo, setCooldownInfo] = useState<{
    isOnCooldown: boolean
    remainingTime: number
  } | null>(null)
  const [dailyLimitInfo, setDailyLimitInfo] = useState<{
    withinLimit: boolean
    dailyExp: number
    limit: number
  } | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  /**
   * ÏÇ¨Ïö©Ïûê Î†àÎ≤® ÏßÑÌñâÎ•† Ï°∞Ìöå
   */
  const fetchLevelProgress = useCallback(async () => {
    if (!isLoggedIn || !user) return

    try {
      setIsLoading(true)
      setError(null)
      const progress = await levelApi.getUserProgress(user.id)
      setLevelProgress(progress)
    } catch (err) {
      setError("Î†àÎ≤® Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.")
      console.error("Î†àÎ≤® ÏßÑÌñâÎ•† Ï°∞Ìöå Ïã§Ìå®:", err)
    } finally {
      setIsLoading(false)
    }
  }, [isLoggedIn, user])

  /**
   * ÏÇ¨Ïö©Ïûê Î≥¥ÏÉÅ Î™©Î°ù Ï°∞Ìöå
   */
  const fetchRewards = useCallback(async () => {
    if (!isLoggedIn || !user) return

    try {
      setIsLoading(true)
      setError(null)
      const userRewards = await levelApi.getUserRewards(user.id)
      setRewards(userRewards)
    } catch (err) {
      setError("Î≥¥ÏÉÅ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.")
      console.error("Î≥¥ÏÉÅ Î™©Î°ù Ï°∞Ìöå Ïã§Ìå®:", err)
    } finally {
      setIsLoading(false)
    }
  }, [isLoggedIn, user])

  /**
   * Í≤ΩÌóòÏπò Î∂ÄÏó¨
   */
  const grantExp = useCallback(
    async (actionType: string, source: string, metadata?: any) => {
      if (!isLoggedIn || !user) return

      try {
        const result = await levelApi.grantExp({
          actionType,
          source,
          metadata,
        })

        if (result.success) {
          // Ïø®Îã§Ïö¥ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
          if (result.cooldownInfo) {
            setCooldownInfo(result.cooldownInfo)
          }

          // ÏùºÏùº ÌïúÎèÑ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
          if (result.dailyLimitInfo) {
            setDailyLimitInfo(result.dailyLimitInfo)
          }

          // Î†àÎ≤®ÏóÖ Ïãú ÏïåÎ¶º
          if (result.levelUp) {
            showToast("üéâ Î†àÎ≤®ÏóÖ! Ï∂ïÌïòÌï©ÎãàÎã§!", "success")
          }

          // Î≥¥ÏÉÅ ÌöçÎìù Ïãú ÏïåÎ¶º
          if (result.rewards && result.rewards.length > 0) {
            result.rewards.forEach(reward => {
              showToast(
                `üéÅ ${reward.metadata?.name || "Î≥¥ÏÉÅ"} ÌöçÎìù!`,
                "success"
              )
            })
          }

          // ÏßÑÌñâÎ•† ÏÉàÎ°úÍ≥†Ïπ®
          await fetchLevelProgress()
          await fetchRewards()

          return result
        } else {
          // Ïã§Ìå® Ïù¥Ïú†Ïóê Îî∞Î•∏ Î©îÏãúÏßÄ
          if (result.cooldownInfo?.isOnCooldown) {
            const remainingSeconds = Math.ceil(
              result.cooldownInfo.remainingTime / 1000
            )
            showToast(
              `Ïø®Îã§Ïö¥ Ï§ëÏûÖÎãàÎã§. ${remainingSeconds}Ï¥à ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.`,
              "warning"
            )
          } else if (
            result.dailyLimitInfo &&
            !result.dailyLimitInfo.withinLimit
          ) {
            showToast(
              `ÏùºÏùº Í≤ΩÌóòÏπò ÌïúÎèÑ(${result.dailyLimitInfo.limit} EXP)Î•º Ï¥àÍ≥ºÌñàÏäµÎãàÎã§.`,
              "warning"
            )
          } else {
            showToast("Í≤ΩÌóòÏπòÎ•º ÌöçÎìùÌï† Ïàò ÏóÜÏäµÎãàÎã§.", "warning")
          }

          // Ïø®Îã§Ïö¥ Î∞è ÌïúÎèÑ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
          if (result.cooldownInfo) {
            setCooldownInfo(result.cooldownInfo)
          }
          if (result.dailyLimitInfo) {
            setDailyLimitInfo(result.dailyLimitInfo)
          }

          return result
        }
      } catch (err) {
        console.error("Í≤ΩÌóòÏπò Î∂ÄÏó¨ Ïã§Ìå®:", err)
        return null
      }
    },
    [isLoggedIn, user, fetchLevelProgress, fetchRewards]
  )

  /**
   * Ïø®Îã§Ïö¥ ÏÉÅÌÉú ÌôïÏù∏
   */
  const checkCooldown = useCallback(
    async (actionType: string) => {
      if (!isLoggedIn || !user) return false

      try {
        const result = await levelApi.checkCooldown(actionType, user.id)
        return result.canPerform
      } catch (err) {
        console.error("Ïø®Îã§Ïö¥ ÌôïÏù∏ Ïã§Ìå®:", err)
        return false
      }
    },
    [isLoggedIn, user]
  )

  /**
   * Î¶¨ÎçîÎ≥¥Îìú Ï°∞Ìöå
   */
  const getLeaderboard = useCallback(
    async (page: number = 1, limit: number = 20) => {
      try {
        const result = await levelApi.getGlobalLeaderboard(page, limit)
        return result
      } catch (err) {
        console.error("Î¶¨ÎçîÎ≥¥Îìú Ï°∞Ìöå Ïã§Ìå®:", err)
        return null
      }
    },
    []
  )

  /**
   * ÏãúÏ¶å Î¶¨ÎçîÎ≥¥Îìú Ï°∞Ìöå
   */
  const getSeasonLeaderboard = useCallback(
    async (seasonId: string, page: number = 1, limit: number = 20) => {
      try {
        const result = await levelApi.getSeasonLeaderboard(
          seasonId,
          page,
          limit
        )
        return result
      } catch (err) {
        console.error("ÏãúÏ¶å Î¶¨ÎçîÎ≥¥Îìú Ï°∞Ìöå Ïã§Ìå®:", err)
        return null
      }
    },
    []
  )

  // Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  useEffect(() => {
    if (isLoggedIn && user) {
      fetchLevelProgress()
      fetchRewards()
    }
  }, [isLoggedIn, user, fetchLevelProgress, fetchRewards])

  return {
    // ÏÉÅÌÉú
    levelProgress,
    rewards,
    cooldownInfo,
    dailyLimitInfo,
    isLoading,
    error,

    // Ïï°ÏÖò
    fetchLevelProgress,
    fetchRewards,
    grantExp,
    checkCooldown,
    getLeaderboard,
    getSeasonLeaderboard,

    // Ïú†Ìã∏Î¶¨Ìã∞
    isLevelUp: levelProgress?.levelUp || false,
    currentLevel: levelProgress?.level || 1,
    currentExp: levelProgress?.currentExp || 0,
    totalExp: levelProgress?.totalExp || 0,
    progressPercentage: levelProgress?.progressPercentage || 0,
    expToNextLevel: levelProgress?.expToNextLevel || 0,
  }
}
