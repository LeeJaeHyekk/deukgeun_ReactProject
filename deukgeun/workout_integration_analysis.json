{
  "workout_integration_analysis": {
    "project": "Workout Frontend-Backend Integration Analysis",
    "description": "mix.json 백엔드 구조와 현재 프론트엔드 구조 통합 분석 및 최적화 계획",
    "createdAt": "2025-01-27T00:00:00.000Z",
    "version": "1.0.0",

    "backend_analysis": {
      "mix_json_structure": {
        "entities": [
          "User",
          "Machine",
          "WorkoutSession",
          "ExerciseSet",
          "Gym",
          "Post",
          "Comment",
          "UserLevel",
          "Like",
          "ExpHistory",
          "WorkoutPlan",
          "WorkoutPlanExercise",
          "WorkoutGoal",
          "WorkoutStats",
          "WorkoutProgress",
          "WorkoutReminder",
          "Milestone",
          "UserStreak",
          "UserReward"
        ],
        "key_features": {
          "data_mapping": "Entity-Table-DTO-FrontType 매핑",
          "validation_rules": "필드별 검증 규칙 정의",
          "relationships": "엔티티 간 관계 정의",
          "security": "비밀번호 해싱, 민감 정보 제외",
          "serialization": "JSON 직렬화 규칙"
        }
      },

      "workout_related_entities": {
        "WorkoutSession": {
          "table": "workout_sessions",
          "dto": "WorkoutSessionDTO",
          "frontType": "WorkoutSessionType",
          "relations": {
            "user": "ManyToOne",
            "workoutPlan": "ManyToOne",
            "gym": "ManyToOne",
            "exerciseSets": "OneToMany"
          },
          "key_fields": [
            "userId",
            "planId",
            "gymId",
            "name",
            "startTime",
            "endTime",
            "totalDurationMinutes",
            "moodRating",
            "energyLevel",
            "notes",
            "status"
          ]
        },
        "WorkoutPlan": {
          "table": "workout_plans",
          "dto": "WorkoutPlanDTO",
          "frontType": "WorkoutPlanType",
          "relations": {
            "user": "ManyToOne",
            "exercises": "OneToMany",
            "sessions": "OneToMany"
          },
          "key_fields": [
            "userId",
            "name",
            "description",
            "difficulty",
            "estimatedDurationMinutes",
            "targetMuscleGroups",
            "isTemplate",
            "isPublic"
          ]
        },
        "WorkoutGoal": {
          "table": "workout_goals",
          "dto": "WorkoutGoalDTO",
          "frontType": "WorkoutGoalType",
          "relations": {
            "user": "ManyToOne"
          },
          "key_fields": [
            "userId",
            "title",
            "description",
            "type",
            "targetValue",
            "currentValue",
            "unit",
            "deadline",
            "isCompleted",
            "completedAt"
          ]
        },
        "ExerciseSet": {
          "table": "exercise_sets",
          "dto": "ExerciseSetDTO",
          "frontType": "ExerciseSetType",
          "relations": {
            "workoutSession": "ManyToOne",
            "machine": "ManyToOne"
          },
          "key_fields": [
            "sessionId",
            "machineId",
            "setNumber",
            "repsCompleted",
            "weightKg",
            "durationSeconds",
            "distanceMeters",
            "rpeRating",
            "notes"
          ]
        },
        "Machine": {
          "table": "machines",
          "dto": "MachineDTO",
          "frontType": "MachineType",
          "relations": {},
          "key_fields": [
            "machineKey",
            "name",
            "nameKo",
            "nameEn",
            "imageUrl",
            "shortDesc",
            "detailDesc",
            "positiveEffect",
            "category",
            "targetMuscles",
            "difficulty",
            "videoUrl"
          ]
        }
      }
    },

    "frontend_analysis": {
      "current_structure": {
        "architecture": "Feature-based Architecture with Zustand State Management",
        "framework": "React + TypeScript + Vite",
        "state_management": "Zustand Store with DevTools & Persist",
        "styling": "CSS Modules with Tailwind-like utilities",
        "routing": "React Router v6"
      },

      "existing_features": {
        "completed": [
          "기본 워크아웃 페이지 구조",
          "탭 기반 네비게이션",
          "Zustand 상태 관리",
          "모달 시스템 (최적화됨)",
          "카드 컴포넌트들",
          "폼 컴포넌트들",
          "차트 컴포넌트들",
          "타이머 시스템",
          "진행률 시각화"
        ],
        "optimized": [
          "모달 스크롤 문제 해결",
          "세션 모달 구조 개편",
          "간단한 디자인 시스템 적용"
        ]
      },

      "data_types": {
        "WorkoutPlan": "완전히 정의됨",
        "WorkoutSession": "완전히 정의됨",
        "WorkoutGoal": "완전히 정의됨",
        "ExerciseSet": "완전히 정의됨",
        "Machine": "완전히 정의됨",
        "DashboardData": "완전히 정의됨"
      }
    },

    "integration_analysis": {
      "compatibility": {
        "data_types": "95% 호환 - 프론트엔드 타입이 백엔드 DTO와 거의 일치",
        "field_mapping": "90% 일치 - 일부 필드명 차이 있음",
        "relationships": "100% 호환 - 관계 구조가 동일함",
        "validation": "80% 호환 - 프론트엔드에 일부 검증 규칙 추가 필요"
      },

      "mismatches": {
        "field_names": [
          "백엔드: machineKey vs 프론트: id",
          "백엔드: nameKo/nameEn vs 프론트: name",
          "백엔드: shortDesc vs 프론트: description"
        ],
        "missing_frontend": [
          "Machine.machineKey",
          "Machine.nameKo/nameEn",
          "Machine.shortDesc",
          "Machine.positiveEffect",
          "Machine.videoUrl"
        ],
        "missing_backend": [
          "WorkoutPlan.status (프론트엔드에만 있음)",
          "WorkoutPlan.goals (프론트엔드에만 있음)"
        ]
      },

      "optimization_needs": [
        "Machine 엔티티 필드 매핑 개선",
        "WorkoutPlan 상태 필드 백엔드 추가",
        "API 엔드포인트와 프론트엔드 타입 동기화",
        "검증 규칙 통일"
      ]
    },

    "workload_analysis": {
      "total_estimated_hours": 32,
      "phases": 6,
      "priority": "high",

      "phase_1": {
        "name": "백엔드-프론트엔드 타입 동기화",
        "description": "mix.json 기반으로 프론트엔드 타입 완전 동기화",
        "tasks": [
          "Machine 엔티티 필드 매핑 수정",
          "WorkoutPlan 상태 필드 처리",
          "API DTO와 프론트엔드 타입 일치",
          "검증 규칙 통일"
        ],
        "estimated_hours": 6,
        "dependencies": ["mix.json 분석 완료"]
      },

      "phase_2": {
        "name": "API 통합 및 데이터 흐름 최적화",
        "description": "백엔드 API와 프론트엔드 데이터 흐름 통합",
        "tasks": [
          "API 엔드포인트 구현",
          "데이터 변환 로직 구현",
          "에러 처리 통합",
          "로딩 상태 관리"
        ],
        "estimated_hours": 8,
        "dependencies": ["Phase 1 완료"]
      },

      "phase_3": {
        "name": "실시간 기능 및 상태 관리 최적화",
        "description": "실시간 타이머, 진행률 추적 기능 최적화",
        "tasks": [
          "실시간 타이머 시스템 개선",
          "진행률 추적 최적화",
          "상태 동기화 개선",
          "성능 최적화"
        ],
        "estimated_hours": 6,
        "dependencies": ["Phase 2 완료"]
      },

      "phase_4": {
        "name": "모달 시스템 및 UI 최적화",
        "description": "기존 모달 최적화와 새로운 기능 통합",
        "tasks": [
          "기존 모달 최적화 적용",
          "새로운 기능 모달 추가",
          "UI/UX 개선",
          "접근성 향상"
        ],
        "estimated_hours": 4,
        "dependencies": ["Phase 3 완료"]
      },

      "phase_5": {
        "name": "차트 및 분석 기능 강화",
        "description": "백엔드 데이터 기반 차트 및 분석 기능 강화",
        "tasks": [
          "WorkoutStats 기반 차트 구현",
          "WorkoutProgress 분석 기능",
          "개인 기록 추적",
          "목표 달성 분석"
        ],
        "estimated_hours": 5,
        "dependencies": ["Phase 4 완료"]
      },

      "phase_6": {
        "name": "통합 테스트 및 최종 최적화",
        "description": "전체 시스템 통합 테스트 및 최종 최적화",
        "tasks": [
          "통합 테스트 작성",
          "성능 최적화",
          "에러 처리 개선",
          "문서화"
        ],
        "estimated_hours": 3,
        "dependencies": ["Phase 5 완료"]
      }
    },

    "implementation_priority": {
      "immediate": [
        "Machine 엔티티 필드 매핑 수정",
        "API 엔드포인트 구현",
        "기본 데이터 흐름 통합"
      ],
      "short_term": [
        "실시간 기능 최적화",
        "모달 시스템 개선",
        "차트 기능 강화"
      ],
      "long_term": ["고급 분석 기능", "AI 기반 추천", "소셜 기능"]
    },

    "risk_assessment": {
      "high_risk": [
        "백엔드 API 변경 시 프론트엔드 호환성 문제",
        "실시간 기능 성능 이슈",
        "대용량 데이터 처리 성능"
      ],
      "medium_risk": [
        "타입 동기화 과정에서의 오류",
        "상태 관리 복잡성 증가",
        "모달 시스템 충돌"
      ],
      "low_risk": ["UI/UX 개선 과정", "문서화 작업", "테스트 코드 작성"]
    },

    "success_metrics": {
      "performance": [
        "페이지 로딩 시간 < 2초",
        "모달 열기 시간 < 300ms",
        "실시간 업데이트 지연 < 100ms"
      ],
      "functionality": [
        "모든 CRUD 작업 정상 동작",
        "실시간 타이머 정확성 100%",
        "차트 데이터 정확성 100%"
      ],
      "user_experience": [
        "모달 스크롤 문제 완전 해결",
        "세션 모달 사용성 향상",
        "전체적인 UI 일관성"
      ]
    }
  }
}
